{"version":3,"sources":["webpack://GSD/webpack/universalModuleDefinition","webpack://GSD/webpack/bootstrap","webpack://GSD/./node_modules/ml-matrix/src/matrix.js","webpack://GSD/./node_modules/ml-matrix/src/views/base.js","webpack://GSD/./node_modules/ml-matrix/src/index.js","webpack://GSD/./node_modules/ml-matrix/src/util.js","webpack://GSD/./node_modules/ml-matrix/src/dc/util.js","webpack://GSD/./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/array.js","webpack://GSD/./node_modules/ml-optimize-lorentzian/src/index.js","webpack://GSD/./node_modules/ml-matrix/src/abstractMatrix.js","webpack://GSD/./node_modules/ml-matrix/src/dc/lu.js","webpack://GSD/./node_modules/ml-matrix/src/dc/svd.js","webpack://GSD/./node_modules/ml-stat/index.js","webpack://GSD/./node_modules/ml-stat/array.js","webpack://GSD/./node_modules/ml-curve-fitting/src/algebra.js","webpack://GSD/./src/index.js","webpack://GSD/./src/gsd.js","webpack://GSD/./node_modules/ml-savitzky-golay-generalized/src/index.js","webpack://GSD/./node_modules/extend/index.js","webpack://GSD/./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/index.js","webpack://GSD/./node_modules/ml-savitzky-golay-generalized/node_modules/ml-stat/matrix.js","webpack://GSD/./src/post/optimizePeaks.js","webpack://GSD/./node_modules/ml-curve-fitting/src/index.js","webpack://GSD/./node_modules/ml-curve-fitting/src/LM.js","webpack://GSD/./node_modules/ml-matrix/src/symbol-species.js","webpack://GSD/./node_modules/ml-array-utils/src/index.js","webpack://GSD/./node_modules/ml-array-utils/src/ArrayUtils.js","webpack://GSD/./node_modules/ml-stat/matrix.js","webpack://GSD/./node_modules/ml-array-utils/src/getEquallySpaced.js","webpack://GSD/./node_modules/ml-array-utils/src/snv.js","webpack://GSD/./node_modules/ml-matrix/src/views/transpose.js","webpack://GSD/./node_modules/ml-matrix/src/views/row.js","webpack://GSD/./node_modules/ml-matrix/src/views/sub.js","webpack://GSD/./node_modules/ml-matrix/src/views/selection.js","webpack://GSD/./node_modules/ml-matrix/src/views/column.js","webpack://GSD/./node_modules/ml-matrix/src/views/flipRow.js","webpack://GSD/./node_modules/ml-matrix/src/views/flipColumn.js","webpack://GSD/./node_modules/ml-matrix/src/decompositions.js","webpack://GSD/./node_modules/ml-matrix/src/dc/evd.js","webpack://GSD/./node_modules/ml-matrix/src/dc/qr.js","webpack://GSD/./node_modules/ml-matrix/src/dc/cholesky.js","webpack://GSD/./src/post/joinBroadPeaks.js","webpack://GSD/./src/post/broadenPeaks.js"],"names":["root","factory","exports","module","define","amd","self","this","installedModules","__webpack_require__","moduleId","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","abstractMatrix","util","Matrix","Array","constructor","nRows","nColumns","arguments","length","isMatrix","clone","Number","isInteger","super","TypeError","isArray","matrix","RangeError","concat","rows","columns","set","rowIndex","columnIndex","newMatrix","species","row","column","removeRow","index","checkRowIndex","splice","addRow","array","undefined","checkRowVector","removeColumn","checkColumnIndex","addColumn","checkColumnVector","static","Decompositions","DC","outer","max","vector","to1DArray","checkIndices","rowIndices","columnIndices","rowOut","some","columnOut","from","checkRange","startRow","endRow","startColumn","endColumn","notAllNumbers","slice","arg","getRange","to","arr","sumByRow","sum","zeros","j","sumByColumn","sumAll","v","hypotenuse","a","b","Math","abs","sqrt","getEmpty2DArray","getFilled2DArray","compareNumbers","values","Infinity","min","minMax","arithmeticMean","mean","geometricMean","mul","pow","logMean","lnsum","log","grandMean","means","samples","truncatedMean","percent","alreadySorted","sort","k","floor","harmonicMean","contraHarmonicMean","r1","r2","median","half","variance","unbiased","theMean","theVariance","x","standardDeviation","standardError","quartiles","quart","q1","ceil","q2","q3","pooledStandardDeviation","pooledVariance","vari","itemCount","itemArray","count","indexOf","maxValue","maxIndex","covariance","vector1","vector2","mean1","mean2","cov","skewness","s2","s3","dev","m2","g","kurtosis","s4","entropy","eps","weightedMean","weights","weightedStandardDeviation","weightedVariance","z","w","center","inPlace","result","standardize","standardDev","cumulativeSum","LM","math","algebra","sumOfLorentzians","factor","p2","nL","cols","singleLorentzian","singleGaussian","factor2","exp","optimizeSingleLorentzian","xy","peak","opts","xy2","parseData","percentage","y_data","maxY","weight","dot","dt","LMOptions","dx","p_init","width","p_min","p_max","p_fit","optimize","optimizeSingleGaussian","threshold","y","nbSeries","nbPoints","transpose","optimizeLorentzianSum","group","optimizeGaussianSum","optimizeGaussianTrain","nextX","tI","yI","current","currentIndex","push","optimizeLorentzianTrain","LuDecomposition","SvDecomposition","arrayUtils","MatrixTransposeView","MatrixRowView","MatrixSubView","MatrixSelectionView","MatrixColumnView","MatrixFlipRowView","MatrixFlipColumnView","superCtor","newRows","newColumns","newData","empty","fill","rng","random","data","matrix1","matrix2","checkMatrix","klass","apply","callback","ii","jj","size","to2DArray","copy","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","Error","repeat","rowRep","colRep","setSubMatrix","neg","mulS","getRow","getRowVector","rowVector","setRow","swapRows","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","idx","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","by","prod","mmul","other","console","warn","Bcolj","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","c1","c2","embed","mat","resultat","blockMult","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","scaled","scale","scaleColumns","kroneckerProduct","q","sortRows","compareFunction","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","trace","transposeView","rowView","columnView","flipRowView","flipColumnView","subMatrixView","selectionView","det","subMatrix0","subMatrix1","subMatrix2","determinant","pseudoInverse","EPSILON","svdSolution","autoTranspose","U","leftSingularVectors","V","rightSingularVectors","diagonal","checkDimensions","otherMatrix","rand","identity","eye","negate","tensorProduct","inplaceOperator","inplaceOperatorScalar","inplaceOperatorMatrix","staticOperator","inplaceMethod","staticMethod","inplaceMethodWithArgs","staticMethodWithArgs","inplaceMethodWithOneArgScalar","inplaceMethodWithOneArgMatrix","inplaceMethodWithOneArg","staticMethodWithOneArg","operators","operator","inplaceOp","eval","fillTemplateFunction","op","inplaceOpS","inplaceOpM","staticOp","methods","method","forEach","mathMethod","inplaceMeth","staticMeth","methodsWithArgs","methodWithArg","args","inplaceMethWithArgs","staticMethWithArgs","tmplVar","inplaceMethod2","inplaceMethodS","inplaceMethodM","staticMethod2","template","replace","RegExp","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","X","solve","SingularValueDecomposition","options","nu","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","swapped","aux","ks","f","cs","sn","kase","sp","spm1","epm1","sk","ek","shift","e","work","nct","nrt","pp","tmp","tol","Y","scols","Ls","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","robustMeanAndStdev","averageDeviations","stdev","A","B","subtract","multiply","dotMultiply","dotDivide","div","inv","dotPow","ones","gsd","post","optimizePeaks","joinBroadPeaks","broadenPeaks","SG","defaultOptions","sgOptions","windowSize","polynomial","minMaxRatio","broadRatio","maxCriteria","smoothY","realTopDetection","heightFactor","boundaries","derivativeThreshold","yIn","assign","maxDx","minDx","MAX_VALUE","noiseLevel","stddev","getNoiseLevel","yCorrection","dY","ddY","derivative","maxDdy","lastMax","lastMin","minddY","intervalL","intervalR","broadMask","minddYLen","intervalLLen","intervalRLen","broadMaskLen","possible","frequency","distanceJ","minDistance","gettingCloser","signals","signalsLen","lastK","soft","left","right","yLeft","yRight","height","peakList","alpha","beta","gamma","currentPoint","log10","base","extend","getHs","h","hs","GramPoly","GenFact","gf","Weight","np","ans","fullWeights","constantH","toString","wg1","wg2","d1","d2","wg","hasOwn","toStr","gOPD","getOwnPropertyDescriptor","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","setProperty","target","configurable","newValue","writable","getProperty","src","copyIsArray","deep","arrayStat","dimension","N","sum1","sum2","scatter","divisor","zScores","standardDeviations","resultRow","sourceRow","isNaN","weightSum","weightedScatter","l1","l2","medians","modes","skew","kurt","standardErrors","sqrtN","correlation","scores","cor","weightedCovariance","s1","sampleFunction","lastIndex","sampleX","sampleY","direction","sign","delta","mid","stop","fnType","sampling","error","groups","upperLimit","lowerLimit","limits","groupPeaks","peaks","optPeaks","optPeak","func","y_dat","dp","iteration","Npar","Npnt","p_old","y_old","X2","X2_old","J","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","Nfit","weight_sq","lm_matx","JtWJ","JtWdy","y_hat","Chi_sq","lambda","hidx","p_try","delta_y","X2_try","JtWdy_th","rho","dX2","length_t","length_y_dat","lm_FD_J","ps","del","y1","lm_Broyden_J","h_t","Jt","for","getEquallySpacedData","SNV","Stat","resultMatrix","coordArrayToPoints","dimensions","pointsArr","point","coordArrayToCoordMatrix","coordinatesArray","points","coordMatrixToCoordArray","coordMatrix","coodinatesArray","coordMatrixToPoints","pointsToCoordArray","pointsToCoordMatrix","applyDotProduct","firstVector","secondVector","largestVector","smallestVector","difference","dotProductApplied","input","theSum","product","theProduct","integral","x0","x1","slope","intercept","reverse","isFinite","numberOfPoints","output","variant","xLength","step","halfStep","lastStep","start","previousX","previousY","nextY","frontOutsideSpectra","backOutsideSpectra","currentValue","currentPoints","main","getEquallySpacedSlot","initialOriginalStep","lastOriginalStep","MIN_VALUE","sumAtMin","sumAtMax","getSlope","y0","getEquallySpacedSmooth","std","BaseView","EigenvalueDecomposition","QrDecomposition","CholeskyDecomposition","leftHandSide","rightHandSide","SVD","EVD","QR","CHO","assumeSymmetric","hh","tred2","dl1","c3","el1","tst1","tql2","H","ort","high","low","orthes","nn","ra","sa","vr","vi","notlast","cdivres","exshift","norm","iter","cdiv","hqr2","xr","xi","yr","yi","qr","rdiag","nrm","Rdiag","isFullRank","positiveDefinite","Lrowj","Lrowk","L","Opt","broadLines","maxI","candidates","indexes","fitted","overlap","nextPeak"],"mappings":"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","file":"ml-gsd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GSD\"] = factory();\n\telse\n\t\troot[\"GSD\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 13);\n","'use strict';\n\nrequire('./symbol-species');\nvar abstractMatrix = require('./abstractMatrix');\nvar util = require('./util');\n\nclass Matrix extends abstractMatrix(Array) {\n    constructor(nRows, nColumns) {\n        var i;\n        if (arguments.length === 1 && typeof nRows === 'number') {\n            return new Array(nRows);\n        }\n        if (Matrix.isMatrix(nRows)) {\n            return nRows.clone();\n        } else if (Number.isInteger(nRows) && nRows > 0) { // Create an empty matrix\n            super(nRows);\n            if (Number.isInteger(nColumns) && nColumns > 0) {\n                for (i = 0; i < nRows; i++) {\n                    this[i] = new Array(nColumns);\n                }\n            } else {\n                throw new TypeError('nColumns must be a positive integer');\n            }\n        } else if (Array.isArray(nRows)) { // Copy the values from the 2D array\n            const matrix = nRows;\n            nRows = matrix.length;\n            nColumns = matrix[0].length;\n            if (typeof nColumns !== 'number' || nColumns === 0) {\n                throw new TypeError('Data must be a 2D array with at least one element');\n            }\n            super(nRows);\n            for (i = 0; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                }\n                this[i] = [].concat(matrix[i]);\n            }\n        } else {\n            throw new TypeError('First argument must be a positive number or an array');\n        }\n        this.rows = nRows;\n        this.columns = nColumns;\n        return this;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this[rowIndex][columnIndex] = value;\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this[rowIndex][columnIndex];\n    }\n\n    /**\n     * Creates an exact and independent copy of the matrix\n     * @return {Matrix}\n     */\n    clone() {\n        var newMatrix = new this.constructor[Symbol.species](this.rows, this.columns);\n        for (var row = 0; row < this.rows; row++) {\n            for (var column = 0; column < this.columns; column++) {\n                newMatrix.set(row, column, this.get(row, column));\n            }\n        }\n        return newMatrix;\n    }\n\n    /**\n     * Removes a row from the given index\n     * @param {number} index - Row index\n     * @return {Matrix} this\n     */\n    removeRow(index) {\n        util.checkRowIndex(this, index);\n        if (this.rows === 1) {\n            throw new RangeError('A matrix cannot have less than one row');\n        }\n        this.splice(index, 1);\n        this.rows -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a row at the given index\n     * @param {number} [index = this.rows] - Row index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addRow(index, array) {\n        if (array === undefined) {\n            array = index;\n            index = this.rows;\n        }\n        util.checkRowIndex(this, index, true);\n        array = util.checkRowVector(this, array, true);\n        this.splice(index, 0, array);\n        this.rows += 1;\n        return this;\n    }\n\n    /**\n     * Removes a column from the given index\n     * @param {number} index - Column index\n     * @return {Matrix} this\n     */\n    removeColumn(index) {\n        util.checkColumnIndex(this, index);\n        if (this.columns === 1) {\n            throw new RangeError('A matrix cannot have less than one column');\n        }\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 1);\n        }\n        this.columns -= 1;\n        return this;\n    }\n\n    /**\n     * Adds a column at the given index\n     * @param {number} [index = this.columns] - Column index\n     * @param {Array|Matrix} array - Array or vector\n     * @return {Matrix} this\n     */\n    addColumn(index, array) {\n        if (typeof array === 'undefined') {\n            array = index;\n            index = this.columns;\n        }\n        util.checkColumnIndex(this, index, true);\n        array = util.checkColumnVector(this, array);\n        for (var i = 0; i < this.rows; i++) {\n            this[i].splice(index, 0, array[i]);\n        }\n        this.columns += 1;\n        return this;\n    }\n}\n\nexports.Matrix = Matrix;\nMatrix.abstractMatrix = abstractMatrix;\n","'use strict';\n\nvar abstractMatrix = require('../abstractMatrix');\nvar Matrix = require('../matrix');\n\nclass BaseView extends abstractMatrix() {\n    constructor(matrix, rows, columns) {\n        super();\n        this.matrix = matrix;\n        this.rows = rows;\n        this.columns = columns;\n    }\n\n    static get [Symbol.species]() {\n        return Matrix.Matrix;\n    }\n}\n\nmodule.exports = BaseView;\n","'use strict';\n\nmodule.exports = require('./matrix').Matrix;\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n","'use strict';\n\nvar Matrix = require('./matrix');\n\n/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkRowIndex = function checkRowIndex(matrix, index, outer) {\n    var max = outer ? matrix.rows : matrix.rows - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Row index out of range');\n    }\n};\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexports.checkColumnIndex = function checkColumnIndex(matrix, index, outer) {\n    var max = outer ? matrix.columns : matrix.columns - 1;\n    if (index < 0 || index > max) {\n        throw new RangeError('Column index out of range');\n    }\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkRowVector = function checkRowVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.columns) {\n        throw new RangeError('vector size must be the same as the number of columns');\n    }\n    return vector;\n};\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexports.checkColumnVector = function checkColumnVector(matrix, vector) {\n    if (vector.to1DArray) {\n        vector = vector.to1DArray();\n    }\n    if (vector.length !== matrix.rows) {\n        throw new RangeError('vector size must be the same as the number of rows');\n    }\n    return vector;\n};\n\nexports.checkIndices = function checkIndices(matrix, rowIndices, columnIndices) {\n    var rowOut = rowIndices.some(r => {\n        return r < 0 || r >= matrix.rows;\n\n    });\n\n    var columnOut = columnIndices.some(c => {\n        return c < 0 || c >= matrix.columns;\n    });\n\n    if (rowOut || columnOut) {\n        throw new RangeError('Indices are out of range');\n    }\n\n    if (typeof rowIndices !== 'object' || typeof columnIndices !== 'object') {\n        throw new TypeError('Unexpected type for row/column indices');\n    }\n    if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n    if (!Array.isArray(columnIndices)) rowIndices = Array.from(columnIndices);\n\n    return {\n        row: rowIndices,\n        column: columnIndices\n    };\n};\n\nexports.checkRange = function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n    if (arguments.length !== 5) throw new TypeError('Invalid argument type');\n    var notAllNumbers = Array.from(arguments).slice(1).some(function (arg) {\n        return typeof arg !== 'number';\n    });\n    if (notAllNumbers) throw new TypeError('Invalid argument type');\n    if (startRow > endRow || startColumn > endColumn || startRow < 0 || startRow >= matrix.rows || endRow < 0 || endRow >= matrix.rows || startColumn < 0 || startColumn >= matrix.columns || endColumn < 0 || endColumn >= matrix.columns) {\n        throw new RangeError('Submatrix indices are out of range');\n    }\n};\n\nexports.getRange = function getRange(from, to) {\n    var arr = new Array(to - from + 1);\n    for (var i = 0; i < arr.length; i++) {\n        arr[i] = from + i;\n    }\n    return arr;\n};\n\nexports.sumByRow = function sumByRow(matrix) {\n    var sum = Matrix.Matrix.zeros(matrix.rows, 1);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(i, 0, sum.get(i, 0) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumByColumn = function sumByColumn(matrix) {\n    var sum = Matrix.Matrix.zeros(1, matrix.columns);\n    for (var i = 0; i < matrix.rows; ++i) {\n        for (var j = 0; j < matrix.columns; ++j) {\n            sum.set(0, j, sum.get(0, j) + matrix.get(i, j));\n        }\n    }\n    return sum;\n};\n\nexports.sumAll = function sumAll(matrix) {\n    var v = 0;\n    for (var i = 0; i < matrix.rows; i++) {\n        for (var j = 0; j < matrix.columns; j++) {\n            v += matrix.get(i, j);\n        }\n    }\n    return v;\n};\n","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n// For use in the decomposition algorithms. With big matrices, access time is\n// too long on elements from array subclass\n// todo check when it is fixed in v8\n// http://jsperf.com/access-and-write-array-subclass\nexports.getEmpty2DArray = function (rows, columns) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n    }\n    return array;\n};\n\nexports.getFilled2DArray = function (rows, columns, value) {\n    var array = new Array(rows);\n    for (var i = 0; i < rows; i++) {\n        array[i] = new Array(columns);\n        for (var j = 0; j < columns; j++) {\n            array[i][j] = value;\n        }\n    }\n    return array;\n};\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    opts = opts || {};\n    var xy2 = parseData(xy, opts.percentage||0);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts.LMOptions || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    opts = opts || {};\n    var xy2 = parseData(xy, opts.percentage||0);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.rows, i;\n\n\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts.LMOptions || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n/*\n peaks on group should sorted\n */\nfunction optimizeLorentzianTrain(xy, group, opts){\n    var xy2 = parseData(xy);\n    //console.log(xy2[0].rows);\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var currentIndex = 0;\n    var nbPoints = t.length;\n    var nextX;\n    var tI, yI, maxY;\n    var result=[], current;\n    for(var i=0; i<group.length;i++){\n        nextX = group[i].x-group[i].width*1.5;\n        //console.log(group[i]);\n        while(t[currentIndex++]<nextX&&currentIndex<nbPoints);\n        nextX = group[i].x+group[i].width*1.5;\n        tI = [];\n        yI = [];\n        while(t[currentIndex]<=nextX&&currentIndex<nbPoints){\n            tI.push(t[currentIndex][0]);\n            yI.push(y_data[currentIndex][0]*maxY);\n            currentIndex++;\n        }\n\n        current=optimizeSingleLorentzian([tI, yI], group[i], opts);\n        if(current){\n            result.push({\"x\":current[0][0],\"y\":current[1][0],\"width\":current[2][0],\"opt\":true});\n        }\n        else{\n            result.push({\"x\":group[i].x,\"y\":group[i].y,\"width\":group[i].width,\"opt\":false});\n        }\n    }\n\n    return result;\n\n}\n\nfunction optimizeGaussianTrain(xy, group, opts){\n    var xy2 = parseData(xy);\n    //console.log(xy2[0].rows);\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var currentIndex = 0;\n    var nbPoints = t.length;\n    var nextX;\n    var tI, yI, maxY;\n    var result=[], current;\n    for(var i=0; i<group.length;i++){\n        nextX = group[i].x-group[i].width*1.5;\n        //console.log(group[i]);\n        while(t[currentIndex++]<nextX&&currentIndex<nbPoints);\n        nextX = group[i].x+group[i].width*1.5;\n        tI = [];\n        yI = [];\n        while(t[currentIndex]<=nextX&&currentIndex<nbPoints){\n            tI.push(t[currentIndex][0]);\n            yI.push(y_data[currentIndex][0]*maxY);\n            currentIndex++;\n        }\n\n        current=optimizeSingleGaussian([tI, yI], group[i], opts);\n        if(current){\n            result.push({\"x\":current[0][0],\"y\":current[1][0],\"width\":current[2][0],\"opt\":true});\n        }\n        else{\n            result.push({\"x\":group[i].x,\"y\":group[i].y,\"width\":group[i].width,\"opt\":false});\n        }\n    }\n\n    return result;\n}\n\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n\n    if(xy2===null||xy2[0].rows<3){\n        return null; //Cannot run an optimization with less than 3 points\n    }\n\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy, threshold){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        //if(nbPoints<3)\n        //    throw new Exception(nbPoints);\n        //else{\n        t = new Array(nbPoints);//new Matrix(nbPoints,1);\n        y_data = new Array(nbPoints);//new Matrix(nbPoints,1);\n        x = xy[0];\n        y = xy[1];\n        if(typeof x[0] === \"number\"){\n            for(i=0;i<nbPoints;i++){\n                t[i]=x[i];\n                y_data[i]=y[i];\n                if(y[i]>maxY)\n                    maxY = y[i];\n            }\n        }\n        else{\n            //It is a colum matrix\n            if(typeof x[0] === \"object\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i]=x[i][0];\n                    y_data[i]=y[i][0];\n                    if(y[i][0]>maxY)\n                        maxY = y[i][0];\n                }\n            }\n\n        }\n\n        //}\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        //if(nbPoints<3)\n        //    throw new SizeException(nbPoints);\n        //else {\n        t = new Array(nbPoints);//new Matrix(nbPoints, 1);\n        y_data = new Array(nbPoints);//new Matrix(nbPoints, 1);\n        for (i = 0; i < nbPoints; i++) {\n            t[i] = xy[i][0];\n            y_data[i] = xy[i][1];\n            if(y_data[i]>maxY)\n                maxY = y_data[i];\n        }\n        //}\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i]/=maxY;\n    }\n    if(threshold){\n        for (i = nbPoints-1; i >=0; i--) {\n            if(y_data[i]<threshold) {\n                y_data.splice(i,1);\n                t.splice(i,1);\n            }\n        }\n    }\n    if(t.length>0)\n        return [(new Matrix([t])).transpose(),(new Matrix([y_data])).transpose(),maxY];\n    return null;\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\nmodule.exports.optimizeGaussianTrain = optimizeGaussianTrain;\nmodule.exports.optimizeLorentzianTrain = optimizeLorentzianTrain;","'use strict';\n\nmodule.exports = abstractMatrix;\n\nvar LuDecomposition = require('./dc/lu');\nvar SvDecomposition = require('./dc/svd');\nvar arrayUtils = require('ml-array-utils');\nvar util = require('./util');\nvar MatrixTransposeView = require('./views/transpose');\nvar MatrixRowView = require('./views/row');\nvar MatrixSubView = require('./views/sub');\nvar MatrixSelectionView = require('./views/selection');\nvar MatrixColumnView = require('./views/column');\nvar MatrixFlipRowView = require('./views/flipRow');\nvar MatrixFlipColumnView = require('./views/flipColumn');\n\nfunction abstractMatrix(superCtor) {\n    if (superCtor === undefined) superCtor = Object;\n\n    /**\n     * Real matrix\n     * @class Matrix\n     * @param {number|Array|Matrix} nRows - Number of rows of the new matrix,\n     * 2D array containing the data or Matrix instance to clone\n     * @param {number} [nColumns] - Number of columns of the new matrix\n     */\n    class Matrix extends superCtor {\n        static get [Symbol.species]() {\n            return this;\n        }\n\n        /**\n         * Constructs a Matrix with the chosen dimensions from a 1D array\n         * @param {number} newRows - Number of rows\n         * @param {number} newColumns - Number of columns\n         * @param {Array} newData - A 1D array containing data for the matrix\n         * @return {Matrix} - The new matrix\n         */\n        static from1DArray(newRows, newColumns, newData) {\n            var length = newRows * newColumns;\n            if (length !== newData.length) {\n                throw new RangeError('Data length does not match given dimensions');\n            }\n            var newMatrix = new this(newRows, newColumns);\n            for (var row = 0; row < newRows; row++) {\n                for (var column = 0; column < newColumns; column++) {\n                    newMatrix.set(row, column, newData[row * newColumns + column]);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Creates a row vector, a matrix with only one row.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static rowVector(newData) {\n            var vector = new this(1, newData.length);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(0, i, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates a column vector, a matrix with only one column.\n         * @param {Array} newData - A 1D array containing data for the vector\n         * @return {Matrix} - The new matrix\n         */\n        static columnVector(newData) {\n            var vector = new this(newData.length, 1);\n            for (var i = 0; i < newData.length; i++) {\n                vector.set(i, 0, newData[i]);\n            }\n            return vector;\n        }\n\n        /**\n         * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static empty(rows, columns) {\n            return new this(rows, columns);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to zero.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static zeros(rows, columns) {\n            return this.empty(rows, columns).fill(0);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be set to one.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @return {Matrix} - The new matrix\n         */\n        static ones(rows, columns) {\n            return this.empty(rows, columns).fill(1);\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be randomly set.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static rand(rows, columns, rng) {\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    matrix.set(i, j, rng());\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a matrix with the given dimensions. Values will be random integers.\n         * @param {number} rows - Number of rows\n         * @param {number} columns - Number of columns\n         * @param {number} [maxValue=1000] - Maximum value\n         * @param {function} [rng=Math.random] - Random number generator\n         * @return {Matrix} The new matrix\n         */\n        static randInt(rows, columns, maxValue, rng) {\n            if (maxValue === undefined) maxValue = 1000;\n            if (rng === undefined) rng = Math.random;\n            var matrix = this.empty(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    var value = Math.floor(rng() * maxValue);\n                    matrix.set(i, j, value);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and others will be 0.\n         * @param {number} rows - Number of rows\n         * @param {number} [columns=rows] - Number of columns\n         * @param {number} [value=1] - Value to fill the diagonal with\n         * @return {Matrix} - The new identity matrix\n         */\n        static eye(rows, columns, value) {\n            if (columns === undefined) columns = rows;\n            if (value === undefined) value = 1;\n            var min = Math.min(rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, value);\n            }\n            return matrix;\n        }\n\n        /**\n         * Creates a diagonal matrix based on the given array.\n         * @param {Array} data - Array containing the data for the diagonal\n         * @param {number} [rows] - Number of rows (Default: data.length)\n         * @param {number} [columns] - Number of columns (Default: rows)\n         * @return {Matrix} - The new diagonal matrix\n         */\n        static diag(data, rows, columns) {\n            var l = data.length;\n            if (rows === undefined) rows = l;\n            if (columns === undefined) columns = rows;\n            var min = Math.min(l, rows, columns);\n            var matrix = this.zeros(rows, columns);\n            for (var i = 0; i < min; i++) {\n                matrix.set(i, i, data[i]);\n            }\n            return matrix;\n        }\n\n        /**\n         * Returns a matrix whose elements are the minimum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static min(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Returns a matrix whose elements are the maximum between matrix1 and matrix2\n         * @param {Matrix} matrix1\n         * @param {Matrix} matrix2\n         * @return {Matrix}\n         */\n        static max(matrix1, matrix2) {\n            matrix1 = this.checkMatrix(matrix1);\n            matrix2 = this.checkMatrix(matrix2);\n            var rows = matrix1.rows;\n            var columns = matrix1.columns;\n            var result = new this(rows, columns);\n            for (var i = 0; i < rows; i++) {\n                for (var j = 0; j < columns; j++) {\n                    result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Check that the provided value is a Matrix and tries to instantiate one if not\n         * @param {*} value - The value to check\n         * @return {Matrix}\n         */\n        static checkMatrix(value) {\n            return Matrix.isMatrix(value) ? value : new this(value);\n        }\n\n        /**\n         * Returns true if the argument is a Matrix, false otherwise\n         * @param {*} value - The value to check\n         * @return {boolean}\n         */\n        static isMatrix(value) {\n            return (value != null) && (value.klass === 'Matrix');\n        }\n\n        /**\n         * @prop {number} size - The number of elements in the matrix.\n         */\n        get size() {\n            return this.rows * this.columns;\n        }\n\n        /**\n         * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n         * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n         * @return {Matrix} this\n         */\n        apply(callback) {\n            if (typeof callback !== 'function') {\n                throw new TypeError('callback must be a function');\n            }\n            var ii = this.rows;\n            var jj = this.columns;\n            for (var i = 0; i < ii; i++) {\n                for (var j = 0; j < jj; j++) {\n                    callback.call(this, i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new 1D array filled row by row with the matrix values\n         * @return {Array}\n         */\n        to1DArray() {\n            var array = new Array(this.size);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    array[i * this.columns + j] = this.get(i, j);\n                }\n            }\n            return array;\n        }\n\n        /**\n         * Returns a 2D array containing a copy of the data\n         * @return {Array}\n         */\n        to2DArray() {\n            var copy = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                copy[i] = new Array(this.columns);\n                for (var j = 0; j < this.columns; j++) {\n                    copy[i][j] = this.get(i, j);\n                }\n            }\n            return copy;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row\n         */\n        isRowVector() {\n            return this.rows === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one column\n         */\n        isColumnVector() {\n            return this.columns === 1;\n        }\n\n        /**\n         * @return {boolean} true if the matrix has one row or one column\n         */\n        isVector() {\n            return (this.rows === 1) || (this.columns === 1);\n        }\n\n        /**\n         * @return {boolean} true if the matrix has the same number of rows and columns\n         */\n        isSquare() {\n            return this.rows === this.columns;\n        }\n\n        /**\n         * @return {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n         */\n        isSymmetric() {\n            if (this.isSquare()) {\n                for (var i = 0; i < this.rows; i++) {\n                    for (var j = 0; j <= i; j++) {\n                        if (this.get(i, j) !== this.get(j, i)) {\n                            return false;\n                        }\n                    }\n                }\n                return true;\n            }\n            return false;\n        }\n\n        /**\n         * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @param {number} value - The new value for the element\n         * @return {Matrix} this\n         */\n        set(rowIndex, columnIndex, value) { // eslint-disable-line no-unused-vars\n            throw new Error('set method is unimplemented');\n        }\n\n        /**\n         * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n         * @abstract\n         * @param {number} rowIndex - Index of the row\n         * @param {number} columnIndex - Index of the column\n         * @return {number}\n         */\n        get(rowIndex, columnIndex) { // eslint-disable-line no-unused-vars\n            throw new Error('get method is unimplemented');\n        }\n\n        /**\n         * Creates a new matrix that is a repetition of the current matrix. New matrix has rowRep times the number of\n         * rows of the matrix, and colRep times the number of columns of the matrix\n         * @param {number} rowRep - Number of times the rows should be repeated\n         * @param {number} colRep - Number of times the columns should be re\n         * @return {Matrix}\n         * @example\n         * var matrix = new Matrix([[1,2]]);\n         * matrix.repeat(2); // [[1,2],[1,2]]\n         */\n        repeat(rowRep, colRep) {\n            rowRep = rowRep || 1;\n            colRep = colRep || 1;\n            var matrix = new this.constructor[Symbol.species](this.rows * rowRep, this.columns * colRep);\n            for (var i = 0; i < rowRep; i++) {\n                for (var j = 0; j < colRep; j++) {\n                    matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n                }\n            }\n            return matrix;\n        }\n\n        /**\n         * Fills the matrix with a given value. All elements will be set to this value.\n         * @param {number} value - New value\n         * @return {Matrix} this\n         */\n        fill(value) {\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, value);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Negates the matrix. All elements will be multiplied by (-1)\n         * @return {Matrix} this\n         */\n        neg() {\n            return this.mulS(-1);\n        }\n\n        /**\n         * Returns a new array from the given row index\n         * @param {number} index - Row index\n         * @return {Array}\n         */\n        getRow(index) {\n            util.checkRowIndex(this, index);\n            var row = new Array(this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                row[i] = this.get(index, i);\n            }\n            return row;\n        }\n\n        /**\n         * Returns a new row vector from the given row index\n         * @param {number} index - Row index\n         * @return {Matrix}\n         */\n        getRowVector(index) {\n            return this.constructor.rowVector(this.getRow(index));\n        }\n\n        /**\n         * Sets a row at the given index\n         * @param {number} index - Row index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setRow(index, array) {\n            util.checkRowIndex(this, index);\n            array = util.checkRowVector(this, array);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two rows\n         * @param {number} row1 - First row index\n         * @param {number} row2 - Second row index\n         * @return {Matrix} this\n         */\n        swapRows(row1, row2) {\n            util.checkRowIndex(this, row1);\n            util.checkRowIndex(this, row2);\n            for (var i = 0; i < this.columns; i++) {\n                var temp = this.get(row1, i);\n                this.set(row1, i, this.get(row2, i));\n                this.set(row2, i, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Returns a new array from the given column index\n         * @param {number} index - Column index\n         * @return {Array}\n         */\n        getColumn(index) {\n            util.checkColumnIndex(this, index);\n            var column = new Array(this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                column[i] = this.get(i, index);\n            }\n            return column;\n        }\n\n        /**\n         * Returns a new column vector from the given column index\n         * @param {number} index - Column index\n         * @return {Matrix}\n         */\n        getColumnVector(index) {\n            return this.constructor.columnVector(this.getColumn(index));\n        }\n\n        /**\n         * Sets a column at the given index\n         * @param {number} index - Column index\n         * @param {Array|Matrix} array - Array or vector\n         * @return {Matrix} this\n         */\n        setColumn(index, array) {\n            util.checkColumnIndex(this, index);\n            array = util.checkColumnVector(this, array);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, array[i]);\n            }\n            return this;\n        }\n\n        /**\n         * Swaps two columns\n         * @param {number} column1 - First column index\n         * @param {number} column2 - Second column index\n         * @return {Matrix} this\n         */\n        swapColumns(column1, column2) {\n            util.checkColumnIndex(this, column1);\n            util.checkColumnIndex(this, column2);\n            for (var i = 0; i < this.rows; i++) {\n                var temp = this.get(i, column1);\n                this.set(i, column1, this.get(i, column2));\n                this.set(i, column2, temp);\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each row\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each row by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divRowVector(vector) {\n            vector = util.checkRowVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[j]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Adds the values of a vector to each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        addColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) + vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Subtracts the values of a vector from each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        subColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) - vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a vector with each column\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        mulColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) * vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Divides the values of each column by those of a vector\n         * @param {Array|Matrix} vector - Array or vector\n         * @return {Matrix} this\n         */\n        divColumnVector(vector) {\n            vector = util.checkColumnVector(this, vector);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    this.set(i, j, this.get(i, j) / vector[i]);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a row with a scalar\n         * @param {number} index - Row index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulRow(index, value) {\n            util.checkRowIndex(this, index);\n            for (var i = 0; i < this.columns; i++) {\n                this.set(index, i, this.get(index, i) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Multiplies the values of a column with a scalar\n         * @param {number} index - Column index\n         * @param {number} value\n         * @return {Matrix} this\n         */\n        mulColumn(index, value) {\n            util.checkColumnIndex(this, index);\n            for (var i = 0; i < this.rows; i++) {\n                this.set(i, index, this.get(i, index) * value);\n            }\n            return this;\n        }\n\n        /**\n         * Returns the maximum value of the matrix\n         * @return {number}\n         */\n        max() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value\n         * @return {Array}\n         */\n        maxIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) > v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of the matrix\n         * @return {number}\n         */\n        min() {\n            var v = this.get(0, 0);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                    }\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value\n         * @return {Array}\n         */\n        minIndex() {\n            var v = this.get(0, 0);\n            var idx = [0, 0];\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    if (this.get(i, j) < v) {\n                        v = this.get(i, j);\n                        idx[0] = i;\n                        idx[1] = j;\n                    }\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        maxRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        maxRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) > v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one row\n         * @param {number} row - Row index\n         * @return {number}\n         */\n        minRow(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one row\n         * @param {number} row - Row index\n         * @return {Array}\n         */\n        minRowIndex(row) {\n            util.checkRowIndex(this, row);\n            var v = this.get(row, 0);\n            var idx = [row, 0];\n            for (var i = 1; i < this.columns; i++) {\n                if (this.get(row, i) < v) {\n                    v = this.get(row, i);\n                    idx[1] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the maximum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        maxColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the maximum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        maxColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) > v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns the minimum value of one column\n         * @param {number} column - Column index\n         * @return {number}\n         */\n        minColumn(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                }\n            }\n            return v;\n        }\n\n        /**\n         * Returns the index of the minimum value of one column\n         * @param {number} column - Column index\n         * @return {Array}\n         */\n        minColumnIndex(column) {\n            util.checkColumnIndex(this, column);\n            var v = this.get(0, column);\n            var idx = [0, column];\n            for (var i = 1; i < this.rows; i++) {\n                if (this.get(i, column) < v) {\n                    v = this.get(i, column);\n                    idx[0] = i;\n                }\n            }\n            return idx;\n        }\n\n        /**\n         * Returns an array containing the diagonal values of the matrix\n         * @return {Array}\n         */\n        diag() {\n            var min = Math.min(this.rows, this.columns);\n            var diag = new Array(min);\n            for (var i = 0; i < min; i++) {\n                diag[i] = this.get(i, i);\n            }\n            return diag;\n        }\n\n        /**\n         * Returns the sum by the argument given, if no argument given,\n         * it returns the sum of all elements of the matrix.\n         * @param {string} by - sum by 'row' or 'column'.\n         * @return {Matrix|number}\n         */\n        sum(by) {\n            switch (by) {\n                case 'row':\n                    return util.sumByRow(this);\n                case 'column':\n                    return util.sumByColumn(this);\n                default:\n                    return util.sumAll(this);\n            }\n        }\n\n        /**\n         * Returns the mean of all elements of the matrix\n         * @return {number}\n         */\n        mean() {\n            return this.sum() / this.size;\n        }\n\n        /**\n         * Returns the product of all elements of the matrix\n         * @return {number}\n         */\n        prod() {\n            var prod = 1;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    prod *= this.get(i, j);\n                }\n            }\n            return prod;\n        }\n\n        /**\n         * Computes the cumulative sum of the matrix elements (in place, row by row)\n         * @return {Matrix} this\n         */\n        cumulativeSum() {\n            var sum = 0;\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    sum += this.get(i, j);\n                    this.set(i, j, sum);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Computes the dot (scalar) product between the matrix and another\n         * @param {Matrix} vector2 vector\n         * @return {number}\n         */\n        dot(vector2) {\n            if (Matrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n            var vector1 = this.to1DArray();\n            if (vector1.length !== vector2.length) {\n                throw new RangeError('vectors do not have the same size');\n            }\n            var dot = 0;\n            for (var i = 0; i < vector1.length; i++) {\n                dot += vector1[i] * vector2[i];\n            }\n            return dot;\n        }\n\n        /**\n         * Returns the matrix product between this and other\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        mmul(other) {\n            other = this.constructor.checkMatrix(other);\n            if (this.columns !== other.rows) {\n                // eslint-disable-next-line no-console\n                console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n            }\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.columns;\n\n            var result = new this.constructor[Symbol.species](m, p);\n\n            var Bcolj = new Array(n);\n            for (var j = 0; j < p; j++) {\n                for (var k = 0; k < n; k++) {\n                    Bcolj[k] = other.get(k, j);\n                }\n\n                for (var i = 0; i < m; i++) {\n                    var s = 0;\n                    for (k = 0; k < n; k++) {\n                        s += this.get(i, k) * Bcolj[k];\n                    }\n\n                    result.set(i, j, s);\n                }\n            }\n            return result;\n        }\n\n        strassen2x2(other) {\n            var result = new this.constructor[Symbol.species](2, 2);\n            const a11 = this.get(0, 0);\n            const b11 = other.get(0, 0);\n            const a12 = this.get(0, 1);\n            const b12 = other.get(0, 1);\n            const a21 = this.get(1, 0);\n            const b21 = other.get(1, 0);\n            const a22 = this.get(1, 1);\n            const b22 = other.get(1, 1);\n\n            // Compute intermediate values.\n            const m1 = (a11 + a22) * (b11 + b22);\n            const m2 = (a21 + a22) * b11;\n            const m3 = a11 * (b12 - b22);\n            const m4 = a22 * (b21 - b11);\n            const m5 = (a11 + a12) * b22;\n            const m6 = (a21 - a11) * (b11 + b12);\n            const m7 = (a12 - a22) * (b21 + b22);\n\n            // Combine intermediate values into the output.\n            const c00 = m1 + m4 - m5 + m7;\n            const c01 = m3 + m5;\n            const c10 = m2 + m4;\n            const c11 = m1 - m2 + m3 + m6;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            return result;\n        }\n\n        strassen3x3(other) {\n            var result = new this.constructor[Symbol.species](3, 3);\n\n            const a00 = this.get(0, 0);\n            const a01 = this.get(0, 1);\n            const a02 = this.get(0, 2);\n            const a10 = this.get(1, 0);\n            const a11 = this.get(1, 1);\n            const a12 = this.get(1, 2);\n            const a20 = this.get(2, 0);\n            const a21 = this.get(2, 1);\n            const a22 = this.get(2, 2);\n\n            const b00 = other.get(0, 0);\n            const b01 = other.get(0, 1);\n            const b02 = other.get(0, 2);\n            const b10 = other.get(1, 0);\n            const b11 = other.get(1, 1);\n            const b12 = other.get(1, 2);\n            const b20 = other.get(2, 0);\n            const b21 = other.get(2, 1);\n            const b22 = other.get(2, 2);\n\n            const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n            const m2 = (a00 - a10) * (-b01 + b11);\n            const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n            const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n            const m5 = (a10 + a11) * (-b00 + b01);\n            const m6 = a00 * b00;\n            const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n            const m8 = (-a00 + a20) * (b02 - b12);\n            const m9 = (a20 + a21) * (-b00 + b02);\n            const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n            const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n            const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n            const m13 = (a02 - a22) * (b11 - b21);\n            const m14 = a02 * b20;\n            const m15 = (a21 + a22) * (-b20 + b21);\n            const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n            const m17 = (a02 - a12) * (b12 - b22);\n            const m18 = (a11 + a12) * (-b20 + b22);\n            const m19 = a01 * b10;\n            const m20 = a12 * b21;\n            const m21 = a10 * b02;\n            const m22 = a20 * b01;\n            const m23 = a22 * b22;\n\n            const c00 = m6 + m14 + m19;\n            const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n            const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n            const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n            const c11 = m2 + m4 + m5 + m6 + m20;\n            const c12 = m14 + m16 + m17 + m18 + m21;\n            const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n            const c21 = m12 + m13 + m14 + m15 + m22;\n            const c22 = m6 + m7 + m8 + m9 + m23;\n\n            result.set(0, 0, c00);\n            result.set(0, 1, c01);\n            result.set(0, 2, c02);\n            result.set(1, 0, c10);\n            result.set(1, 1, c11);\n            result.set(1, 2, c12);\n            result.set(2, 0, c20);\n            result.set(2, 1, c21);\n            result.set(2, 2, c22);\n            return result;\n        }\n\n        /**\n         * Returns the matrix product between x and y. More efficient than mmul(other) only when we multiply squared matrix and when the size of the matrix is > 1000.\n         * @param {Matrix} y\n         * @return {Matrix}\n         */\n        mmulStrassen(y) {\n            var x = this.clone();\n            var r1 = x.rows;\n            var c1 = x.columns;\n            var r2 = y.rows;\n            var c2 = y.columns;\n            if (c1 !== r2) {\n                // eslint-disable-next-line no-console\n                console.warn(`Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`);\n            }\n\n            // Put a matrix into the top left of a matrix of zeros.\n            // `rows` and `cols` are the dimensions of the output matrix.\n            function embed(mat, rows, cols) {\n                var r = mat.rows;\n                var c = mat.columns;\n                if ((r === rows) && (c === cols)) {\n                    return mat;\n                } else {\n                    var resultat = Matrix.zeros(rows, cols);\n                    resultat = resultat.setSubMatrix(mat, 0, 0);\n                    return resultat;\n                }\n            }\n\n\n            // Make sure both matrices are the same size.\n            // This is exclusively for simplicity:\n            // this algorithm can be implemented with matrices of different sizes.\n\n            var r = Math.max(r1, r2);\n            var c = Math.max(c1, c2);\n            x = embed(x, r, c);\n            y = embed(y, r, c);\n\n            // Our recursive multiplication function.\n            function blockMult(a, b, rows, cols) {\n                // For small matrices, resort to naive multiplication.\n                if (rows <= 512 || cols <= 512) {\n                    return a.mmul(b); // a is equivalent to this\n                }\n\n                // Apply dynamic padding.\n                if ((rows % 2 === 1) && (cols % 2 === 1)) {\n                    a = embed(a, rows + 1, cols + 1);\n                    b = embed(b, rows + 1, cols + 1);\n                } else if (rows % 2 === 1) {\n                    a = embed(a, rows + 1, cols);\n                    b = embed(b, rows + 1, cols);\n                } else if (cols % 2 === 1) {\n                    a = embed(a, rows, cols + 1);\n                    b = embed(b, rows, cols + 1);\n                }\n\n                var halfRows = parseInt(a.rows / 2);\n                var halfCols = parseInt(a.columns / 2);\n                // Subdivide input matrices.\n                var a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n                var b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n                var a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n                var b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n                var a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n                var b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n                var a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n                var b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n                // Compute intermediate values.\n                var m1 = blockMult(Matrix.add(a11, a22), Matrix.add(b11, b22), halfRows, halfCols);\n                var m2 = blockMult(Matrix.add(a21, a22), b11, halfRows, halfCols);\n                var m3 = blockMult(a11, Matrix.sub(b12, b22), halfRows, halfCols);\n                var m4 = blockMult(a22, Matrix.sub(b21, b11), halfRows, halfCols);\n                var m5 = blockMult(Matrix.add(a11, a12), b22, halfRows, halfCols);\n                var m6 = blockMult(Matrix.sub(a21, a11), Matrix.add(b11, b12), halfRows, halfCols);\n                var m7 = blockMult(Matrix.sub(a12, a22), Matrix.add(b21, b22), halfRows, halfCols);\n\n                // Combine intermediate values into the output.\n                var c11 = Matrix.add(m1, m4);\n                c11.sub(m5);\n                c11.add(m7);\n                var c12 = Matrix.add(m3, m5);\n                var c21 = Matrix.add(m2, m4);\n                var c22 = Matrix.sub(m1, m2);\n                c22.add(m3);\n                c22.add(m6);\n\n                //Crop output to the desired size (undo dynamic padding).\n                var resultat = Matrix.zeros(2 * c11.rows, 2 * c11.columns);\n                resultat = resultat.setSubMatrix(c11, 0, 0);\n                resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n                resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n                resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n                return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n            }\n            return blockMult(x, y, r, c);\n        }\n\n        /**\n         * Returns a row-by-row scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The scaled matrix\n         */\n        scaleRows(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.rows; i++) {\n                var scaled = arrayUtils.scale(this.getRow(i), {min, max});\n                newMatrix.setRow(i, scaled);\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a new column-by-column scaled matrix\n         * @param {number} [min=0] - Minimum scaled value\n         * @param {number} [max=1] - Maximum scaled value\n         * @return {Matrix} - The new scaled matrix\n         * @example\n         * var matrix = new Matrix([[1,2],[-1,0]]);\n         * var scaledMatrix = matrix.scaleColumns(); // [[1,1],[0,0]]\n         */\n        scaleColumns(min, max) {\n            min = min === undefined ? 0 : min;\n            max = max === undefined ? 1 : max;\n            if (min >= max) {\n                throw new RangeError('min should be strictly smaller than max');\n            }\n            var newMatrix = this.constructor.empty(this.rows, this.columns);\n            for (var i = 0; i < this.columns; i++) {\n                var scaled = arrayUtils.scale(this.getColumn(i), {\n                    min: min,\n                    max: max\n                });\n                newMatrix.setColumn(i, scaled);\n            }\n            return newMatrix;\n        }\n\n\n        /**\n         * Returns the Kronecker product (also known as tensor product) between this and other\n         * See https://en.wikipedia.org/wiki/Kronecker_product\n         * @param {Matrix} other\n         * @return {Matrix}\n         */\n        kroneckerProduct(other) {\n            other = this.constructor.checkMatrix(other);\n\n            var m = this.rows;\n            var n = this.columns;\n            var p = other.rows;\n            var q = other.columns;\n\n            var result = new this.constructor[Symbol.species](m * p, n * q);\n            for (var i = 0; i < m; i++) {\n                for (var j = 0; j < n; j++) {\n                    for (var k = 0; k < p; k++) {\n                        for (var l = 0; l < q; l++) {\n                            result[p * i + k][q * j + l] = this.get(i, j) * other.get(k, l);\n                        }\n                    }\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Transposes the matrix and returns a new one containing the result\n         * @return {Matrix}\n         */\n        transpose() {\n            var result = new this.constructor[Symbol.species](this.columns, this.rows);\n            for (var i = 0; i < this.rows; i++) {\n                for (var j = 0; j < this.columns; j++) {\n                    result.set(j, i, this.get(i, j));\n                }\n            }\n            return result;\n        }\n\n        /**\n         * Sorts the rows (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortRows(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.rows; i++) {\n                this.setRow(i, this.getRow(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Sorts the columns (in place)\n         * @param {function} compareFunction - usual Array.prototype.sort comparison function\n         * @return {Matrix} this\n         */\n        sortColumns(compareFunction) {\n            if (compareFunction === undefined) compareFunction = compareNumbers;\n            for (var i = 0; i < this.columns; i++) {\n                this.setColumn(i, this.getColumn(i).sort(compareFunction));\n            }\n            return this;\n        }\n\n        /**\n         * Returns a subset of the matrix\n         * @param {number} startRow - First row index\n         * @param {number} endRow - Last row index\n         * @param {number} startColumn - First column index\n         * @param {number} endColumn - Last column index\n         * @return {Matrix}\n         */\n        subMatrix(startRow, endRow, startColumn, endColumn) {\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, endColumn - startColumn + 1);\n            for (var i = startRow; i <= endRow; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    newMatrix[i - startRow][j - startColumn] = this.get(i, j);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of row indices\n         * @param {Array} indices - Array containing the row indices\n         * @param {number} [startColumn = 0] - First column index\n         * @param {number} [endColumn = this.columns-1] - Last column index\n         * @return {Matrix}\n         */\n        subMatrixRow(indices, startColumn, endColumn) {\n            if (startColumn === undefined) startColumn = 0;\n            if (endColumn === undefined) endColumn = this.columns - 1;\n            if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](indices.length, endColumn - startColumn + 1);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startColumn; j <= endColumn; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.rows) {\n                        throw new RangeError('Row index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns a subset of the matrix based on an array of column indices\n         * @param {Array} indices - Array containing the column indices\n         * @param {number} [startRow = 0] - First row index\n         * @param {number} [endRow = this.rows-1] - Last row index\n         * @return {Matrix}\n         */\n        subMatrixColumn(indices, startRow, endRow) {\n            if (startRow === undefined) startRow = 0;\n            if (endRow === undefined) endRow = this.rows - 1;\n            if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows)) {\n                throw new RangeError('Argument out of range');\n            }\n\n            var newMatrix = new this.constructor[Symbol.species](endRow - startRow + 1, indices.length);\n            for (var i = 0; i < indices.length; i++) {\n                for (var j = startRow; j <= endRow; j++) {\n                    if (indices[i] < 0 || indices[i] >= this.columns) {\n                        throw new RangeError('Column index out of range: ' + indices[i]);\n                    }\n                    newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Set a part of the matrix to the given sub-matrix\n         * @param {Matrix|Array< Array >} matrix - The source matrix from which to extract values.\n         * @param {number} startRow - The index of the first row to set\n         * @param {number} startColumn - The index of the first column to set\n         * @return {Matrix}\n         */\n        setSubMatrix(matrix, startRow, startColumn) {\n            matrix = this.constructor.checkMatrix(matrix);\n            var endRow = startRow + matrix.rows - 1;\n            var endColumn = startColumn + matrix.columns - 1;\n            util.checkRange(this, startRow, endRow, startColumn, endColumn);\n            for (var i = 0; i < matrix.rows; i++) {\n                for (var j = 0; j < matrix.columns; j++) {\n                    this[startRow + i][startColumn + j] = matrix.get(i, j);\n                }\n            }\n            return this;\n        }\n\n        /**\n         * Return a new matrix based on a selection of rows and columns\n         * @param {Array<number>} rowIndices - The row indices to select. Order matters and an index can be more than once.\n         * @param {Array<number>} columnIndices - The column indices to select. Order matters and an index can be use more than once.\n         * @return {Matrix} The new matrix\n         */\n        selection(rowIndices, columnIndices) {\n            var indices = util.checkIndices(this, rowIndices, columnIndices);\n            var newMatrix = new this.constructor[Symbol.species](rowIndices.length, columnIndices.length);\n            for (var i = 0; i < indices.row.length; i++) {\n                var rowIndex = indices.row[i];\n                for (var j = 0; j < indices.column.length; j++) {\n                    var columnIndex = indices.column[j];\n                    newMatrix[i][j] = this.get(rowIndex, columnIndex);\n                }\n            }\n            return newMatrix;\n        }\n\n        /**\n         * Returns the trace of the matrix (sum of the diagonal elements)\n         * @return {number}\n         */\n        trace() {\n            var min = Math.min(this.rows, this.columns);\n            var trace = 0;\n            for (var i = 0; i < min; i++) {\n                trace += this.get(i, i);\n            }\n            return trace;\n        }\n\n        /*\n         Matrix views\n         */\n\n        /**\n         * Returns a view of the transposition of the matrix\n         * @return {MatrixTransposeView}\n         */\n        transposeView() {\n            return new MatrixTransposeView(this);\n        }\n\n        /**\n         * Returns a view of the row vector with the given index\n         * @param {number} row - row index of the vector\n         * @return {MatrixRowView}\n         */\n        rowView(row) {\n            util.checkRowIndex(this, row);\n            return new MatrixRowView(this, row);\n        }\n\n        /**\n         * Returns a view of the column vector with the given index\n         * @param {number} column - column index of the vector\n         * @return {MatrixColumnView}\n         */\n        columnView(column) {\n            util.checkColumnIndex(this, column);\n            return new MatrixColumnView(this, column);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the row axis\n         * @return {MatrixFlipRowView}\n         */\n        flipRowView() {\n            return new MatrixFlipRowView(this);\n        }\n\n        /**\n         * Returns a view of the matrix flipped in the column axis\n         * @return {MatrixFlipColumnView}\n         */\n        flipColumnView() {\n            return new MatrixFlipColumnView(this);\n        }\n\n        /**\n         * Returns a view of a submatrix giving the index boundaries\n         * @param {number} startRow - first row index of the submatrix\n         * @param {number} endRow - last row index of the submatrix\n         * @param {number} startColumn - first column index of the submatrix\n         * @param {number} endColumn - last column index of the submatrix\n         * @return {MatrixSubView}\n         */\n        subMatrixView(startRow, endRow, startColumn, endColumn) {\n            return new MatrixSubView(this, startRow, endRow, startColumn, endColumn);\n        }\n\n        /**\n         * Returns a view of the cross of the row indices and the column indices\n         * @example\n         * // resulting vector is [[2], [2]]\n         * var matrix = new Matrix([[1,2,3], [4,5,6]]).selectionView([0, 0], [1])\n         * @param {Array<number>} rowIndices\n         * @param {Array<number>} columnIndices\n         * @return {MatrixSelectionView}\n         */\n        selectionView(rowIndices, columnIndices) {\n            return new MatrixSelectionView(this, rowIndices, columnIndices);\n        }\n\n\n        /**\n        * Calculates and returns the determinant of a matrix as a Number\n        * @example\n        *   new Matrix([[1,2,3], [4,5,6]]).det()\n        * @return {number}\n        */\n        det() {\n            if (this.isSquare()) {\n                var a, b, c, d;\n                if (this.columns === 2) {\n                    // 2 x 2 matrix\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(1, 0);\n                    d = this.get(1, 1);\n\n                    return a * d - (b * c);\n                } else if (this.columns === 3) {\n                    // 3 x 3 matrix\n                    var subMatrix0, subMatrix1, subMatrix2;\n                    subMatrix0 = this.selectionView([1, 2], [1, 2]);\n                    subMatrix1 = this.selectionView([1, 2], [0, 2]);\n                    subMatrix2 = this.selectionView([1, 2], [0, 1]);\n                    a = this.get(0, 0);\n                    b = this.get(0, 1);\n                    c = this.get(0, 2);\n\n                    return a * subMatrix0.det() - b * subMatrix1.det() + c * subMatrix2.det();\n                } else {\n                    // general purpose determinant using the LU decomposition\n                    return new LuDecomposition(this).determinant;\n                }\n\n            } else {\n                throw Error('Determinant can only be calculated for a square matrix.');\n            }\n        }\n\n        /**\n         * Returns inverse of a matrix if it exists or the pseudoinverse\n         * @param {number} threshold - threshold for taking inverse of singular values (default = 1e-15)\n         * @return {Matrix} the (pseudo)inverted matrix.\n         */\n        pseudoInverse(threshold) {\n            if (threshold === undefined) threshold = Number.EPSILON;\n            var svdSolution = new SvDecomposition(this, {autoTranspose: true});\n\n            var U = svdSolution.leftSingularVectors;\n            var V = svdSolution.rightSingularVectors;\n            var s = svdSolution.diagonal;\n\n            for (var i = 0; i < s.length; i++) {\n                if (Math.abs(s[i]) > threshold) {\n                    s[i] = 1.0 / s[i];\n                } else {\n                    s[i] = 0.0;\n                }\n            }\n\n            // convert list to diagonal\n            s = this.constructor[Symbol.species].diag(s);\n            return V.mmul(s.mmul(U.transposeView()));\n        }\n    }\n\n    Matrix.prototype.klass = 'Matrix';\n\n    /**\n     * @private\n     * Check that two matrices have the same dimensions\n     * @param {Matrix} matrix\n     * @param {Matrix} otherMatrix\n     */\n    function checkDimensions(matrix, otherMatrix) { // eslint-disable-line no-unused-vars\n        if (matrix.rows !== otherMatrix.rows ||\n            matrix.columns !== otherMatrix.columns) {\n            throw new RangeError('Matrices dimensions must be equal');\n        }\n    }\n\n    function compareNumbers(a, b) {\n        return a - b;\n    }\n\n    /*\n     Synonyms\n     */\n\n    Matrix.random = Matrix.rand;\n    Matrix.diagonal = Matrix.diag;\n    Matrix.prototype.diagonal = Matrix.prototype.diag;\n    Matrix.identity = Matrix.eye;\n    Matrix.prototype.negate = Matrix.prototype.neg;\n    Matrix.prototype.tensorProduct = Matrix.prototype.kroneckerProduct;\n    Matrix.prototype.determinant = Matrix.prototype.det;\n\n    /*\n     Add dynamically instance and static methods for mathematical operations\n     */\n\n    var inplaceOperator = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var inplaceOperatorScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% value);\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceOperatorMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, this.get(i, j) %op% matrix.get(i, j));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticOperator = `\n(function %name%(matrix, value) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(value);\n})\n`;\n\n    var inplaceMethod = `\n(function %name%() {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethod = `\n(function %name%(matrix) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%();\n})\n`;\n\n    var inplaceMethodWithArgs = `\n(function %name%(%args%) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), %args%));\n        }\n    }\n    return this;\n})\n`;\n\n    var staticMethodWithArgs = `\n(function %name%(matrix, %args%) {\n    var newMatrix = new this[Symbol.species](matrix);\n    return newMatrix.%name%(%args%);\n})\n`;\n\n\n    var inplaceMethodWithOneArgScalar = `\n(function %name%S(value) {\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), value));\n        }\n    }\n    return this;\n})\n`;\n    var inplaceMethodWithOneArgMatrix = `\n(function %name%M(matrix) {\n    matrix = this.constructor.checkMatrix(matrix);\n    checkDimensions(this, matrix);\n    for (var i = 0; i < this.rows; i++) {\n        for (var j = 0; j < this.columns; j++) {\n            this.set(i, j, %method%(this.get(i, j), matrix.get(i, j)));\n        }\n    }\n    return this;\n})\n`;\n\n    var inplaceMethodWithOneArg = `\n(function %name%(value) {\n    if (typeof value === 'number') return this.%name%S(value);\n    return this.%name%M(value);\n})\n`;\n\n    var staticMethodWithOneArg = staticMethodWithArgs;\n\n    var operators = [\n        // Arithmetic operators\n        ['+', 'add'],\n        ['-', 'sub', 'subtract'],\n        ['*', 'mul', 'multiply'],\n        ['/', 'div', 'divide'],\n        ['%', 'mod', 'modulus'],\n        // Bitwise operators\n        ['&', 'and'],\n        ['|', 'or'],\n        ['^', 'xor'],\n        ['<<', 'leftShift'],\n        ['>>', 'signPropagatingRightShift'],\n        ['>>>', 'rightShift', 'zeroFillRightShift']\n    ];\n\n    var i;\n\n    for (var operator of operators) {\n        var inplaceOp = eval(fillTemplateFunction(inplaceOperator, {name: operator[1], op: operator[0]}));\n        var inplaceOpS = eval(fillTemplateFunction(inplaceOperatorScalar, {name: operator[1] + 'S', op: operator[0]}));\n        var inplaceOpM = eval(fillTemplateFunction(inplaceOperatorMatrix, {name: operator[1] + 'M', op: operator[0]}));\n        var staticOp = eval(fillTemplateFunction(staticOperator, {name: operator[1]}));\n        for (i = 1; i < operator.length; i++) {\n            Matrix.prototype[operator[i]] = inplaceOp;\n            Matrix.prototype[operator[i] + 'S'] = inplaceOpS;\n            Matrix.prototype[operator[i] + 'M'] = inplaceOpM;\n            Matrix[operator[i]] = staticOp;\n        }\n    }\n\n    var methods = [\n        ['~', 'not']\n    ];\n\n    [\n        'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'cbrt', 'ceil',\n        'clz32', 'cos', 'cosh', 'exp', 'expm1', 'floor', 'fround', 'log', 'log1p',\n        'log10', 'log2', 'round', 'sign', 'sin', 'sinh', 'sqrt', 'tan', 'tanh', 'trunc'\n    ].forEach(function (mathMethod) {\n        methods.push(['Math.' + mathMethod, mathMethod]);\n    });\n\n    for (var method of methods) {\n        var inplaceMeth = eval(fillTemplateFunction(inplaceMethod, {name: method[1], method: method[0]}));\n        var staticMeth = eval(fillTemplateFunction(staticMethod, {name: method[1]}));\n        for (i = 1; i < method.length; i++) {\n            Matrix.prototype[method[i]] = inplaceMeth;\n            Matrix[method[i]] = staticMeth;\n        }\n    }\n\n    var methodsWithArgs = [\n        ['Math.pow', 1, 'pow']\n    ];\n\n    for (var methodWithArg of methodsWithArgs) {\n        var args = 'arg0';\n        for (i = 1; i < methodWithArg[1]; i++) {\n            args += `, arg${i}`;\n        }\n        if (methodWithArg[1] !== 1) {\n            var inplaceMethWithArgs = eval(fillTemplateFunction(inplaceMethodWithArgs, {\n                name: methodWithArg[2],\n                method: methodWithArg[0],\n                args: args\n            }));\n            var staticMethWithArgs = eval(fillTemplateFunction(staticMethodWithArgs, {name: methodWithArg[2], args: args}));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethWithArgs;\n                Matrix[methodWithArg[i]] = staticMethWithArgs;\n            }\n        } else {\n            var tmplVar = {\n                name: methodWithArg[2],\n                args: args,\n                method: methodWithArg[0]\n            };\n            var inplaceMethod2 = eval(fillTemplateFunction(inplaceMethodWithOneArg, tmplVar));\n            var inplaceMethodS = eval(fillTemplateFunction(inplaceMethodWithOneArgScalar, tmplVar));\n            var inplaceMethodM = eval(fillTemplateFunction(inplaceMethodWithOneArgMatrix, tmplVar));\n            var staticMethod2 = eval(fillTemplateFunction(staticMethodWithOneArg, tmplVar));\n            for (i = 2; i < methodWithArg.length; i++) {\n                Matrix.prototype[methodWithArg[i]] = inplaceMethod2;\n                Matrix.prototype[methodWithArg[i] + 'M'] = inplaceMethodM;\n                Matrix.prototype[methodWithArg[i] + 'S'] = inplaceMethodS;\n                Matrix[methodWithArg[i]] = staticMethod2;\n            }\n        }\n    }\n\n    function fillTemplateFunction(template, values) {\n        for (var value in values) {\n            template = template.replace(new RegExp('%' + value + '%', 'g'), values[value]);\n        }\n        return template;\n    }\n\n    return Matrix;\n}\n","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n\n    matrix = Matrix.Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare()) {\n            throw new Error('Matrix must be square');\n        }\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++) {\n            determinant *= data[j][j];\n        }\n        return determinant;\n    },\n    get lowerTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularMatrix() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix.Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows) {\n            throw new Error('Invalid matrix dimensions');\n        }\n        if (this.isSingular()) {\n            throw new Error('LU matrix is singular');\n        }\n\n        var count = value.columns;\n        var X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n        var columns = lu.columns;\n        var i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n","'use strict';\n\nvar Matrix = require('../matrix');\nvar util = require('./util');\nvar hypotenuse = util.hypotenuse;\nvar getFilled2DArray = util.getFilled2DArray;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false) wantu = false;\n    if (options.computeRightSingularVectors === false) wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    var a;\n    if (m < n) {\n        if (!autoTranspose) {\n            a = value.clone();\n            // eslint-disable-next-line no-console\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = value.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    } else {\n        a = value.clone();\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = getFilled2DArray(m, nu, 0),\n        V = getFilled2DArray(n, n, 0),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0) {\n                    e[k] = 0 - e[k];\n                }\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n            // no default\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.U)) {\n            this.U = new Matrix.Matrix(this.U);\n        }\n        return this.U;\n    },\n    get rightSingularVectors() {\n        if (!Matrix.Matrix.isMatrix(this.V)) {\n            this.V = new Matrix.Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n        var U = this.U;\n        var V = this.rightSingularVectors;\n\n        var VL = V.mmul(Ls),\n            vrows = V.rows,\n            urows = U.length,\n            VLU = Matrix.Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.Matrix.diag(value));\n    },\n    inverse: function () {\n        var V = this.V;\n        var e = this.threshold,\n            vrows = V.length,\n            vcols = V[0].length,\n            X = new Matrix.Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var U = this.U;\n\n        var urows = U.length,\n            ucols = U[0].length,\n            Y = new Matrix.Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = values[0];\n    var max = values[0];\n    var l = values.length;\n    for (var i = 1; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\n/**\n * IEEE Transactions on biomedical engineering, vol. 52, no. 1, january 2005, p. 76-\n * Calculate the standard deviation via the Median of the absolute deviation\n *  The formula for the standard deviation only holds for Gaussian random variables.\n * @returns {{mean: number, stdev: number}}\n */\nexports.robustMeanAndStdev = function robustMeanAndStdev(y) {\n    var mean = 0, stdev = 0;\n    var length = y.length, i = 0;\n    for (i = 0; i < length; i++) {\n        mean += y[i];\n    }\n    mean /= length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort(compareNumbers);\n    if (length % 2 === 1) {\n        stdev = averageDeviations[(length - 1) / 2] / 0.6745;\n    } else {\n        stdev = 0.5 * (averageDeviations[length / 2] + averageDeviations[length / 2 - 1]) / 0.6745;\n    }\n\n    return {\n        mean: mean,\n        stdev: stdev\n    };\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof (alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = [].concat(values).sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw 'Vectors do not have the same dimensions';\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    } else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    } else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof (eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = [].concat(values);\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof (standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof (inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n","'use strict';\n\nmodule.exports.gsd = require('./gsd');\n\nmodule.exports.post = {\n  optimizePeaks: require('./post/optimizePeaks'),\n  joinBroadPeaks: require('./post/joinBroadPeaks'),\n  broadenPeaks: require('./post/broadenPeaks')\n};\n","'use strict';\n\nconst SG = require('ml-savitzky-golay-generalized');\n\nconst defaultOptions = {\n  sgOptions: {\n    windowSize: 9,\n    polynomial: 3\n  },\n  minMaxRatio: 0.00025,\n  broadRatio: 0.0,\n  maxCriteria: true,\n  smoothY: true,\n  realTopDetection: false,\n  heightFactor: 0,\n  boundaries: false,\n  derivativeThreshold: -1\n};\n\n/**\n * Global spectra deconvolution\n * @param {Array<number>} x - Independent variable\n * @param {Array<number>} yIn - Dependent variable\n * @param {object} [options] - Options object\n * @param {object} [options.sgOptions] - Options object for Savitzky-Golay filter. See https://github.com/mljs/savitzky-golay-generalized#options\n * @param {number} [options.sgOptions.windowSize = 9] - points to use in the approximations\n * @param {number} [options.sgOptions.polynomial = 3] - degree of the polynomial to use in the approximations\n * @param {number} [options.minMaxRatio = 0.00025] - Threshold to determine if a given peak should be considered as a noise\n * @param {number} [options.broadRatio = 0.00] - If `broadRatio` is higher than 0, then all the peaks which second derivative\n * smaller than `broadRatio * maxAbsSecondDerivative` will be marked with the soft mask equal to true.\n * @param {number} [options.noiseLevel = 0] - Noise threshold in spectrum units\n * @param {boolean} [options.maxCriteria = true] - Peaks are local maximum(true) or minimum(false)\n * @param {boolean} [options.smoothY = true] - Select the peak intensities from a smoothed version of the independent variables\n * @param {boolean} [options.realTopDetection = false] - Use a quadratic optimizations with the peak and its 3 closest neighbors\n * to determine the true x,y values of the peak?\n * @param {number} [options.heightFactor = 0] - Factor to multiply the calculated height (usually 2)\n * @param {boolean} [options.boundaries = false] - Return also the inflection points of the peaks\n * @param {number} [options.derivativeThreshold = -1] - Filters based on the amplitude of the first derivative\n * @return {Array<object>}\n */\nfunction gsd(x, yIn, options) {\n  options = Object.assign({}, defaultOptions, options);\n  let sgOptions = options.sgOptions;\n  const y = [].concat(yIn);\n\n  if (!('noiseLevel' in options)) {\n    // We have to know if x is equally spaced\n    var maxDx = 0;\n\n    var minDx = Number.MAX_VALUE;\n\n    var tmp;\n    for (let i = 0; i < x.length - 1; ++i) {\n      tmp = Math.abs(x[i + 1] - x[i]);\n      if (tmp < minDx) {\n        minDx = tmp;\n      }\n      if (tmp > maxDx) {\n        maxDx = tmp;\n      }\n    }\n\n    if ((maxDx - minDx) / maxDx < 0.05) {\n      options.noiseLevel = getNoiseLevel(y);\n    } else {\n      options.noiseLevel = 0;\n    }\n  }\n  const yCorrection = { m: 1, b: options.noiseLevel };\n  if (!options.maxCriteria) {\n    yCorrection.m = -1;\n    yCorrection.b *= -1;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    y[i] = yCorrection.m * y[i] - yCorrection.b;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    if (y[i] < 0) {\n      y[i] = 0;\n    }\n  }\n  // If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n  let Y = y;\n  let dY, ddY;\n  if ((maxDx - minDx) / maxDx < 0.05) {\n    if (options.smoothY) {\n      Y = SG(y, x[1] - x[0], {\n        windowSize: sgOptions.windowSize,\n        polynomial: sgOptions.polynomial,\n        derivative: 0\n      });\n    }\n    dY = SG(y, x[1] - x[0], {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 1\n    });\n    ddY = SG(y, x[1] - x[0], {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 2\n    });\n  } else {\n    if (options.smoothY) {\n      Y = SG(y, x, {\n        windowSize: sgOptions.windowSize,\n        polynomial: sgOptions.polynomial,\n        derivative: 0\n      });\n    }\n    dY = SG(y, x, {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 1\n    });\n    ddY = SG(y, x, {\n      windowSize: sgOptions.windowSize,\n      polynomial: sgOptions.polynomial,\n      derivative: 2\n    });\n  }\n\n  const X = x;\n  const dx = x[1] - x[0];\n  var maxDdy = 0;\n  var maxY = 0;\n  for (let i = 0; i < Y.length; i++) {\n    if (Math.abs(ddY[i]) > maxDdy) {\n      maxDdy = Math.abs(ddY[i]);\n    }\n    if (Math.abs(Y[i]) > maxY) {\n      maxY = Math.abs(Y[i]);\n    }\n  }\n\n  var lastMax = null;\n  var lastMin = null;\n  var minddY = new Array(Y.length - 2);\n  var intervalL = new Array(Y.length);\n  var intervalR = new Array(Y.length);\n  var broadMask = new Array(Y.length - 2);\n  var minddYLen = 0;\n  var intervalLLen = 0;\n  var intervalRLen = 0;\n  var broadMaskLen = 0;\n  // By the intermediate value theorem We cannot find 2 consecutive maximum or minimum\n  for (let i = 1; i < Y.length - 1; ++i) {\n    // filter based on derivativeThreshold\n    if (Math.abs(dY[i]) > options.derivativeThreshold) {\n      // Minimum in first derivative\n      if (\n        (dY[i] < dY[i - 1] && dY[i] <= dY[i + 1]) ||\n        (dY[i] <= dY[i - 1] && dY[i] < dY[i + 1])\n      ) {\n        lastMin = {\n          x: X[i],\n          index: i\n        };\n        if (dx > 0 && lastMax !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n\n      // Maximum in first derivative\n      if (\n        (dY[i] >= dY[i - 1] && dY[i] > dY[i + 1]) ||\n        (dY[i] > dY[i - 1] && dY[i] >= dY[i + 1])\n      ) {\n        lastMax = {\n          x: X[i],\n          index: i\n        };\n        if (dx < 0 && lastMin !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n    }\n\n    // Minimum in second derivative\n    if (ddY[i] < ddY[i - 1] && ddY[i] < ddY[i + 1]) {\n      // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n      minddY[minddYLen++] = i; // ( [X[i], Y[i], i] );\n      broadMask[broadMaskLen++] =\n        Math.abs(ddY[i]) <= options.broadRatio * maxDdy;\n    }\n  }\n  minddY.length = minddYLen;\n  intervalL.length = intervalLLen;\n  intervalR.length = intervalRLen;\n  broadMask.length = broadMaskLen;\n\n  let signals = new Array(minddY.length);\n  let signalsLen = 0;\n  let lastK = -1;\n  let possible, frequency, distanceJ, minDistance, gettingCloser;\n  for (let j = 0; j < minddY.length; ++j) {\n    frequency = X[minddY[j]];\n    possible = -1;\n    let k = lastK + 1;\n    minDistance = Number.MAX_VALUE;\n    distanceJ = 0;\n    gettingCloser = true;\n    while (possible === -1 && k < intervalL.length && gettingCloser) {\n      distanceJ = Math.abs(frequency - (intervalL[k].x + intervalR[k].x) / 2);\n\n      // Still getting closer?\n      if (distanceJ < minDistance) {\n        minDistance = distanceJ;\n      } else {\n        gettingCloser = false;\n      }\n      if (distanceJ < Math.abs(intervalL[k].x - intervalR[k].x) / 2) {\n        possible = k;\n        lastK = k;\n      }\n      ++k;\n    }\n\n    if (possible !== -1) {\n      if (Math.abs(Y[minddY[j]]) > options.minMaxRatio * maxY) {\n        signals[signalsLen++] = {\n          index: minddY[j],\n          x: frequency,\n          y: (Y[minddY[j]] + yCorrection.b) / yCorrection.m,\n          width: Math.abs(intervalR[possible].x - intervalL[possible].x), // widthCorrection\n          soft: broadMask[j]\n        };\n        if (options.boundaries) {\n          signals[signalsLen - 1].left = intervalL[possible];\n          signals[signalsLen - 1].right = intervalR[possible];\n        }\n        if (options.heightFactor) {\n          let yLeft = Y[intervalL[possible].index];\n          let yRight = Y[intervalR[possible].index];\n          signals[signalsLen - 1].height =\n            options.heightFactor *\n            (signals[signalsLen - 1].y - (yLeft + yRight) / 2);\n        }\n      }\n    }\n  }\n  signals.length = signalsLen;\n\n  if (options.realTopDetection) {\n    realTopDetection(signals, X, Y);\n  }\n\n  // Correct the values to fit the original spectra data\n  for (let j = 0; j < signals.length; j++) {\n    signals[j].base = options.noiseLevel;\n  }\n\n  signals.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return signals;\n}\n\nfunction getNoiseLevel(y) {\n  var mean = 0;\n\n  var stddev = 0;\n  var length = y.length;\n  for (let i = 0; i < length; ++i) {\n    mean += y[i];\n  }\n  mean /= length;\n  var averageDeviations = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    averageDeviations[i] = Math.abs(y[i] - mean);\n  }\n  averageDeviations.sort((a, b) => a - b);\n  if (length % 2 === 1) {\n    stddev = averageDeviations[(length - 1) / 2] / 0.6745;\n  } else {\n    stddev =\n      (0.5 *\n        (averageDeviations[length / 2] + averageDeviations[length / 2 - 1])) /\n      0.6745;\n  }\n\n  return stddev;\n}\n\nfunction realTopDetection(peakList, x, y) {\n  var alpha, beta, gamma, p, currentPoint;\n  for (var j = 0; j < peakList.length; j++) {\n    currentPoint = peakList[j].index; // peakList[j][2];\n    // The detected peak could be moved 1 or 2 unit to left or right.\n    if (\n      y[currentPoint - 1] >= y[currentPoint - 2] &&\n      y[currentPoint - 1] >= y[currentPoint]\n    ) {\n      currentPoint--;\n    } else {\n      if (\n        y[currentPoint + 1] >= y[currentPoint] &&\n        y[currentPoint + 1] >= y[currentPoint + 2]\n      ) {\n        currentPoint++;\n      } else {\n        if (\n          y[currentPoint - 2] >= y[currentPoint - 3] &&\n          y[currentPoint - 2] >= y[currentPoint - 1]\n        ) {\n          currentPoint -= 2;\n        } else {\n          if (\n            y[currentPoint + 2] >= y[currentPoint + 1] &&\n            y[currentPoint + 2] >= y[currentPoint + 3]\n          ) {\n            currentPoint += 2;\n          }\n        }\n      }\n    }\n    // interpolation to a sin() function\n    if (\n      y[currentPoint - 1] > 0 &&\n      y[currentPoint + 1] > 0 &&\n      y[currentPoint] >= y[currentPoint - 1] &&\n      y[currentPoint] >= y[currentPoint + 1]\n    ) {\n      alpha = 20 * Math.log10(y[currentPoint - 1]);\n      beta = 20 * Math.log10(y[currentPoint]);\n      gamma = 20 * Math.log10(y[currentPoint + 1]);\n      p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);\n      // console.log(alpha, beta, gamma, `p: ${p}`);\n      // console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n      peakList[j].x =\n        x[currentPoint] + (x[currentPoint] - x[currentPoint - 1]) * p;\n      peakList[j].y =\n        y[currentPoint] -\n        0.25 * (y[currentPoint - 1] - y[currentPoint + 1]) * p;\n    }\n  }\n}\n\nmodule.exports = gsd;\n","//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\nvar extend = require('extend');\nvar stat = require('ml-stat');\n\nvar defaultOptions = {\n    windowSize: 9,\n    derivative: 0,\n    polynomial: 3,\n};\n\n\nfunction SavitzkyGolay(data, h, options) {\n    options = extend({}, defaultOptions, options);\n\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\n\n    if (options.windowSize>data.length)\n        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n    if (options.polynomial >= 6)\n        console.warn('You should not use polynomial grade higher than 5 if you are' +\n            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\n    var windowSize = options.windowSize;\n\n    var half = Math.floor(windowSize/2);\n    var np = data.length;\n    var ans = new Array(np);\n    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n    var hs = 0;\n    var constantH = true;\n    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n        constantH = false;\n    }\n    else{\n        hs = Math.pow(h, options.derivative);\n    }\n    //console.log(\"Constant h: \"+constantH);\n    //For the borders\n    for(var i=0;i<half;i++){\n        var wg1=weights[half-i-1];\n        var wg2=weights[half+i+1];\n        var d1 = 0,d2=0;\n        for (var l = 0; l < windowSize; l++){\n            d1 += wg1[l] * data[l];\n            d2 += wg2[l] * data[np-windowSize+l-1];\n        }\n        if(constantH){\n            ans[half-i-1] = d1/hs;\n            ans[np-half+i] = d2/hs;\n        }\n        else{\n            hs = getHs(h,half-i-1,half, options.derivative);\n            ans[half-i-1] = d1/hs;\n            hs = getHs(h,np-half+i,half, options.derivative);\n            ans[np-half+i] = d2/hs;\n        }\n    }\n    //For the internal points\n    var wg = weights[half];\n    for(var i=windowSize;i<np+1;i++){\n        var d = 0;\n        for (var l = 0; l < windowSize; l++)\n            d += wg[l] * data[l+i-windowSize];\n        if(!constantH)\n            hs = getHs(h,i-half-1,half, options.derivative);\n        ans[i-half-1] = d/hs;\n    }\n    return ans;\n}\n\nfunction getHs(h,center,half,derivative){\n    var hs = 0;\n    var count = 0;\n    for(var i=center-half;i<center+half;i++){\n        if(i>=0 && i < h.length-1){\n            hs+= (h[i+1]-h[i]);\n            count++;\n        }\n    }\n    return Math.pow(hs/count,derivative);\n}\n\nfunction GramPoly(i,m,k,s){\n    var Grampoly = 0;\n    if(k>0){\n        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n    }\n    else{\n        if(k==0&&s==0){\n            Grampoly=1;\n        }\n        else{\n            Grampoly=0;\n        }\n    }\n    //console.log(Grampoly);\n    return Grampoly;\n}\n\nfunction GenFact(a,b){\n    var gf=1;\n    if(a>=b){\n        for(var j=a-b+1;j<=a;j++){\n            gf*=j;\n        }\n    }\n    return gf;\n}\n\nfunction Weight(i,t,m,n,s){\n    var sum=0;\n    for(var k=0;k<=n;k++){\n        //console.log(k);\n        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n    }\n    return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m,n,s){\n    var weights = new Array(m);\n    var np = Math.floor(m/2);\n    for(var t=-np;t<=np;t++){\n        weights[t+np] = new Array(m);\n        for(var j=-np;j<=np;j++){\n            weights[t+np][j+np]=Weight(j,t,np,n,s);\n        }\n    }\n    return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\nmodule.exports = SavitzkyGolay;\n \n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n","'use strict';\nvar arrayStat = require('./array');\n\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n","/**\n * Created by acastillo on 9/6/15.\n */\n'use strict';\n\nvar optimize = require('ml-optimize-lorentzian');\n\nfunction sampleFunction(from, to, x, y, lastIndex) {\n  var nbPoints = x.length;\n  var sampleX = [];\n  var sampleY = [];\n  var direction = Math.sign(x[1] - x[0]); // Direction of the derivative\n  if (direction === -1) {\n    lastIndex[0] = x.length - 1;\n  }\n\n  var delta = Math.abs(to - from) / 2;\n  var mid = (from + to) / 2;\n  var stop = false;\n  var index = lastIndex[0];\n  while (!stop && index < nbPoints && index >= 0) {\n    if (Math.abs(x[index] - mid) <= delta) {\n      sampleX.push(x[index]);\n      sampleY.push(y[index]);\n      index += direction;\n    } else {\n      // It is outside the range.\n      if (Math.sign(mid - x[index]) === 1) {\n        // We'll reach the mid going in the current direction\n        index += direction;\n      } else {\n        // There is not more peaks in the current range\n        stop = true;\n      }\n    }\n    // console.log(sampleX);\n  }\n  lastIndex[0] = index;\n  return [sampleX, sampleY];\n}\n\nmodule.exports = function optimizePeaks(peakList, x, y, n, fnType) {\n  var i;\n  var j;\n\n  var lastIndex = [0];\n  var groups = groupPeaks(peakList, n);\n  var result = [];\n  var factor = 1;\n  if (fnType === 'gaussian') {\n    factor = 1.17741;\n  } // From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n  var sampling, error, opts;\n  for (i = 0; i < groups.length; i++) {\n    var peaks = groups[i].group;\n    if (peaks.length > 1) {\n      // Multiple peaks\n      // console.log(\"Pending group of overlaped peaks \"+peaks.length);\n      // console.log(\"here1\");\n      // console.log(groups[i].limits);\n      sampling = sampleFunction(\n        groups[i].limits[0] - groups[i].limits[1],\n        groups[i].limits[0] + groups[i].limits[1],\n        x,\n        y,\n        lastIndex\n      );\n      // console.log(sampling);\n      if (sampling[0].length > 5) {\n        error = peaks[0].width / 1000;\n        opts = [3, 100, error, error, error, error * 10, error * 10, 11, 9, 1];\n        // var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n        var optPeaks = [];\n        if (fnType === 'gaussian') {\n          optPeaks = optimize.optimizeGaussianSum(sampling, peaks, opts);\n        } else {\n          if (fnType === 'lorentzian') {\n            optPeaks = optimize.optimizeLorentzianSum(sampling, peaks, opts);\n          }\n        }\n        // console.log(optPeak);\n        for (j = 0; j < optPeaks.length; j++) {\n          result.push({\n            x: optPeaks[j][0][0],\n            y: optPeaks[j][1][0],\n            width: optPeaks[j][2][0] * factor\n          });\n        }\n      }\n    } else {\n      // Single peak\n      peaks = peaks[0];\n      sampling = sampleFunction(\n        peaks.x - n * peaks.width,\n        peaks.x + n * peaks.width,\n        x,\n        y,\n        lastIndex\n      );\n      // console.log(\"here2\");\n      // console.log(groups[i].limits);\n      if (sampling[0].length > 5) {\n        error = peaks.width / 1000;\n        opts = [3, 100, error, error, error, error * 10, error * 10, 11, 9, 1];\n        // var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n        // var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n        var optPeak = [];\n        if (fnType === 'gaussian') {\n          optPeak = optimize.optimizeSingleGaussian(\n            [sampling[0], sampling[1]],\n            peaks,\n            opts\n          );\n        } else {\n          if (fnType === 'lorentzian') {\n            optPeak = optimize.optimizeSingleLorentzian(\n              [sampling[0], sampling[1]],\n              peaks,\n              opts\n            );\n          }\n        }\n        // console.log(optPeak);\n        result.push({\n          x: optPeak[0][0],\n          y: optPeak[1][0],\n          width: optPeak[2][0] * factor\n        }); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n      }\n    }\n  }\n  return result;\n};\n\nfunction groupPeaks(peakList, nL) {\n  var group = [];\n  var groups = [];\n  var i, j;\n  var limits = [peakList[0].x, nL * peakList[0].width];\n  var upperLimit, lowerLimit;\n  // Merge forward\n  for (i = 0; i < peakList.length; i++) {\n    // If the 2 things overlaps\n    if (\n      Math.abs(peakList[i].x - limits[0]) <\n      nL * peakList[i].width + limits[1]\n    ) {\n      // Add the peak to the group\n      group.push(peakList[i]);\n      // Update the group limits\n      upperLimit = limits[0] + limits[1];\n      if (peakList[i].x + nL * peakList[i].width > upperLimit) {\n        upperLimit = peakList[i].x + nL * peakList[i].width;\n      }\n      lowerLimit = limits[0] - limits[1];\n      if (peakList[i].x - nL * peakList[i].width < lowerLimit) {\n        lowerLimit = peakList[i].x - nL * peakList[i].width;\n      }\n      limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2\n      ];\n    } else {\n      groups.push({ limits: limits, group: group });\n      // var optmimalPeak = fitSpectrum(group,limits,spectrum);\n      group = [peakList[i]];\n      limits = [peakList[i].x, nL * peakList[i].width];\n    }\n  }\n  groups.push({ limits: limits, group: group });\n  // Merge backward\n  for (i = groups.length - 2; i >= 0; i--) {\n    // The groups overlaps\n    if (\n      Math.abs(groups[i].limits[0] - groups[i + 1].limits[0]) <\n      (groups[i].limits[1] + groups[i + 1].limits[1]) / 2\n    ) {\n      for (j = 0; j < groups[i + 1].group.length; j++) {\n        groups[i].group.push(groups[i + 1].group[j]);\n      }\n      upperLimit = groups[i].limits[0] + groups[i].limits[1];\n      if (groups[i + 1].limits[0] + groups[i + 1].limits[1] > upperLimit) {\n        upperLimit = groups[i + 1].limits[0] + groups[i + 1].limits[1];\n      }\n      lowerLimit = groups[i].limits[0] - groups[i].limits[1];\n      if (groups[i + 1].limits[0] - groups[i + 1].limits[1] < lowerLimit) {\n        lowerLimit = groups[i + 1].limits[0] - groups[i + 1].limits[1];\n      }\n      // console.log(limits);\n      groups[i].limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2\n      ];\n\n      groups.splice(i + 1, 1);\n    }\n  }\n  return groups;\n}\n","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:); \t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        //console.log(y_dat);\n        //console.log(y_hat);\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;","'use strict';\n\nif (!Symbol.species) {\n    Symbol.species = Symbol.for('@@species');\n}\n","module.exports = exports = require('./ArrayUtils');\n\n\nexports.getEquallySpacedData = require('./getEquallySpaced').getEquallySpacedData;\nexports.SNV = require('./snv').SNV;\n","'use strict';\n\nconst Stat = require('ml-stat').array;\n/**\n * Function that returns an array of points given 1D array as follows:\n *\n * [x1, y1, .. , x2, y2, ..]\n *\n * And receive the number of dimensions of each point.\n * @param array\n * @param dimensions\n * @returns {Array} - Array of points.\n */\nfunction coordArrayToPoints(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var length = array.length / dimensions;\n    var pointsArr = new Array(length);\n\n    var k = 0;\n    for(var i = 0; i < array.length; i += dimensions) {\n        var point = new Array(dimensions);\n        for(var j = 0; j < dimensions; ++j) {\n            point[j] = array[i + j];\n        }\n\n        pointsArr[k] = point;\n        k++;\n    }\n\n    return pointsArr;\n}\n\n\n/**\n * Function that given an array as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * Returns an array as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * And receives the number of dimensions of each coordinate.\n * @param array\n * @param dimensions\n * @returns {Array} - Matrix of coordinates\n */\nfunction coordArrayToCoordMatrix(array, dimensions) {\n    if(array.length % dimensions !== 0) {\n        throw new RangeError('Dimensions number must be accordance with the size of the array.');\n    }\n\n    var coordinatesArray = new Array(dimensions);\n    var points = array.length / dimensions;\n    for (var i = 0; i < coordinatesArray.length; i++) {\n        coordinatesArray[i] = new Array(points);\n    }\n\n    for(i = 0; i < array.length; i += dimensions) {\n        for(var j = 0; j < dimensions; ++j) {\n            var currentPoint = Math.floor(i / dimensions);\n            coordinatesArray[j][currentPoint] = array[i + j];\n        }\n    }\n\n    return coordinatesArray;\n}\n\n/**\n * Function that receives a coordinate matrix as follows:\n * [[x1, x2, ..], [y1, y2, ..], [ .. ]]\n *\n * Returns an array of coordinates as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param coordMatrix\n * @returns {Array}\n */\nfunction coordMatrixToCoordArray(coordMatrix) {\n    var coodinatesArray = new Array(coordMatrix.length * coordMatrix[0].length);\n    var k = 0;\n    for(var i = 0; i < coordMatrix[0].length; ++i) {\n        for(var j = 0; j < coordMatrix.length; ++j) {\n            coodinatesArray[k] = coordMatrix[j][i];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Tranpose a matrix, this method is for coordMatrixToPoints and\n * pointsToCoordMatrix, that because only transposing the matrix\n * you can change your representation.\n *\n * @param matrix\n * @returns {Array}\n */\nfunction transpose(matrix) {\n    var resultMatrix = new Array(matrix[0].length);\n    for(var i = 0; i < resultMatrix.length; ++i) {\n        resultMatrix[i] = new Array(matrix.length);\n    }\n\n    for (i = 0; i < matrix.length; ++i) {\n        for(var j = 0; j < matrix[0].length; ++j) {\n            resultMatrix[j][i] = matrix[i][j];\n        }\n    }\n\n    return resultMatrix;\n}\n\n/**\n * Function that transform an array of points into a coordinates array\n * as follows:\n * [x1, y1, .. , x2, y2, ..]\n *\n * @param points\n * @returns {Array}\n */\nfunction pointsToCoordArray(points) {\n    var coodinatesArray = new Array(points.length * points[0].length);\n    var k = 0;\n    for(var i = 0; i < points.length; ++i) {\n        for(var j = 0; j < points[0].length; ++j) {\n            coodinatesArray[k] = points[i][j];\n            ++k;\n        }\n    }\n\n    return coodinatesArray;\n}\n\n/**\n * Apply the dot product between the smaller vector and a subsets of the\n * largest one.\n *\n * @param firstVector\n * @param secondVector\n * @returns {Array} each dot product of size of the difference between the\n *                  larger and the smallest one.\n */\nfunction applyDotProduct(firstVector, secondVector) {\n    var largestVector, smallestVector;\n    if(firstVector.length <= secondVector.length) {\n        smallestVector = firstVector;\n        largestVector = secondVector;\n    } else {\n        smallestVector = secondVector;\n        largestVector = firstVector;\n    }\n\n    var difference = largestVector.length - smallestVector.length + 1;\n    var dotProductApplied = new Array(difference);\n\n    for (var i = 0; i < difference; ++i) {\n        var sum = 0;\n        for (var j = 0; j < smallestVector.length; ++j) {\n            sum += smallestVector[j] * largestVector[i + j];\n        }\n        dotProductApplied[i] = sum;\n    }\n\n    return dotProductApplied;\n}\n/**\n * To scale the input array between the specified min and max values. The operation is performed inplace\n * if the options.inplace is specified. If only one of the min or max parameters is specified, then the scaling\n * will multiply the input array by min/min(input) or max/max(input)\n * @param input\n * @param options\n * @returns {*}\n */\nfunction scale(input, options){\n    var y;\n    if(options.inPlace){\n        y = input;\n    }\n    else{\n        y = new Array(input.length);\n    }\n    const max = options.max;\n    const min = options.min;\n    if(typeof max === \"number\"){\n        if(typeof min === \"number\"){\n            var minMax = Stat.minMax(input);\n            var factor = (max - min)/(minMax.max-minMax.min);\n            for(var i=0;i< y.length;i++){\n                y[i]=(input[i]-minMax.min)*factor+min;\n            }\n        }\n        else{\n            var currentMin = Stat.max(input);\n            var factor = max/currentMin;\n            for(var i=0;i< y.length;i++){\n                y[i] = input[i]*factor;\n            }\n        }\n    }\n    else{\n        if(typeof min === \"number\"){\n            var currentMin = Stat.min(input);\n            var factor = min/currentMin;\n            for(var i=0;i< y.length;i++){\n                y[i] = input[i]*factor;\n            }\n        }\n    }\n    return y;\n}\n\nmodule.exports = {\n    coordArrayToPoints: coordArrayToPoints,\n    coordArrayToCoordMatrix: coordArrayToCoordMatrix,\n    coordMatrixToCoordArray: coordMatrixToCoordArray,\n    coordMatrixToPoints: transpose,\n    pointsToCoordArray: pointsToCoordArray,\n    pointsToCoordMatrix: transpose,\n    applyDotProduct: applyDotProduct,\n    scale:scale\n};\n\n","'use strict';\n\nvar arrayStat = require('./array');\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\nexports.max = function max(matrix) {\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return max;\n};\n\nexports.min = function min(matrix) {\n    var min = Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n        }\n    }\n    return min;\n};\n\nexports.minMax = function minMax(matrix) {\n    var min = Infinity;\n    var max = -Infinity;\n    for (var i = 0; i < matrix.length; i++) {\n        for (var j = 0; j < matrix[i].length; j++) {\n            if (matrix[i][j] < min) min = matrix[i][j];\n            if (matrix[i][j] > max) max = matrix[i][j];\n        }\n    }\n    return {\n        min:min,\n        max:max\n    };\n};\n\nexports.entropy = function entropy(matrix, eps) {\n    if (typeof (eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n};\n\nexports.mean = function mean(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n};\n\nexports.sum = function sum(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theSum, i, j;\n\n    if (dimension === -1) {\n        theSum = [0];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theSum[0] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theSum = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theSum[j] += matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theSum = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theSum[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theSum[j] += matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theSum;\n};\n\nexports.product = function product(matrix, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theProduct, i, j;\n\n    if (dimension === -1) {\n        theProduct = [1];\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theProduct[0] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 0) {\n        theProduct = new Array(cols);\n        for (j = 0; j < cols; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < rows; i++) {\n                theProduct[j] *= matrix[i][j];\n            }\n        }\n    } else if (dimension === 1) {\n        theProduct = new Array(rows);\n        for (j = 0; j < rows; j++) {\n            theProduct[j] = 1;\n            for (i = 0; i < cols; i++) {\n                theProduct[j] *= matrix[j][i];\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theProduct;\n};\n\nexports.standardDeviation = function standardDeviation(matrix, means, unbiased) {\n    var vari = exports.variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n};\n\nexports.variance = function variance(matrix, means, unbiased) {\n    if (typeof (unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n};\n\nexports.median = function median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort(compareNumbers);\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n};\n\nexports.mode = function mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n};\n\nexports.skewness = function skewness(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n};\n\nexports.kurtosis = function kurtosis(matrix, unbiased) {\n    if (typeof (unbiased) === 'undefined') unbiased = true;\n    var means = exports.mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n};\n\nexports.standardError = function standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = exports.standardDeviation(matrix);\n    var l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n};\n\nexports.covariance = function covariance(matrix, dimension) {\n    return exports.scatter(matrix, undefined, dimension);\n};\n\nexports.scatter = function scatter(matrix, divisor, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof (divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = exports.mean(matrix, dimension);\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n\nexports.correlation = function correlation(matrix) {\n    var means = exports.mean(matrix),\n        standardDeviations = exports.standardDeviation(matrix, true, means),\n        scores = exports.zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n};\n\nexports.zScores = function zScores(matrix, means, standardDeviations) {\n    means = means || exports.mean(matrix);\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix, true, means);\n    return exports.standardize(exports.center(matrix, means, false), standardDeviations, true);\n};\n\nexports.center = function center(matrix, means, inPlace) {\n    means = means || exports.mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n};\n\nexports.standardize = function standardize(matrix, standardDeviations, inPlace) {\n    if (typeof (standardDeviations) === 'undefined') standardDeviations = exports.standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n};\n\nexports.weightedVariance = function weightedVariance(matrix, weights) {\n    var means = exports.mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n};\n\nexports.weightedMean = function weightedMean(matrix, weights, dimension) {\n    if (typeof (dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n};\n\nexports.weightedCovariance = function weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return exports.weightedScatter(matrix, weights, means, factor, dimension);\n};\n\nexports.weightedScatter = function weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || exports.weightedMean(matrix, weights, dimension);\n    if (typeof (factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n};\n","'use strict';\n\n/**\n *\n * Function that returns a Number array of equally spaced numberOfPoints\n * containing a representation of intensities of the spectra arguments x\n * and y.\n *\n * The options parameter contains an object in the following form:\n * from: starting point\n * to: last point\n * numberOfPoints: number of points between from and to\n * variant: \"slot\" or \"smooth\" - smooth is the default option\n *\n * The slot variant consist that each point in the new array is calculated\n * averaging the existing points between the slot that belongs to the current\n * value. The smooth variant is the same but takes the integral of the range\n * of the slot and divide by the step size between two points in the new array.\n *\n * @param x - sorted increasing x values\n * @param y\n * @param options\n * @returns {Array} new array with the equally spaced data.\n *\n */\nfunction getEquallySpacedData(x, y, options) {\n    if (x.length>1 && x[0]>x[1]) {\n        x=x.slice().reverse();\n        y=y.slice().reverse();\n    }\n\n    var xLength = x.length;\n    if(xLength !== y.length)\n        throw new RangeError(\"the x and y vector doesn't have the same size.\");\n\n    if (options === undefined) options = {};\n\n    var from = options.from === undefined ? x[0] : options.from\n    if (isNaN(from) || !isFinite(from)) {\n        throw new RangeError(\"'From' value must be a number\");\n    }\n    var to = options.to === undefined ? x[x.length - 1] : options.to;\n    if (isNaN(to) || !isFinite(to)) {\n        throw new RangeError(\"'To' value must be a number\");\n    }\n\n    var reverse = from > to;\n    if(reverse) {\n        var temp = from;\n        from = to;\n        to = temp;\n    }\n\n    var numberOfPoints = options.numberOfPoints === undefined ? 100 : options.numberOfPoints;\n    if (isNaN(numberOfPoints) || !isFinite(numberOfPoints)) {\n        throw new RangeError(\"'Number of points' value must be a number\");\n    }\n    if(numberOfPoints < 1)\n        throw new RangeError(\"the number of point must be higher than 1\");\n\n    var algorithm = options.variant === \"slot\" ? \"slot\" : \"smooth\"; // default value: smooth\n\n    var output = algorithm === \"slot\" ? getEquallySpacedSlot(x, y, from, to, numberOfPoints) : getEquallySpacedSmooth(x, y, from, to, numberOfPoints);\n\n    return reverse ? output.reverse() : output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"smooth\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"smooth\"\n */\nfunction getEquallySpacedSmooth(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    var initialOriginalStep = x[1] - x[0];\n    var lastOriginalStep = x[x.length - 1] - x[x.length - 2];\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = Number.MIN_VALUE;\n    var previousY = 0;\n    var nextX = x[0] - initialOriginalStep;\n    var nextY = 0;\n\n    var currentValue = 0;\n    var slope = 0;\n    var intercept = 0;\n    var sumAtMin = 0;\n    var sumAtMax = 0;\n\n    var i = 0; // index of input\n    var j = 0; // index of output\n\n    function getSlope(x0, y0, x1, y1) {\n        return (y1 - y0) / (x1 - x0);\n    }\n\n    main: while(true) {\n        while (nextX - max >= 0) {\n            // no overlap with original point, just consume current value\n            var add = integral(0, max - previousX, slope, previousY);\n            sumAtMax = currentValue + add;\n\n            output[j] = (sumAtMax - sumAtMin) / step;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            sumAtMin = sumAtMax;\n        }\n\n        if(previousX <= min && min <= nextX) {\n            add = integral(0, min - previousX, slope, previousY);\n            sumAtMin = currentValue + add;\n        }\n\n        currentValue += integral(previousX, nextX, slope, intercept);\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else if (i === xLength) {\n            nextX += lastOriginalStep;\n            nextY = 0;\n        }\n        // updating parameters\n        slope = getSlope(previousX, previousY, nextX, nextY);\n        intercept = -slope*previousX + previousY;\n    }\n\n    return output;\n}\n\n/**\n * function that retrieves the getEquallySpacedData with the variant \"slot\"\n *\n * @param x\n * @param y\n * @param from - Initial point\n * @param to - Final point\n * @param numberOfPoints\n * @returns {Array} - Array of y's equally spaced with the variant \"slot\"\n */\nfunction getEquallySpacedSlot(x, y, from, to, numberOfPoints) {\n    var xLength = x.length;\n\n    var step = (to - from) / (numberOfPoints - 1);\n    var halfStep = step / 2;\n    var lastStep = x[x.length - 1] - x[x.length - 2];\n\n    var start = from - halfStep;\n    var output = new Array(numberOfPoints);\n\n    // Init main variables\n    var min = start;\n    var max = start + step;\n\n    var previousX = -Number.MAX_VALUE;\n    var previousY = 0;\n    var nextX = x[0];\n    var nextY = y[0];\n    var frontOutsideSpectra = 0;\n    var backOutsideSpectra = true;\n\n    var currentValue = 0;\n\n    // for slot algorithm\n    var currentPoints = 0;\n\n    var i = 1; // index of input\n    var j = 0; // index of output\n\n    main: while(true) {\n        if (previousX>=nextX) throw (new Error('x must be an increasing serie'));\n        while (previousX - max > 0) {\n            // no overlap with original point, just consume current value\n            if(backOutsideSpectra) {\n                currentPoints++;\n                backOutsideSpectra = false;\n            }\n\n            output[j] = currentPoints <= 0 ? 0 : currentValue / currentPoints;\n            j++;\n\n            if (j === numberOfPoints)\n                break main;\n\n            min = max;\n            max += step;\n            currentValue = 0;\n            currentPoints = 0;\n        }\n\n        if(previousX > min) {\n            currentValue += previousY;\n            currentPoints++;\n        }\n\n        if(previousX === -Number.MAX_VALUE || frontOutsideSpectra > 1)\n            currentPoints--;\n\n        previousX = nextX;\n        previousY = nextY;\n\n        if (i < xLength) {\n            nextX = x[i];\n            nextY = y[i];\n            i++;\n        } else {\n            nextX += lastStep;\n            nextY = 0;\n            frontOutsideSpectra++;\n        }\n    }\n\n    return output;\n}\n/**\n * Function that calculates the integral of the line between two\n * x-coordinates, given the slope and intercept of the line.\n *\n * @param x0\n * @param x1\n * @param slope\n * @param intercept\n * @returns {number} integral value.\n */\nfunction integral(x0, x1, slope, intercept) {\n    return (0.5 * slope * x1 * x1 + intercept * x1) - (0.5 * slope * x0 * x0 + intercept * x0);\n}\n\nexports.getEquallySpacedData = getEquallySpacedData;\nexports.integral = integral;","'use strict';\n\nexports.SNV = SNV;\nvar Stat = require('ml-stat').array;\n\n/**\n * Function that applies the standard normal variate (SNV) to an array of values.\n *\n * @param data - Array of values.\n * @returns {Array} - applied the SNV.\n */\nfunction SNV(data) {\n    var mean = Stat.mean(data);\n    var std = Stat.standardDeviation(data);\n    var result = data.slice();\n    for (var i = 0; i < data.length; i++) {\n        result[i] = (result[i] - mean) / std;\n    }\n    return result;\n}\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixTransposeView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.columns, matrix.rows);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(columnIndex, rowIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(columnIndex, rowIndex);\n    }\n}\n\nmodule.exports = MatrixTransposeView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixRowView extends BaseView {\n    constructor(matrix, row) {\n        super(matrix, 1, matrix.columns);\n        this.row = row;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.row, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.row, columnIndex);\n    }\n}\n\nmodule.exports = MatrixRowView;\n","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSubView extends BaseView {\n    constructor(matrix, startRow, endRow, startColumn, endColumn) {\n        util.checkRange(matrix, startRow, endRow, startColumn, endColumn);\n        super(matrix, endRow - startRow + 1, endColumn - startColumn + 1);\n        this.startRow = startRow;\n        this.startColumn = startColumn;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.startRow + rowIndex, this.startColumn + columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.startRow + rowIndex, this.startColumn + columnIndex);\n    }\n}\n\nmodule.exports = MatrixSubView;\n","'use strict';\n\nvar BaseView = require('./base');\nvar util = require('../util');\n\nclass MatrixSelectionView extends BaseView {\n    constructor(matrix, rowIndices, columnIndices) {\n        var indices = util.checkIndices(matrix, rowIndices, columnIndices);\n        super(matrix, indices.row.length, indices.column.length);\n        this.rowIndices = indices.row;\n        this.columnIndices = indices.column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rowIndices[rowIndex], this.columnIndices[columnIndex], value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rowIndices[rowIndex], this.columnIndices[columnIndex]);\n    }\n}\n\nmodule.exports = MatrixSelectionView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixColumnView extends BaseView {\n    constructor(matrix, column) {\n        super(matrix, matrix.rows, 1);\n        this.column = column;\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.column, value);\n        return this;\n    }\n\n    get(rowIndex) {\n        return this.matrix.get(rowIndex, this.column);\n    }\n}\n\nmodule.exports = MatrixColumnView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipRowView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(this.rows - rowIndex - 1, columnIndex, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(this.rows - rowIndex - 1, columnIndex);\n    }\n}\n\nmodule.exports = MatrixFlipRowView;\n","'use strict';\n\nvar BaseView = require('./base');\n\nclass MatrixFlipColumnView extends BaseView {\n    constructor(matrix) {\n        super(matrix, matrix.rows, matrix.columns);\n    }\n\n    set(rowIndex, columnIndex, value) {\n        this.matrix.set(rowIndex, this.columns - columnIndex - 1, value);\n        return this;\n    }\n\n    get(rowIndex, columnIndex) {\n        return this.matrix.get(rowIndex, this.columns - columnIndex - 1);\n    }\n}\n\nmodule.exports = MatrixFlipColumnView;\n","'use strict';\n\nvar Matrix = require('./matrix').Matrix;\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.inverse = Matrix.inv = inverse;\n\n/**\n * Returns the inverse\n * @memberOf Matrix\n * @static\n * @param {Matrix} matrix\n * @return {Matrix} matrix\n * @alias inv\n */\nMatrix.prototype.inverse = Matrix.prototype.inv = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    leftHandSide = Matrix.checkMatrix(leftHandSide);\n    rightHandSide = Matrix.checkMatrix(rightHandSide);\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.solve = solve;\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n","'use strict';\n\nconst Matrix = require('../matrix').Matrix;\nconst util = require('./util');\nconst hypotenuse = util.hypotenuse;\nconst getFilled2DArray = util.getFilled2DArray;\n\nconst defaultOptions = {\n    assumeSymmetric: false\n};\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix, options) {\n    options = Object.assign({}, defaultOptions, options);\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix, options);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = getFilled2DArray(n, n, 0),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    var isSymmetric = false;\n    if (options.assumeSymmetric) {\n        isSymmetric = true;\n    } else {\n        isSymmetric = matrix.isSymmetric();\n    }\n\n    if (isSymmetric) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value.get(i, j);\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    } else {\n        var H = getFilled2DArray(n, n, 0),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value.get(i, j);\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        if (!Matrix.isMatrix(this.V)) {\n            this.V = new Matrix(this.V);\n        }\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            } else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    } else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m) {\n            throw new Error('Matrix row dimensions must agree');\n        }\n        if (!this.isFullRank()) {\n            throw new Error('Matrix is rank deficient');\n        }\n\n        var count = value.columns;\n        var X = value.clone();\n        var n = qr.columns;\n        var i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularMatrix() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalMatrix() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n","'use strict';\n\nvar Matrix = require('../matrix').Matrix;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric()) {\n        throw new Error('Matrix is not symmetric');\n    }\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get lowerTriangularMatrix() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n","'use strict';\n\nvar Opt = require('ml-optimize-lorentzian');\n\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nmodule.exports = function joinBroadPeaks(peakList, options = {}) {\n  var width = options.width;\n  var broadLines = [];\n  // Optimize the possible broad lines\n  var max = 0;\n\n  var maxI = 0;\n\n  var count = 1;\n  for (let i = peakList.length - 1; i >= 0; i--) {\n    if (peakList[i].soft) {\n      broadLines.push(peakList.splice(i, 1)[0]);\n    }\n  }\n  // Push a feke peak\n  broadLines.push({ x: Number.MAX_VALUE });\n\n  var candidates = [[broadLines[0].x, broadLines[0].y]];\n  var indexes = [0];\n\n  for (let i = 1; i < broadLines.length; i++) {\n    // console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n    if (Math.abs(broadLines[i - 1].x - broadLines[i].x) < width) {\n      candidates.push([broadLines[i].x, broadLines[i].y]);\n      if (broadLines[i].y > max) {\n        max = broadLines[i].y;\n        maxI = i;\n      }\n      indexes.push(i);\n      count++;\n    } else {\n      if (count > 2) {\n        var fitted = Opt.optimizeSingleLorentzian(candidates, {\n          x: broadLines[maxI].x,\n          y: max,\n          width: Math.abs(\n            candidates[0][0] - candidates[candidates.length - 1][0]\n          )\n        });\n        peakList.push({\n          x: fitted[0][0],\n          y: fitted[1][0],\n          width: fitted[2][0],\n          soft: false\n        });\n      } else {\n        // Put back the candidates to the signals list\n        indexes.forEach((index) => {\n          peakList.push(broadLines[index]);\n        });\n      }\n      candidates = [[broadLines[i].x, broadLines[i].y]];\n      indexes = [i];\n      max = broadLines[i].y;\n      maxI = i;\n      count = 1;\n    }\n  }\n\n  peakList.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return peakList;\n};\n","'use strict';\n\n/**\n * This method will allow to enlarge peaks and prevent overlap between peaks\n * Because peaks may not be symmetric after we add 2 properties, from and to.\n * @param {Array} peakList\n * @param {object} [options={}]\n * @param {number} [factor=2]\n * @param {boolean} [overlap=false] by default we don't allow overlap\n * @return {Array} peakList\n */\nmodule.exports = function broadenPeaks(peakList, options = {}) {\n  const { factor = 2, overlap = false } = options;\n\n  for (let peak of peakList) {\n    peak.from = peak.x - (peak.width / 2) * factor;\n    peak.to = peak.x + (peak.width / 2) * factor;\n  }\n\n  if (!overlap) {\n    for (let i = 0; i < peakList.length - 1; i++) {\n      let peak = peakList[i];\n      let nextPeak = peakList[i + 1];\n      if (peak.to > nextPeak.from) {\n        peak.to = nextPeak.from = (peak.to + nextPeak.from) / 2;\n      }\n    }\n  }\n\n  for (let peak of peakList) {\n    peak.width = peak.to - peak.from;\n  }\n\n  return peakList;\n};\n"],"sourceRoot":""}