{"version":3,"sources":["webpack:///ml-gsd/webpack/universalModuleDefinition","webpack:///ml-gsd/ml-gsd.min.js","webpack:///ml-gsd/webpack/bootstrap bed0b26f7d7ae95c651f","webpack:///ml-gsd/./src/index.js","webpack:///ml-gsd/./src/optimize.js","webpack:///ml-gsd/./~/ml-optimize-lorentzian/src/index.js","webpack:///ml-gsd/./~/ml-curve-fitting/src/index.js","webpack:///ml-gsd/./~/ml-curve-fitting/src/LM.js","webpack:///ml-gsd/./~/ml-matrix/src/index.js","webpack:///ml-gsd/./~/ml-matrix/src/matrix.js","webpack:///ml-gsd/./~/ml-matrix/src/decompositions.js","webpack:///ml-gsd/./~/ml-matrix/src/dc/svd.js","webpack:///ml-gsd/./~/ml-matrix/src/dc/util.js","webpack:///ml-gsd/./~/ml-matrix/src/dc/evd.js","webpack:///ml-gsd/./~/ml-matrix/src/dc/lu.js","webpack:///ml-gsd/./~/ml-matrix/src/dc/qr.js","webpack:///ml-gsd/./~/ml-matrix/src/dc/cholesky.js","webpack:///ml-gsd/./~/ml-curve-fitting/src/algebra.js","webpack:///ml-gsd/./src/gsd.js","webpack:///ml-gsd/./~/ml-stat/index.js","webpack:///ml-gsd/./~/ml-stat/array.js","webpack:///ml-gsd/./~/ml-stat/matrix.js","webpack:///ml-gsd/./~/extend/index.js","webpack:///ml-gsd/./~/ml-savitzky-golay-generalized/src/index.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","post","gsd","sampleFunction","from","to","x","y","lastIndex","nbPoints","length","sampleX","sampleY","direction","Math","sign","delta","abs","mid","stop","index","push","optimizePeaks","peakList","n","fnType","i","j","groups","groupPeaks","result","factor","peaks","group","sampling","limits","error","width","opts","optPeaks","Opt","optimizeGaussianSum","optimizeLorentzianSum","optPeak","optimizeSingleGaussian","optimizeSingleLorentzian","nL","upperLimit","lowerLimit","splice","joinBroadPeaks","options","broadLines","max","maxI","count","soft","Number","MAX_VALUE","candidates","indexes","fitted","map","sort","a","b","sumOfLorentzians","t","p2","cols","rows","Matrix","zeros","pow","singleLorentzian","columns","singleGaussian","factor2","exp","xy","peak","xy2","parseData","y_data","maxY","weight","sqrt","dot","Object","create","consts","dt","dx","p_init","p_min","p_max","p_fit","LM","optimize","math","Array","k","nbSeries","SizeException","algebra","func","y_dat","dp","tensor_parameter","iteration","eps","Npar","Npnt","p_old","y_old","X2","X2_old","J","console","log","length_t","length_y_dat","multiply","transpose","prnt","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","idx","Nfit","weight_sq","tmp","ones","dotMultiply","lm_matx","JtWJ","JtWdy","Chi_sq","y_hat","lambda","diag","nu","h","solve","add","eye","hidx","p_try","min","delta_y","subtract","X2_try","JtWdy_th","alpha","inv","mat","rho","dX2","apply","lm_FD_J","ps","clone","del","y1","column","dotDivide","lm_Broyden_J","h_t","div","Jt","Decompositions","DC","slice","arr","ii","nRows","nColumns","matrix","newInstance","isArray","TypeError","RangeError","defineProperty","writable","value","__proto__","prototype","Asplice","Aconcat","concat","from1DArray","newRows","newColumns","newData","data","rowVector","columnVector","l","vector","empty","fill","rand","jj","random","indices","stack","arg1","isMatrix","arguments","r","current","setRow","expand","base","expansion","checkMatrix","klass","get","checkRowIndex","checkColumnIndex","checkDimensions","otherMatrix","callback","to2DArray","to1DArray","copy","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","set","rowIndex","columnIndex","neg","mulS","addS","addM","sub","subS","subM","mul","mulM","divS","divM","getRow","getRowVector","array","removeRow","addRow","swapRows","row1","row2","temp","getColumn","getColumnVector","setColumn","removeColumn","addColumn","swapColumns","column1","column2","row","checkRowVector","checkColumnVector","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","v","Infinity","maxIndex","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","sum","mean","size","prod","cumulativeSum","other","vector1","vector2","mmul","warn","Bcolj","Arowi","s","sortRows","compareFunction","sortColumns","subMatrix","startRow","endRow","startColumn","endColumn","newMatrix","subMatrixRow","X","subMatrixColumn","trace","inverse","leftHandSide","rightHandSide","LuDecomposition","QrDecomposition","SingularValueDecomposition","EigenvalueDecomposition","CholeskyDecomposition","SVD","EVD","LU","QR","CHO","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","aux","ks","f","cs","sn","kase","scale","sp","spm1","epm1","sk","ek","shift","g","U","V","e","work","nct","nrt","hypotenuse","pp","iter","condition","norm2","rank","tol","diagonal","threshold","leftSingularVectors","rightSingularVectors","diagonalMatrix","Y","scols","Ls","VL","vrows","urows","VLU","solveForDiagonal","vcols","ucols","Error","d","tred2","tql2","H","ort","orthes","hqr2","hh","dl1","c2","c3","el1","s2","tst1","low","high","nn","w","ra","sa","vr","vi","notlast","cdivres","exshift","norm","q","z","cdiv","xr","xi","yr","yi","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","isSingular","col","determinant","lowerTriangularFactor","upperTriangularFactor","pivotPermutationVector","qr","rdiag","nrm","Rdiag","isFullRank","orthogonalFactor","dimension","positiveDefinite","Lrowj","Lrowk","L","leftTriangularFactor","B","A","dotPow","undefined","minMaxRatio","broadRatio","noiseLevel","noiseFactor","maxCriteria","smoothY","realTopDetection","sgOptions","extend","sgDefOptions","maxDx","minDx","getNoiseLevel","yCorrection","SG","windowSize","polynomial","derivative","dY","ddY","maxDdy","minddY","intervalL","intervalR","lastMax","lastMin","broadMask","possible","frequency","distanceJ","minDistance","gettingCloser","signals","lastK","stddev","averageDeviations","beta","gamma","currentPoint","log10","compareNumbers","values","minMax","arithmeticMean","geometricMean","logMean","lnsum","grandMean","means","samples","truncatedMean","percent","alreadySorted","floor","harmonicMean","contraHarmonicMean","r1","r2","median","half","variance","unbiased","theMean","theVariance","standardDeviation","standardError","quartiles","quart","q1","ceil","q2","q3","pooledStandardDeviation","pooledVariance","vari","mode","itemCount","itemArray","indexOf","maxValue","covariance","mean1","mean2","cov","skewness","s3","dev","m2","m3","kurtosis","s4","m4","entropy","weightedMean","weights","weightedStandardDeviation","weightedVariance","center","inPlace","standardize","standardDev","l1","l2","N","sum1","sum2","medians","modes","skew","kurt","standardDeviations","standardErrors","sqrtN","scatter","divisor","correlation","scores","zScores","cor","resultRow","sourceRow","isNaN","weightSum","arrayStat","weightedCovariance","s1","weightedScatter","hasOwn","hasOwnProperty","toStr","toString","isPlainObject","obj","hasOwnConstructor","hasIsPrototypeOf","constructor","key","name","src","copyIsArray","target","deep","SavitzkyGolay","defaultOptions","isInteger","np","ans","fullWeights","hs","constantH","wg1","wg2","d1","d2","getHs","wg","GramPoly","Grampoly","GenFact","gf","Weight"],"mappings":"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","file":"ml-gsd.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GSD\"] = factory();\n\telse\n\t\troot[\"GSD\"] = factory();\n})(this, function() {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"GSD\"] = factory();\n\telse\n\t\troot[\"GSD\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\n\tmodule.exports.post = __webpack_require__(1);\n\tmodule.exports.gsd = __webpack_require__(15);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 9/6/15.\n\t */\n\tvar Opt = __webpack_require__(2);\n\t\n\tfunction sampleFunction(from, to, x, y, lastIndex){\n\t    var nbPoints = x.length;\n\t    var sampleX = [];\n\t    var sampleY = [];\n\t    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n\t    if(direction==-1){\n\t        lastIndex[0]= x.length-1;\n\t    }\n\t\n\t    var delta = Math.abs(to-from)/2;\n\t    var mid = (from+to)/2;\n\t    var stop = false;\n\t    var index = lastIndex[0];\n\t    while(!stop&&index<nbPoints&&index>=0){\n\t        if(Math.abs(x[index]-mid)<=delta){\n\t            sampleX.push(x[index]);\n\t            sampleY.push(y[index]);\n\t            index+=direction;\n\t        }\n\t        //It is outside the range.\n\t        else{\n\t\n\t            if(Math.sign(mid-x[index])==1){\n\t                //We'll reach the mid going in the current direction\n\t                index+=direction;\n\t            }\n\t            else{\n\t                //There is not more peaks in the current range\n\t                stop=true;\n\t            }\n\t        }\n\t        //console.log(sampleX);\n\t    }\n\t    lastIndex[0]=index;\n\t    return [sampleX, sampleY];\n\t}\n\t\n\tfunction optimizePeaks(peakList,x,y,n, fnType){\n\t    var i, j, lastIndex=[0];\n\t    var groups = groupPeaks(peakList,n);\n\t    var result = [];\n\t    var factor = 1;\n\t    if(fnType==\"gaussian\")\n\t        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n\t    for(i=0;i<groups.length;i++){\n\t        var peaks = groups[i].group;\n\t        if(peaks.length>1){\n\t            //Multiple peaks\n\t            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n\t            //console.log(\"here1\");\n\t            //console.log(groups[i].limits);\n\t            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n\t            //console.log(sampling);\n\t            if(sampling[0].length>5){\n\t                var error = peaks[0].width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                var optPeaks = [];\n\t                if(fnType==\"gaussian\")\n\t                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                for(j=0;j<optPeaks.length;j++){\n\t                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n\t                }\n\t            }\n\t        }\n\t        else{\n\t            //Single peak\n\t            peaks = peaks[0];\n\t            var sampling = sampleFunction(peaks.x-n*peaks.width,\n\t                peaks.x+n*peaks.width,x,y,lastIndex);\n\t            //console.log(\"here2\");\n\t            //console.log(groups[i].limits);\n\t            if(sampling[0].length>5){\n\t                var error = peaks.width/1000;\n\t                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n\t                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n\t                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n\t                var optPeak = [];\n\t                if(fnType==\"gaussian\")\n\t                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n\t                else{\n\t                    if(fnType==\"lorentzian\"){\n\t                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n\t                    }\n\t                }\n\t                //console.log(optPeak);\n\t                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n\t            }\n\t        }\n\t\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction groupPeaks(peakList,nL){\n\t    var group = [];\n\t    var groups = [];\n\t    var i, j;\n\t    var limits = [peakList[0].x,nL*peakList[0].width];\n\t    var upperLimit, lowerLimit;\n\t    //Merge forward\n\t    for(i=0;i<peakList.length;i++){\n\t        //If the 2 things overlaps\n\t        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n\t            //Add the peak to the group\n\t            group.push(peakList[i]);\n\t            //Update the group limits\n\t            upperLimit = limits[0]+limits[1];\n\t            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n\t                upperLimit = peakList[i].x+nL*peakList[i].width;\n\t            }\n\t            lowerLimit = limits[0]-limits[1];\n\t            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n\t                lowerLimit = peakList[i].x-nL*peakList[i].width;\n\t            }\n\t            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t        }\n\t        else{\n\t            groups.push({limits:limits,group:group});\n\t            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n\t            group=[peakList[i]];\n\t            limits = [peakList[i].x,nL*peakList[i].width];\n\t        }\n\t    }\n\t    groups.push({limits:limits,group:group});\n\t    //Merge backward\n\t    for(i =groups.length-2;i>=0;i--){\n\t        //The groups overlaps\n\t        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n\t            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n\t            for(j=0;j<groups[i+1].group.length;j++){\n\t                groups[i].group.push(groups[i+1].group[j]);\n\t            }\n\t            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n\t            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n\t                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n\t            }\n\t            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n\t            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n\t                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n\t            }\n\t            //console.log(limits);\n\t            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\t\n\t            groups.splice(i+1,1);\n\t        }\n\t    }\n\t    return groups;\n\t}\n\t/**\n\t * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n\t * @param peakList\n\t * @param options\n\t */\n\tfunction joinBroadPeaks(peakList, options){\n\t    var width = options.width;\n\t    var broadLines=[];\n\t    //Optimize the possible broad lines\n\t    var max=0, maxI=0,count=1;\n\t    var isPartOf = false;\n\t    for(var i=peakList.length-1;i>=0;i--){\n\t        if(peakList[i].soft){\n\t            broadLines.push(peakList.splice(i,1)[0]);\n\t        }\n\t    }\n\t    //Push a feak peak\n\t    broadLines.push({x:Number.MAX_VALUE});\n\t\n\t    var candidates = [[broadLines[0].x,\n\t                        broadLines[0].y]];\n\t    var indexes = [0];\n\t\n\t    for(var i=1;i<broadLines.length;i++){\n\t        //console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n\t        if(Math.abs(broadLines[i-1].x-broadLines[i].x)<width){\n\t            candidates.push([broadLines[i].x,broadLines[i].y]);\n\t            if(broadLines[i].y>max){\n\t                max = broadLines[i].y;\n\t                maxI = i;\n\t            }\n\t            indexes.push(i);\n\t            count++;\n\t        }\n\t        else{\n\t            if(count>2){\n\t                var fitted =  Opt.optimizeSingleLorentzian(candidates,\n\t                    {x: broadLines[maxI].x, y:max, width: Math.abs(candidates[0][0]-candidates[candidates.length-1][0])});\n\t                //console.log(fitted)\n\t                peakList.push({x:fitted[0][0],y:fitted[1][0],width:fitted[2][0],soft:false});\n\t\n\t            }\n\t            else{\n\t                //Put back the candidates to the signals list\n\t                indexes.map(function(index){peakList.push(broadLines[index])});\n\t            }\n\t            candidates = [[broadLines[i].x,broadLines[i].y]];\n\t            indexes = [i];\n\t            max = broadLines[i].y;\n\t            maxI = i;\n\t            count = 1;\n\t        }\n\t    }\n\t\n\t    peakList.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t    return peakList;\n\t\n\t}\n\t\n\t/*if(options.broadRatio>0){\n\t var broadLines=[[Number.MAX_VALUE,0,0]];\n\t //Optimize the possible broad lines\n\t var max=0, maxI=0,count=0;\n\t var candidates = [],broadLinesS=[];\n\t var isPartOf = false;\n\t\n\t for(var i=broadLines.length-1;i>0;i--){\n\t //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n\t if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\t\n\t candidates.push(broadLines[i]);\n\t if(broadLines[i][1]>max){\n\t max = broadLines[i][1];\n\t maxI = i;\n\t }\n\t count++;\n\t }\n\t else{\n\t isPartOf = true;\n\t if(count>30){ // TODO, an options ?\n\t isPartOf = false;\n\t //for(var j=0;j<signals.length;j++){\n\t //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n\t //       isPartOf = true;\n\t //    }\n\t //console.log(\"Was part of \"+isPartOf);\n\t }\n\t if(isPartOf){\n\t for(var j=0;j<candidates.length;j++){\n\t signals.push([candidates[j][0], candidates[j][1], dx]);\n\t }\n\t }\n\t else{\n\t var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n\t width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n\t []);\n\t //console.log(fitted);\n\t signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n\t }\n\t candidates = [];\n\t max = 0;\n\t maxI = 0;\n\t count = 0;\n\t }\n\t }\n\t }*/\n\t\n\tmodule.exports={optimizePeaks:optimizePeaks,joinBroadPeaks:joinBroadPeaks};\n\t\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar LM = __webpack_require__(3);\n\tvar math = LM.Matrix.algebra;\n\tvar Matrix = __webpack_require__(5);\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfLorentzians(t,p,c){\n\t    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        p2 = Math.pow(p[i+nL*2][0]/2,2);\n\t        factor = p[i+nL][0]*p2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n\t * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction sumOfGaussians(t,p,c){\n\t    var nL = p.length/3,factor,i, j, cols = t.rows;\n\t    var result = Matrix.zeros(t.length,1);\n\t\n\t    for(i=0;i<nL;i++){\n\t        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n\t        for(j=0;j<cols;j++){\n\t            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t/**\n\t * Single 4 parameter lorentzian function\n\t * @param t Ordinate values\n\t * @param p Lorentzian parameters\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleLorentzian(t,p,c){\n\t    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Single 3 parameter gaussian function\n\t * @param t Ordinate values\n\t * @param p Gaussian parameters [mean, height, std]\n\t * @param c Constant parameters(Not used)\n\t * @returns {*}\n\t */\n\tfunction singleGaussian(t,p,c){\n\t    var factor2 = p[2][0]*p[2][0]/2;\n\t    var rows = t.rows;\n\t    var result = new Matrix(t.rows, t.columns);\n\t    for(var i=0;i<rows;i++){\n\t        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleLorentzian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];\n\t    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t\n\t    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t\n\t\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t\n\t}\n\t\n\t/**\n\t * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n\t * @param data,[y]\n\t * @returns {*[]}\n\t */\n\tfunction optimizeSingleGaussian(xy, peak, opts) {\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n\t    var consts = [ ];                         // optional vector of constants\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\t\n\t    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n\t    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n\t    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n\t    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\t    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n\t    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\t\n\t    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\t}\n\t\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeLorentzianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.columns, i;\n\t\n\t    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = 1;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n\t        p_min[i+nL][0] = 0;\n\t        p_min[i+2*nL][0] = group[i].width/4;\n\t\n\t        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n\t        p_max[i+nL][0] = 1.5;\n\t        p_max[i+2*nL][0] = group[i].width*4;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t\n\t    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n\t    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n\t    p_fit=p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t\n\t/**\n\t *\n\t * @param xy A two column matrix containing the x and y data to be fitted\n\t * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n\t * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n\t */\n\tfunction optimizeGaussianSum(xy, group, opts){\n\t    var xy2 = parseData(xy);\n\t    var t = xy2[0];\n\t    var y_data = xy2[1];\n\t    var maxY = xy2[2];\n\t    var nbPoints = t.rows,i;\n\t\n\t    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n\t    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n\t    for(i=0;i<nbPoints;i++){\n\t        weight[i][0]=k;///(y_data[i][0]);\n\t        //weight[i][0]=k*(2-y_data[i][0]);\n\t    }\n\t\n\t    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n\t    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n\t    var consts = [ ];// optional vector of constants\n\t\n\t    var nL = group.length;\n\t    var p_init = new Matrix(nL*3,1);\n\t    var p_min =  new Matrix(nL*3,1);\n\t    var p_max =  new Matrix(nL*3,1);\n\t    var dx = new Matrix(nL*3,1);\n\t    var dt = Math.abs(t[0][0]-t[1][0]);\n\t    for( i=0;i<nL;i++){\n\t        p_init[i][0] = group[i].x;\n\t        p_init[i+nL][0] = group[i].y/maxY;\n\t        p_init[i+2*nL][0] = group[i].width;\n\t\n\t        p_min[i][0] = group[i].x-dt;\n\t        p_min[i+nL][0] = group[i].y*0.8/maxY;\n\t        p_min[i+2*nL][0] = group[i].width/2;\n\t\n\t        p_max[i][0] = group[i].x+dt;\n\t        p_max[i+nL][0] = group[i].y*1.2/maxY;\n\t        p_max[i+2*nL][0] = group[i].width*2;\n\t\n\t        dx[i][0] = -dt/1000;\n\t        dx[i+nL][0] = -1e-3;\n\t        dx[i+2*nL][0] = -dt/1000;\n\t    }\n\t    //console.log(t);\n\t    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\t    p_fit = p_fit.p;\n\t    //Put back the result in the correct format\n\t    var result = new Array(nL);\n\t    for( i=0;i<nL;i++){\n\t        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n\t    }\n\t\n\t    return result;\n\t\n\t}\n\t/**\n\t *\n\t * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n\t * @param xy\n\t * @returns {*[]}\n\t */\n\tfunction parseData(xy){\n\t    var nbSeries = xy.length;\n\t    var t = null;\n\t    var y_data = null, x,y;\n\t    var maxY = 0, i,j;\n\t\n\t    if(nbSeries==2){\n\t        //Looks like row wise matrix [x,y]\n\t        var nbPoints = xy[0].length;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else{\n\t            t = new Matrix(nbPoints,1);\n\t            y_data = new Matrix(nbPoints,1);\n\t            x = xy[0];\n\t            y = xy[1];\n\t            if(typeof x[0] === \"number\"){\n\t                for(i=0;i<nbPoints;i++){\n\t                    t[i][0]=x[i];\n\t                    y_data[i][0]=y[i];\n\t                    if(y[i]>maxY)\n\t                        maxY = y[i];\n\t                }\n\t            }\n\t            else{\n\t                //It is a colum matrix\n\t                if(typeof x[0] === \"object\"){\n\t                    for(i=0;i<nbPoints;i++){\n\t                        t[i][0]=x[i][0];\n\t                        y_data[i][0]=y[i][0];\n\t                        if(y[i][0]>maxY)\n\t                            maxY = y[i][0];\n\t                    }\n\t                }\n\t\n\t            }\n\t\n\t        }\n\t    }\n\t    else{\n\t        //Looks like a column wise matrix [[x],[y]]\n\t        var nbPoints = nbSeries;\n\t        if(nbPoints<3)\n\t            throw new SizeException(nbPoints);\n\t        else {\n\t            t = new Matrix(nbPoints, 1);\n\t            y_data = new Matrix(nbPoints, 1);\n\t            for (i = 0; i < nbPoints; i++) {\n\t                t[i][0] = xy[i][0];\n\t                y_data[i][0] = xy[i][1];\n\t                if(y_data[i][0]>maxY)\n\t                    maxY = y_data[i][0];\n\t            }\n\t        }\n\t    }\n\t    for (i = 0; i < nbPoints; i++) {\n\t        y_data[i][0]/=maxY;\n\t    }\n\t    return [t,y_data,maxY];\n\t}\n\t\n\tfunction sizeException(nbPoints) {\n\t    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n\t}\n\t\n\tmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\n\tmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\n\tmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\n\tmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\n\tmodule.exports.singleGaussian = singleGaussian;\n\tmodule.exports.singleLorentzian = singleLorentzian;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(4);\n\tmodule.exports.Matrix = __webpack_require__(5);\n\tmodule.exports.Matrix.algebra = __webpack_require__(14);\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/5/15.\n\t */\n\tvar Matrix = __webpack_require__(5);\n\tvar math = __webpack_require__(14);\n\t\n\tvar DEBUG = false;\n\t/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n\t ----------  INPUT  VARIABLES  -----------\n\t func   = function of n independent variables, 't', and m parameters, 'p',\n\t returning the simulated model: y_hat = func(t,p,c)\n\t p      = n-vector of initial guess of parameter values\n\t t      = m-vectors or matrix of independent variables (used as arg to func)\n\t y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n\t weight = weighting vector for least squares fit ( weight >= 0 ) ...\n\t inverse of the standard measurement errors\n\t Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n\t dp     = fractional increment of 'p' for numerical derivatives\n\t dp(j)>0 central differences calculated\n\t dp(j)<0 one sided 'backwards' differences calculated\n\t dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t Default:  0.001;\n\t p_min  = n-vector of lower bounds for parameter values\n\t p_max  = n-vector of upper bounds for parameter values\n\t c      = an optional matrix of values passed to func(t,p,c)\n\t opts   = vector of algorithmic parameters\n\t parameter    defaults    meaning\n\t opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n\t opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n\t opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n\t opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n\t opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n\t opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n\t opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n\t opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n\t opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n\t opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n\t 2: Quadratic update\n\t 3: Nielsen's lambda update equations\n\t\n\t ----------  OUTPUT  VARIABLES  -----------\n\t p       = least-squares optimal estimate of the parameter values\n\t X2      = Chi squared criteria\n\t sigma_p = asymptotic standard error of the parameters\n\t sigma_y = asymptotic standard error of the curve-fit\n\t corr    = correlation matrix of the parameters\n\t R_sq    = R-squared cofficient of multiple determination\n\t cvg_hst = convergence history\n\t\n\t Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n\t modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n\t using references by\n\t Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n\t Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n\t Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n\t Mathworks        optimization toolbox reference manual\n\t K. Madsen, H.B., Nielsen, and O. Tingleff\n\t http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n\t */\n\tvar LM = {\n\t\n\t    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\t\n\t        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\t\n\t        var iteration  = 0;\t\t\t// iteration counter\n\t        //func_calls = 0;\t\t\t// running count of function evaluations\n\t\n\t        if((typeof p[0])!=\"object\"){\n\t            for(var i=0;i< p.length;i++){\n\t                p[i]=[p[i]];\n\t            }\n\t\n\t        }\n\t        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n\t        var i,k;\n\t        var eps = 2^-52;\n\t        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n\t        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n\t        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n\t        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n\t        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n\t        var J =  Matrix.zeros(Npnt,Npar);\n\t\n\t\n\t        if (t.length != y_dat.length) {\n\t            console.log('lm.m error: the length of t must equal the length of y_dat');\n\t\n\t            length_t = t.length;\n\t            length_y_dat = y_dat.length;\n\t            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n\t            if (!tensor_parameter) {\n\t                return;\n\t            }\n\t        }\n\t\n\t        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n\t        dp = dp || 0.001;\n\t        p_min   = p_min || math.multiply(Math.abs(p),-100);\n\t        p_max   = p_max || math.multiply(Math.abs(p),100);\n\t        c = c || 1;\n\t        // Algorithmic Paramters\n\t        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n\t        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\t\n\t        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n\t        var MaxIter       = opts[1];\t// maximum number of iterations\n\t        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n\t        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n\t        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n\t        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n\t        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n\t        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n\t        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n\t        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n\t        // 2: Quadratic update\n\t        // 3: Nielsen's lambda update equations\n\t\n\t        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\t\n\t\n\t        if(!dp.length || dp.length == 1){\n\t            var dp_array = new Array(Npar);\n\t            for(var i=0;i<Npar;i++)\n\t                dp_array[i]=[dp];\n\t            dp=dp_array;\n\t        }\n\t\n\t        // indices of the parameters to be fit\n\t        var idx   = [];\n\t        for(i=0;i<dp.length;i++){\n\t            if(dp[i][0]!=0){\n\t                idx.push(i);\n\t            }\n\t        }\n\t\n\t        var Nfit = idx.length;\t\t\t// number of parameters to fit\n\t        var stop = false;\t\t\t\t// termination flag\n\t\n\t        var weight_sq = null;\n\t        //console.log(weight);\n\t        if ( !weight.length || weight.length < Npnt )\t{\n\t            // squared weighting vector\n\t            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n\t            //console.log(\"weight[0] \"+typeof weight[0]);\n\t            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n\t            weight_sq = math.dotMultiply(tmp,tmp);\n\t        }\n\t        else{\n\t            //weight_sq = (weight(:)).^2;\n\t            weight_sq = math.dotMultiply(weight,weight);\n\t        }\n\t\n\t\n\t        // initialize Jacobian with finite difference calculation\n\t        //console.log(\"J \"+weight_sq);\n\t        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n\t        //console.log(JtWJ);\n\t\n\t        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n\t            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n\t            console.log(' *** epsilon_1 = ', epsilon_1);\n\t            stop = true;\n\t        }\n\t\n\t\n\t        switch(Update_Type){\n\t            case 1: // Marquardt: init'l lambda\n\t                lambda  = lambda_0;\n\t                break;\n\t            default:    // Quadratic and Nielsen\n\t                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n\t                nu=2;\n\t        }\n\t        //console.log(X2);\n\t        X2_old = X2; // previous value of X2\n\t        //console.log(MaxIter+\" \"+Npar);\n\t        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n\t        var h = null;\n\t        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n\t            iteration = iteration + 1;\n\t            // incremental change in parameters\n\t            switch(Update_Type){\n\t                case 1:\t\t\t\t\t// Marquardt\n\t                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n\t                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n\t                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n\t                    break;\n\t                default:\t\t\t\t\t// Quadratic and Nielsen\n\t                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\t\n\t                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n\t            }\n\t\n\t            /*for(var k=0;k< h.length;k++){\n\t             h[k]=[h[k]];\n\t             }*/\n\t            //console.log(\"h \"+h);\n\t            //h=math.matrix(h);\n\t            //  big = max(abs(h./p)) > 2;\n\t            //this is a big step\n\t            // --- Are parameters [p+h] much better than [p] ?\n\t            var hidx = new Array(idx.length);\n\t            for(k=0;k<idx.length;k++){\n\t                hidx[k]=h[idx[k]];\n\t            }\n\t            var p_try = math.add(p, hidx);// update the [idx] elements\n\t\n\t            for(k=0;k<p_try.length;k++){\n\t                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n\t            }\n\t            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\t\n\t            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n\t            //func_calls = func_calls + 1;\n\t            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\t\n\t            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t\n\t            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n\t                //    One step of quadratic line update in the h direction for minimum X2\n\t                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n\t                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\t\n\t                h = math.multiply(alpha, h);\n\t                for(var k=0;k<idx.length;k++){\n\t                    hidx[k]=h[idx[k]];\n\t                }\n\t\n\t                p_try = math.add(p ,hidx);                     // update only [idx] elements\n\t                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\t\n\t                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n\t                // func_calls = func_calls + 1;\n\t                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n\t                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n\t            }\n\t\n\t            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n\t            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n\t            //console.log(\"rho \"+rho);\n\t            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n\t                //console.log(\"Here\");\n\t                dX2 = X2 - X2_old;\n\t                X2_old = X2;\n\t                p_old = p;\n\t                y_old = y_hat;\n\t                p = p_try;\t\t\t// accept p_try\n\t\n\t                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n\t                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                // decrease lambda ==> Gauss-Newton method\n\t\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t\t// Nielsen\n\t                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n\t                        nu = 2;\n\t                        break;\n\t                }\n\t            }\n\t            else {\t\t\t\t\t// it IS NOT better\n\t                X2 = X2_old;\t\t\t// do not accept p_try\n\t                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n\t                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n\t                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t                }\n\t\n\t                // increase lambda  ==> gradient descent method\n\t                switch (Update_Type) {\n\t                    case 1:\t\t\t\t\t\t\t// Levenberg\n\t                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n\t                        break;\n\t                    case 2:\t\t\t\t\t\t\t// Quadratic\n\t                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n\t                        break;\n\t                    case 3:\t\t\t\t\t\t// Nielsen\n\t                        lambda = lambda * nu;\n\t                        nu = 2 * nu;\n\t                        break;\n\t                }\n\t            }\n\t        }// --- End of Main Loop\n\t\n\t        // --- convergence achieved, find covariance and confidence intervals\n\t\n\t        // equal weights for paramter error analysis\n\t        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\t\n\t        weight_sq.apply(function(i,j){\n\t            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n\t        });\n\t        //console.log(weight_sq);\n\t        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n\t        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\t\n\t        /*if nargout > 2\t\t\t\t// standard error of parameters\n\t         covar = inv(JtWJ);\n\t         sigma_p = sqrt(diag(covar));\n\t         end\n\t\n\t         if nargout > 3\t\t\t\t// standard error of the fit\n\t         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n\t         sigma_y = zeros(Npnt,1);\n\t         for i=1:Npnt\n\t         sigma_y(i) = J(i,:) * covar * J(i,:)';\n\t         end\n\t         sigma_y = sqrt(sigma_y);\n\t         end\n\t\n\t         if nargout > 4\t\t\t\t// parameter correlation matrix\n\t         corr = covar ./ [sigma_p*sigma_p'];\n\t         end\n\t\n\t         if nargout > 5\t\t\t\t// coefficient of multiple determination\n\t         R_sq = corrcoef([y_dat y_hat]);\n\t         R_sq = R_sq(1,2).^2;\n\t         end\n\t\n\t         if nargout > 6\t\t\t\t// convergence history\n\t         cvg_hst = cvg_hst(1:iteration,:);\n\t         end*/\n\t\n\t        // endfunction  # ---------------------------------------------------------- LM\n\t\n\t        return { p:p, X2:X2};\n\t    },\n\t\n\t    lm_FD_J:function(func,t,p,y,dp,c) {\n\t        // J = lm_FD_J(func,t,p,y,{dp},{c})\n\t        //\n\t        // partial derivatives (Jacobian) dy/dp for use with lm.m\n\t        // computed via Finite Differences\n\t        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n\t        // -------- INPUT VARIABLES ---------\n\t        // func = function of independent variables, 't', and parameters, 'p',\n\t        //        returning the simulated model: y_hat = func(t,p,c)\n\t        // t  = m-vector of independent variables (used as arg to func)\n\t        // p  = n-vector of current parameter values\n\t        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n\t        // dp = fractional increment of p for numerical derivatives\n\t        //      dp(j)>0 central differences calculated\n\t        //      dp(j)<0 one sided differences calculated\n\t        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //      Default:  0.001;\n\t        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t        var m = y.length;\t\t\t// number of data points\n\t        var n = p.length;\t\t\t// number of parameters\n\t\n\t        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\t\n\t        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n\t        //var ps = $.extend(true, [], p);\n\t        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\t\n\t        for (var j = 0;j < n; j++) {\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n\t            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n\t            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\t\n\t            if (del[j] != 0){\n\t                y1 = func(t, p, c);\n\t                //func_calls = func_calls + 1;\n\t                if (dp[j][0] < 0) {\t\t// backwards difference\n\t                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n\t                    //console.log(del[j]);\n\t                    //console.log(y);\n\t                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t                    //console.log(column);\n\t                }\n\t                else{\n\t                    p[j][0] = ps[j][0] - del[j];\n\t                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n\t                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n\t                    for(var k=0;k< m;k++){\n\t                        J[k][j]=column[k][0];\n\t                    }\n\t\n\t                }\t\t\t// central difference, additional func call\n\t            }\n\t\n\t            p[j] = ps[j];\t\t// restore p(j)\n\t\n\t        }\n\t        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n\t        return J;\n\t\n\t    },\n\t\n\t    // endfunction # -------------------------------------------------- LM_FD_J\n\t    lm_Broyden_J: function(p_old,y_old,J,p,y){\n\t        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n\t        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n\t        //---------- INPUT VARIABLES -------\n\t        // p_old = previous set of parameters\n\t        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n\t        // J  = current version of the Jacobian matrix\n\t        // p     = current  set of parameters\n\t        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\t        //console.log(p+\" X \"+ p_old)\n\t        var h  = math.subtract(p, p_old);\n\t\n\t        //console.log(\"hhh \"+h);\n\t        var h_t = math.transpose(h);\n\t        h_t.div(math.multiply(h_t,h));\n\t\n\t        //console.log(h_t);\n\t        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n\t        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n\t        return J;\n\t        // endfunction # ---------------------------------------------- LM_Broyden_J\n\t    },\n\t\n\t    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n\t        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n\t        //\n\t        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n\t        // and calculate the Chi-squared error function, Chi_sq\n\t        // Used by Levenberg-Marquard algorithm, lm.m\n\t        // -------- INPUT VARIABLES ---------\n\t        // func   = function ofpn independent variables, p, and m parameters, p,\n\t        //         returning the simulated model: y_hat = func(t,p,c)\n\t        // t      = m-vectors or matrix of independent variables (used as arg to func)\n\t        // p_old  = n-vector of previous parameter values\n\t        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n\t        // dX2    = previous change in Chi-squared criteria\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t        // p      = n-vector of current  parameter values\n\t        // y_dat  = n-vector of data to be fit by func(t,p,c)\n\t        // weight_sq = square of the weighting vector for least squares fit ...\n\t        //\t    inverse of the standard measurement errors\n\t        // dp     = fractional increment of 'p' for numerical derivatives\n\t        //          dp(j)>0 central differences calculated\n\t        //          dp(j)<0 one sided differences calculated\n\t        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n\t        //          Default:  0.001;\n\t        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n\t        //---------- OUTPUT VARIABLES -------\n\t        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n\t        // JtWdy   = linearized fitting vector\n\t        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n\t        // y_hat  = model evaluated with parameters 'p'\n\t        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\t\n\t        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n\t        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n\t        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\t\n\t\n\t        var Npnt = y_dat.length;\t\t// number of data points\n\t        var Npar = p.length;\t\t// number of parameters\n\t\n\t        dp = dp || 0.001;\n\t\n\t\n\t        //var JtWJ = new Matrix.zeros(Npar);\n\t        //var JtWdy  = new Matrix.zeros(Npar,1);\n\t\n\t        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n\t        //func_calls = func_calls + 1;\n\t        //console.log(J);\n\t        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n\t            //console.log(\"Par\");\n\t            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n\t        }\n\t        else{\n\t            //console.log(\"ImPar\");\n\t            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n\t        }\n\t        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n\t        //console.log(delta_y[0][0]);\n\t        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n\t        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n\t        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\t        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n\t        var Jt = math.transpose(J);\n\t\n\t        //console.log(weight_sq);\n\t\n\t        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\t\n\t        //JtWdy = J' * ( weight_sq .* delta_y );\n\t        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\t\n\t\n\t        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n\t        // endfunction  # ------------------------------------------------------ LM_MATX\n\t    }\n\t\n\t\n\t\n\t};\n\t\n\tmodule.exports = LM;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tmodule.exports = __webpack_require__(6);\n\tmodule.exports.Decompositions = module.exports.DC = __webpack_require__(7);\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar Asplice = Array.prototype.splice,\n\t    Aconcat = Array.prototype.concat;\n\t\n\t// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\n\tfunction slice(arr) {\n\t    var i = 0,\n\t        ii = arr.length,\n\t        result = new Array(ii);\n\t    for (; i < ii; i++) {\n\t        result[i] = arr[i];\n\t    }\n\t    return result;\n\t}\n\t\n\t/**\n\t * Real matrix.\n\t * @constructor\n\t * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n\t * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n\t */\n\tfunction Matrix(nRows, nColumns) {\n\t    var i = 0, rows, columns, matrix, newInstance;\n\t    if (Array.isArray(nRows)) {\n\t        newInstance = nColumns;\n\t        matrix = newInstance ? slice(nRows) : nRows;\n\t        nRows = matrix.length;\n\t        nColumns = matrix[0].length;\n\t        if (typeof nColumns === 'undefined') {\n\t            throw new TypeError('Data must be a 2D array');\n\t        }\n\t        if (nRows > 0 && nColumns > 0) {\n\t            for (; i < nRows; i++) {\n\t                if (matrix[i].length !== nColumns) {\n\t                    throw new RangeError('Inconsistent array dimensions');\n\t                } else if (newInstance) {\n\t                    matrix[i] = slice(matrix[i]);\n\t                }\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else if (typeof nRows === 'number') { // Create empty matrix\n\t        if (nRows > 0 && nColumns > 0) {\n\t            matrix = new Array(nRows);\n\t            for (; i < nRows; i++) {\n\t                matrix[i] = new Array(nColumns);\n\t            }\n\t        } else {\n\t            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n\t        }\n\t    } else {\n\t        throw new TypeError('Invalid arguments');\n\t    }\n\t\n\t    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n\t    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\t\n\t    matrix.__proto__ = Matrix.prototype;\n\t\n\t    return matrix;\n\t}\n\t\n\t/**\n\t * Constructs a Matrix with the chosen dimensions from a 1D array.\n\t * @param {number} newRows - Number of rows\n\t * @param {number} newColumns - Number of columns\n\t * @param {Array} newData - A 1D array containing data for the matrix\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n\t    var length, data, i = 0;\n\t\n\t    length = newRows * newColumns;\n\t    if (length !== newData.length)\n\t        throw new RangeError('Data length does not match given dimensions');\n\t\n\t    data = new Array(newRows);\n\t    for (; i < newRows; i++) {\n\t        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n\t    }\n\t    return new Matrix(data);\n\t};\n\t\n\t/**\n\t * Creates a row vector, a matrix with only one row.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.rowVector = function rowVector(newData) {\n\t    return new Matrix([newData]);\n\t};\n\t\n\t/**\n\t * Creates a column vector, a matrix with only one column.\n\t * @param {Array} newData - A 1D array containing data for the vector\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.columnVector = function columnVector(newData) {\n\t    var l = newData.length, vector = new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        vector[i] = [newData[i]];\n\t    return new Matrix(vector);\n\t};\n\t\n\t/**\n\t * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.empty = function empty(rows, columns) {\n\t    return new Matrix(rows, columns);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to zero.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.zeros = function zeros(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(0);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be set to one.\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.ones = function ones(rows, columns) {\n\t    return Matrix.empty(rows, columns).fill(1);\n\t};\n\t\n\t/**\n\t * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n\t * @param {number} rows - Number of rows\n\t * @param {number} columns - Number of columns\n\t * @returns {Matrix} The new matrix\n\t */\n\tMatrix.rand = function rand(rows, columns) {\n\t    var matrix = Matrix.empty(rows, columns);\n\t    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n\t        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n\t            matrix[i][j] = Math.random();\n\t        }\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n\t * @param {number} n - Number of rows and columns\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.eye = function eye(n) {\n\t    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = 1;\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates a diagonal matrix based on the given array.\n\t * @param {Array} data - Array containing the data for the diagonal\n\t * @returns {Matrix} - The new matrix\n\t */\n\tMatrix.diag = function diag(data) {\n\t    var l = data.length, matrix = Matrix.zeros(l, l);\n\t    for (var i = 0; i < l; i++) {\n\t        matrix[i][i] = data[i];\n\t    }\n\t    return matrix;\n\t};\n\t\n\t/**\n\t * Creates an array of indices between two values\n\t * @param {number} from\n\t * @param {number} to\n\t * @returns {Array}\n\t */\n\tMatrix.indices = function indices(from, to) {\n\t    var vector = new Array(to - from);\n\t    for (var i = 0; i < vector.length; i++)\n\t        vector[i] = from++;\n\t    return vector;\n\t};\n\t\n\t// TODO DOC\n\tMatrix.stack = function stack(arg1) {\n\t    var i, j, k;\n\t    if (Matrix.isMatrix(arg1)) {\n\t        var rows = 0,\n\t            cols = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            rows += arguments[i].rows;\n\t            if (arguments[i].columns > cols)\n\t                cols = arguments[i].columns;\n\t        }\n\t\n\t        var r = Matrix.zeros(rows, cols);\n\t        var c = 0;\n\t        for (i = 0; i < arguments.length; i++) {\n\t            var current = arguments[i];\n\t            for (j = 0; j < current.rows; j++) {\n\t                for (k = 0; k < current.columns; k++)\n\t                    r[c][k] = current[j][k];\n\t                c++;\n\t            }\n\t        }\n\t        return r;\n\t    }\n\t    else if (Array.isArray(arg1)) {\n\t        var matrix = Matrix.empty(arguments.length, arg1.length);\n\t        for (i = 0; i < arguments.length; i++)\n\t            matrix.setRow(i, arguments[i]);\n\t        return matrix;\n\t    }\n\t};\n\t\n\t// TODO DOC\n\tMatrix.expand = function expand(base, count) {\n\t    var expansion = [];\n\t    for (var i = 0; i < count.length; i++)\n\t        for (var j = 0; j < count[i]; j++)\n\t            expansion.push(base[i]);\n\t    return new Matrix(expansion);\n\t};\n\t\n\t/**\n\t * Check that the provided value is a Matrix and tries to instantiate one if not\n\t * @param value - The value to check\n\t * @returns {Matrix}\n\t * @throws {TypeError}\n\t */\n\tMatrix.checkMatrix = function checkMatrix(value) {\n\t    if (!value) {\n\t        throw new TypeError('Argument has to be a matrix');\n\t    }\n\t    if (value.klass !== 'Matrix') {\n\t        value = new Matrix(value);\n\t    }\n\t    return value;\n\t};\n\t\n\t/**\n\t * Returns true if the argument is a Matrix, false otherwise\n\t * @param value - The value to check\n\t * @returns {boolean}\n\t */\n\tMatrix.isMatrix = function isMatrix(value) {\n\t    return value ? value.klass === 'Matrix' : false;\n\t};\n\t\n\t/**\n\t * @property {string} - The name of this class.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'klass', {\n\t    get: function klass() {\n\t        return 'Matrix';\n\t    }\n\t});\n\t\n\t/**\n\t * @property {number} - The number of elements in the matrix.\n\t */\n\tObject.defineProperty(Matrix.prototype, 'size', {\n\t    get: function size() {\n\t        return this.rows * this.columns;\n\t    }\n\t});\n\t\n\t/**\n\t * @private\n\t * Internal check that a row index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n\t    if (index < 0 || index > this.rows - 1)\n\t        throw new RangeError('Row index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that a column index is not out of bounds\n\t * @param {number} index\n\t */\n\tMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n\t    if (index < 0 || index > this.columns - 1)\n\t        throw new RangeError('Column index out of range.');\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that two matrices have the same dimensions\n\t * @param {Matrix} otherMatrix\n\t */\n\tMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n\t    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n\t        throw new RangeError('Matrices dimensions must be equal.');\n\t};\n\t\n\t/**\n\t * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n\t * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.apply = function apply(callback) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            callback.call(this, i, j);\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Creates an exact and independent copy of the matrix\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.clone = function clone() {\n\t    return new Matrix(this.to2DArray());\n\t};\n\t\n\t/**\n\t * Returns a new 1D array filled row by row with the matrix values\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to1DArray = function to1DArray() {\n\t    return Aconcat.apply([], this);\n\t};\n\t\n\t/**\n\t * Returns a 2D array containing a copy of the data\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.to2DArray = function to2DArray() {\n\t    var l = this.rows, copy = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        copy[i] = slice(this[i]);\n\t    }\n\t    return copy;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row\n\t */\n\tMatrix.prototype.isRowVector = function isRowVector() {\n\t    return this.rows === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one column\n\t */\n\tMatrix.prototype.isColumnVector = function isColumnVector() {\n\t    return this.columns === 1;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has one row or one column\n\t */\n\tMatrix.prototype.isVector = function isVector() {\n\t    return (this.rows === 1) || (this.columns === 1);\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix has the same number of rows and columns\n\t */\n\tMatrix.prototype.isSquare = function isSquare() {\n\t    return this.rows === this.columns;\n\t};\n\t\n\t/**\n\t * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n\t */\n\tMatrix.prototype.isSymmetric = function isSymmetric() {\n\t    if (this.isSquare()) {\n\t        var l = this.rows;\n\t        for (var i = 0; i < l; i++) {\n\t            for (var j = 0; j <= i; j++) {\n\t                if (this[i][j] !== this[j][i]) {\n\t                    return false;\n\t                }\n\t            }\n\t        }\n\t        return true;\n\t    }\n\t    return false;\n\t};\n\t\n\t/**\n\t * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @param {number} value - The new value for the element\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n\t    this[rowIndex][columnIndex] = value;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n\t * @param {number} rowIndex - Index of the row\n\t * @param {number} columnIndex - Index of the column\n\t * @returns {number}\n\t */\n\tMatrix.prototype.get = function get(rowIndex, columnIndex) {\n\t    return this[rowIndex][columnIndex];\n\t};\n\t\n\t/**\n\t * Fills the matrix with a given value. All elements will be set to this value.\n\t * @param {number} value - New value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.fill = function fill(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Negates the matrix. All elements will be multiplied by (-1)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.neg = function neg() {\n\t    return this.mulS(-1);\n\t};\n\t\n\t/**\n\t * Adds a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.add = function add(value) {\n\t    if (typeof value === 'number')\n\t        return this.addS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.addM(value);\n\t};\n\t\n\t/**\n\t * Adds a scalar to each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addS = function addS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the value of each element of matrix to the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addM = function addM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sub = function sub(value) {\n\t    if (typeof value === 'number')\n\t        return this.subS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.subM(value);\n\t};\n\t\n\t/**\n\t * Subtracts a scalar from each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subS = function subS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the value of each element of matrix from the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subM = function subM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mul = function mul(value) {\n\t    if (typeof value === 'number')\n\t        return this.mulS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.mulM(value);\n\t};\n\t\n\t/**\n\t * Multiplies a scalar with each element of the matrix\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulS = function mulS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the value of each element of matrix with the corresponding element of this\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulM = function mulM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides by a scalar or values from another matrix (in place)\n\t * @param {number|Matrix} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.div = function div(value) {\n\t    if (typeof value === 'number')\n\t        return this.divS(value);\n\t    value = Matrix.checkMatrix(value);\n\t        return this.divM(value);\n\t};\n\t\n\t/**\n\t * Divides each element of the matrix by a scalar\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divS = function divS(value) {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= value;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides each element of this by the corresponding element of matrix\n\t * @param {Matrix} matrix\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divM = function divM(matrix) {\n\t    this.checkDimensions(matrix);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= matrix[i][j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getRow = function getRow(index) {\n\t    this.checkRowIndex(index);\n\t    return slice(this[index]);\n\t};\n\t\n\t/**\n\t * Returns a new row vector from the given row index\n\t * @param {number} index - Row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getRowVector = function getRowVector(index) {\n\t    return Matrix.rowVector(this.getRow(index));\n\t};\n\t\n\t/**\n\t * Sets a row at the given index\n\t * @param {number} index - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setRow = function setRow(index, array) {\n\t    this.checkRowIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    this[index] = slice(array);\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a row from the given index\n\t * @param {number} index - Row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeRow = function removeRow(index) {\n\t    this.checkRowIndex(index);\n\t    if (this.rows === 1)\n\t        throw new RangeError('A matrix cannot have less than one row');\n\t    Asplice.call(this, index, 1);\n\t    this.rows -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a row at the given index\n\t * @param {number} [index = this.rows] - Row index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRow = function addRow(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.rows;\n\t    }\n\t    if (index < 0 || index > this.rows)\n\t        throw new RangeError('Row index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    if (array.length !== this.columns)\n\t        throw new RangeError('Invalid row size');\n\t    Asplice.call(this, index, 0, slice(array));\n\t    this.rows += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two rows\n\t * @param {number} row1 - First row index\n\t * @param {number} row2 - Second row index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapRows = function swapRows(row1, row2) {\n\t    this.checkRowIndex(row1);\n\t    this.checkRowIndex(row2);\n\t    var temp = this[row1];\n\t    this[row1] = this[row2];\n\t    this[row2] = temp;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Returns a new array from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.getColumn = function getColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var l = this.rows, column = new Array(l);\n\t    for (var i = 0; i < l; i++) {\n\t        column[i] = this[i][index];\n\t    }\n\t    return column;\n\t};\n\t\n\t/**\n\t * Returns a new column vector from the given column index\n\t * @param {number} index - Column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.getColumnVector = function getColumnVector(index) {\n\t    return Matrix.columnVector(this.getColumn(index));\n\t};\n\t\n\t/**\n\t * Sets a column at the given index\n\t * @param {number} index - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.setColumn = function setColumn(index, array) {\n\t    this.checkColumnIndex(index);\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i][index] = array[i];\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Removes a column from the given index\n\t * @param {number} index - Column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.removeColumn = function removeColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    if (this.columns === 1)\n\t        throw new RangeError('A matrix cannot have less than one column');\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].splice(index, 1);\n\t    }\n\t    this.columns -= 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds a column at the given index\n\t * @param {number} [index = this.columns] - Column index\n\t * @param {Array|Matrix} array - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumn = function addColumn(index, array) {\n\t    if (typeof array === 'undefined') {\n\t        array = index;\n\t        index = this.columns;\n\t    }\n\t    if (index < 0 || index > this.columns)\n\t        throw new RangeError('Column index out of range.');\n\t    if (Matrix.isMatrix(array)) array = array.to1DArray();\n\t    var l = this.rows;\n\t    if (array.length !== l)\n\t        throw new RangeError('Invalid column size');\n\t    for (var i = 0; i < l; i++) {\n\t        this[i].splice(index, 0, array[i]);\n\t    }\n\t    this.columns += 1;\n\t    return this;\n\t};\n\t\n\t/**\n\t * Swaps two columns\n\t * @param {number} column1 - First column index\n\t * @param {number} column2 - Second column index\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n\t    this.checkRowIndex(column1);\n\t    this.checkRowIndex(column2);\n\t    var l = this.rows, temp, row;\n\t    for (var i = 0; i < l; i++) {\n\t        row = this[i];\n\t        temp = row[column1];\n\t        row[column1] = row[column2];\n\t        row[column2] = temp;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.columns)\n\t        throw new RangeError('vector size must be the same as the number of columns');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * @private\n\t * Internal check that the provided vector is an array with the right length\n\t * @param {Array|Matrix} vector\n\t * @returns {Array}\n\t * @throws {RangeError}\n\t */\n\tMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n\t    if (Matrix.isMatrix(vector))\n\t        vector = vector.to1DArray();\n\t    if (vector.length !== this.rows)\n\t        throw new RangeError('vector size must be the same as the number of rows');\n\t    return vector;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addRowVector = function addRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subRowVector = function subRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each row\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each row by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divRowVector = function divRowVector(vector) {\n\t    vector = this.checkRowVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[j];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Adds the values of a vector to each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] += vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Subtracts the values of a vector from each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] -= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a vector with each column\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] *= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Divides the values of each column by those of a vector\n\t * @param {Array|Matrix} vector - Array or vector\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n\t    vector = this.checkColumnVector(vector);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] /= vector[i];\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a row with a scalar\n\t * @param {number} index - Row index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulRow = function mulRow(index, value) {\n\t    this.checkRowIndex(index);\n\t    var i = 0, l = this.columns;\n\t    for (; i < l; i++) {\n\t        this[index][i] *= value;\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Multiplies the values of a column with a scalar\n\t * @param {number} index - Column index\n\t * @param {number} value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.mulColumn = function mulColumn(index, value) {\n\t    this.checkColumnIndex(index);\n\t    var i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        this[i][index] *= value;\n\t    }\n\t};\n\t\n\t/**\n\t * A matrix index\n\t * @typedef {Object} MatrixIndex\n\t * @property {number} row\n\t * @property {number} column\n\t */\n\t\n\t/**\n\t * Returns the maximum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.max = function max() {\n\t    var v = -Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxIndex = function maxIndex() {\n\t    var v = -Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] > v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.min = function min() {\n\t    var v = Infinity;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t            }\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minIndex = function minIndex() {\n\t    var v = Infinity;\n\t    var idx = {};\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (this[i][j] < v) {\n\t                v = this[i][j];\n\t                idx.row = i;\n\t                idx.column = j;\n\t            }\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxRow = function maxRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t            row: index\n\t        };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] > v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one row\n\t * @param {number} index - Row index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minRow = function minRow(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one row\n\t * @param {number} index - Row index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minRowIndex = function minRowIndex(index) {\n\t    this.checkRowIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: index,\n\t        column: 0\n\t    };\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        if (this[index][i] < v) {\n\t            v = this[index][i];\n\t            idx.column = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.maxColumn = function maxColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the maximum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = -Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] > v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {number}\n\t */\n\tMatrix.prototype.minColumn = function minColumn(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the index of the minimum value of one column\n\t * @param {number} index - Column index\n\t * @returns {MatrixIndex}\n\t */\n\tMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n\t    this.checkColumnIndex(index);\n\t    var v = Infinity;\n\t    var idx = {\n\t        row: 0,\n\t        column: index\n\t    };\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        if (this[i][index] < v) {\n\t            v = this[i][index];\n\t            idx.row = i;\n\t        }\n\t    }\n\t    return idx;\n\t};\n\t\n\t/**\n\t * Returns an array containing the diagonal values of the matrix\n\t * @returns {Array}\n\t */\n\tMatrix.prototype.diag = function diag() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('Only square matrices have a diagonal.');\n\t    var diag = new Array(this.rows);\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        diag[i] = this[i][i];\n\t    }\n\t    return diag;\n\t};\n\t\n\t/**\n\t * Returns the sum of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.sum = function sum() {\n\t    var v = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            v += this[i][j];\n\t        }\n\t    }\n\t    return v;\n\t};\n\t\n\t/**\n\t * Returns the mean of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.mean = function mean() {\n\t    return this.sum() / this.size;\n\t};\n\t\n\t/**\n\t * Returns the product of all elements of the matrix\n\t * @returns {number}\n\t */\n\tMatrix.prototype.prod = function prod() {\n\t    var prod = 1;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            prod *= this[i][j];\n\t        }\n\t    }\n\t    return prod;\n\t};\n\t\n\t/**\n\t * Computes the cumulative sum of the matrix elements (in place, row by row)\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.cumulativeSum = function cumulativeSum() {\n\t    var sum = 0;\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            sum += this[i][j];\n\t            this[i][j] = sum;\n\t        }\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Computes the dot (scalar) product between the matrix and another\n\t * @param {Matrix} other vector\n\t * @returns {number}\n\t */\n\tMatrix.prototype.dot = function dot(other) {\n\t    if (this.size !== other.size)\n\t        throw new RangeError('vectors do not have the same size');\n\t    var vector1 = this.to1DArray();\n\t    var vector2 = other.to1DArray();\n\t    var dot = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        dot += vector1[i] * vector2[i];\n\t    }\n\t    return dot;\n\t};\n\t\n\t/**\n\t * Returns the matrix product between this and other\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.mmul = function mmul(other) {\n\t    if (!Matrix.isMatrix(other))\n\t        throw new TypeError('parameter \"other\" must be a matrix');\n\t    if (this.columns !== other.rows)\n\t        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\t\n\t    var m = this.rows, n = this.columns, p = other.columns;\n\t    var result = new Matrix(m, p);\n\t\n\t    var Bcolj = new Array(n);\n\t    var i, j, k;\n\t    for (j = 0; j < p; j++) {\n\t        for (k = 0; k < n; k++)\n\t            Bcolj[k] = other[k][j];\n\t\n\t        for (i = 0; i < m; i++) {\n\t            var Arowi = this[i];\n\t\n\t            var s = 0;\n\t            for (k = 0; k < n; k++)\n\t                s += Arowi[k] * Bcolj[k];\n\t\n\t            result[i][j] = s;\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Sorts the rows (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortRows = function sortRows(compareFunction) {\n\t    for (var i = 0, ii = this.rows; i < ii; i++) {\n\t        this[i].sort(compareFunction);\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Sorts the columns (in place)\n\t * @param {function} compareFunction - usual Array.prototype.sort comparison function\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n\t    for (var i = 0, ii = this.columns; i < ii; i++) {\n\t        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n\t    }\n\t    return this;\n\t};\n\t\n\t/**\n\t * Transposes the matrix and returns a new one containing the result\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.transpose = function transpose() {\n\t    var result = new Matrix(this.columns, this.rows);\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[j][i] = this[i][j];\n\t        }\n\t    }\n\t    return result;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix\n\t * @param {number} startRow - First row index\n\t * @param {number} endRow - Last row index\n\t * @param {number} startColumn - First column index\n\t * @param {number} endColumn - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n\t    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range');\n\t    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n\t    for (var i = startRow; i <= endRow; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            newMatrix[i - startRow][j - startColumn] = this[i][j];\n\t        }\n\t    }\n\t    return newMatrix;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of row indices\n\t * @param {Array} indices - Array containing the row indices\n\t * @param {number} [startColumn = 0] - First column index\n\t * @param {number} [endColumn = this.columns-1] - Last column index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n\t    if (typeof startColumn === 'undefined') {\n\t        startColumn = 0;\n\t        endColumn = this.columns - 1;\n\t    } else if (typeof endColumn === 'undefined') {\n\t        endColumn = this.columns - 1;\n\t    }\n\t    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, rows = this.rows,\n\t        X = new Matrix(l, endColumn - startColumn + 1);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startColumn; j <= endColumn; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= rows))\n\t                throw new RangeError('Argument out of range.');\n\t            X[i][j - startColumn] = this[indices[i]][j];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns a subset of the matrix based on an array of column indices\n\t * @param {Array} indices - Array containing the column indices\n\t * @param {number} [startRow = 0] - First row index\n\t * @param {number} [endRow = this.rows-1] - Last row index\n\t * @returns {Matrix}\n\t */\n\tMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n\t    if (typeof startRow === 'undefined') {\n\t        startRow = 0;\n\t        endRow = this.rows - 1;\n\t    } else if (typeof endRow === 'undefined') {\n\t        endRow = this.rows - 1;\n\t    }\n\t    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n\t        throw new RangeError('Argument out of range.');\n\t    var l = indices.length, columns = this.columns,\n\t        X = new Matrix(endRow - startRow + 1, l);\n\t    for (var i = 0; i < l; i++) {\n\t        for (var j = startRow; j <= endRow; j++) {\n\t            if ((indices[i] < 0) || (indices[i] >= columns))\n\t                throw new RangeError('Argument out of range.');\n\t            X[j - startRow][i] = this[j][indices[i]];\n\t        }\n\t    }\n\t    return X;\n\t};\n\t\n\t/**\n\t * Returns the trace of the matrix (sum of the diagonal elements)\n\t * @returns {number}\n\t */\n\tMatrix.prototype.trace = function trace() {\n\t    if (!this.isSquare())\n\t        throw new TypeError('The matrix is not square');\n\t    var trace = 0, i = 0, l = this.rows;\n\t    for (; i < l; i++) {\n\t        trace += this[i][i];\n\t    }\n\t    return trace;\n\t};\n\t\n\t/**\n\t * Sets each element of the matrix to its absolute value\n\t * @returns {Matrix} this\n\t */\n\tMatrix.prototype.abs = function abs() {\n\t    var ii = this.rows, jj = this.columns;\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            this[i][j] = Math.abs(this[i][j]);\n\t        }\n\t    }\n\t};\n\t\n\tmodule.exports = Matrix;\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(6);\n\t\n\tvar SingularValueDecomposition = __webpack_require__(8);\n\tvar EigenvalueDecomposition = __webpack_require__(10);\n\tvar LuDecomposition = __webpack_require__(11);\n\tvar QrDecomposition = __webpack_require__(12);\n\tvar CholeskyDecomposition = __webpack_require__(13);\n\t\n\tfunction inverse(matrix) {\n\t    return solve(matrix, Matrix.eye(matrix.rows));\n\t}\n\t\n\tMatrix.prototype.inverse = function () {\n\t    return inverse(this);\n\t};\n\t\n\tfunction solve(leftHandSide, rightHandSide) {\n\t    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n\t}\n\t\n\tMatrix.prototype.solve = function (other) {\n\t    return solve(this, other);\n\t};\n\t\n\tmodule.exports = {\n\t    SingularValueDecomposition: SingularValueDecomposition,\n\t    SVD: SingularValueDecomposition,\n\t    EigenvalueDecomposition: EigenvalueDecomposition,\n\t    EVD: EigenvalueDecomposition,\n\t    LuDecomposition: LuDecomposition,\n\t    LU: LuDecomposition,\n\t    QrDecomposition: QrDecomposition,\n\t    QR: QrDecomposition,\n\t    CholeskyDecomposition: CholeskyDecomposition,\n\t    CHO: CholeskyDecomposition,\n\t    inverse: inverse,\n\t    solve: solve\n\t};\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(6);\n\tvar hypotenuse = __webpack_require__(9).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\n\tfunction SingularValueDecomposition(value, options) {\n\t    if (!(this instanceof SingularValueDecomposition)) {\n\t        return new SingularValueDecomposition(value, options);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    options = options || {};\n\t\n\t    var a = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        nu = Math.min(m, n);\n\t\n\t    var wantu = true, wantv = true;\n\t    if (options.computeLeftSingularVectors === false)\n\t        wantu = false;\n\t    if (options.computeRightSingularVectors === false)\n\t        wantv = false;\n\t    var autoTranspose = options.autoTranspose === true;\n\t\n\t    var swapped = false;\n\t    if (m < n) {\n\t        if (!autoTranspose) {\n\t            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n\t        } else {\n\t            a = a.transpose();\n\t            m = a.rows;\n\t            n = a.columns;\n\t            swapped = true;\n\t            var aux = wantu;\n\t            wantu = wantv;\n\t            wantv = aux;\n\t        }\n\t    }\n\t\n\t    var s = new Array(Math.min(m + 1, n)),\n\t        U = Matrix.zeros(m, nu),\n\t        V = Matrix.zeros(n, n),\n\t        e = new Array(n),\n\t        work = new Array(m);\n\t\n\t    var nct = Math.min(m - 1, n);\n\t    var nrt = Math.max(0, Math.min(n - 2, m));\n\t\n\t    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n\t        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\t\n\t    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n\t        if (k < nct) {\n\t            s[k] = 0;\n\t            for (i = k; i < m; i++) {\n\t                s[k] = hypotenuse(s[k], a[i][k]);\n\t            }\n\t            if (s[k] !== 0) {\n\t                if (a[k][k] < 0) {\n\t                    s[k] = -s[k];\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    a[i][k] /= s[k];\n\t                }\n\t                a[k][k] += 1;\n\t            }\n\t            s[k] = -s[k];\n\t        }\n\t\n\t        for (j = k + 1; j < n; j++) {\n\t            if ((k < nct) && (s[k] !== 0)) {\n\t                t = 0;\n\t                for (i = k; i < m; i++) {\n\t                    t += a[i][k] * a[i][j];\n\t                }\n\t                t = -t / a[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    a[i][j] += t * a[i][k];\n\t                }\n\t            }\n\t            e[j] = a[k][j];\n\t        }\n\t\n\t        if (wantu && (k < nct)) {\n\t            for (i = k; i < m; i++) {\n\t                U[i][k] = a[i][k];\n\t            }\n\t        }\n\t\n\t        if (k < nrt) {\n\t            e[k] = 0;\n\t            for (i = k + 1; i < n; i++) {\n\t                e[k] = hypotenuse(e[k], e[i]);\n\t            }\n\t            if (e[k] !== 0) {\n\t                if (e[k + 1] < 0)\n\t                    e[k] = -e[k];\n\t                for (i = k + 1; i < n; i++) {\n\t                    e[i] /= e[k];\n\t                }\n\t                e[k + 1] += 1;\n\t            }\n\t            e[k] = -e[k];\n\t            if ((k + 1 < m) && (e[k] !== 0)) {\n\t                for (i = k + 1; i < m; i++) {\n\t                    work[i] = 0;\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    for (i = k + 1; i < m; i++) {\n\t                        work[i] += e[j] * a[i][j];\n\t                    }\n\t                }\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = -e[j] / e[k + 1];\n\t                    for (i = k + 1; i < m; i++) {\n\t                        a[i][j] += t * work[i];\n\t                    }\n\t                }\n\t            }\n\t            if (wantv) {\n\t                for (i = k + 1; i < n; i++) {\n\t                    V[i][k] = e[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    p = Math.min(n, m + 1);\n\t    if (nct < n) {\n\t        s[nct] = a[nct][nct];\n\t    }\n\t    if (m < p) {\n\t        s[p - 1] = 0;\n\t    }\n\t    if (nrt + 1 < p) {\n\t        e[nrt] = a[nrt][p - 1];\n\t    }\n\t    e[p - 1] = 0;\n\t\n\t    if (wantu) {\n\t        for (j = nct; j < nu; j++) {\n\t            for (i = 0; i < m; i++) {\n\t                U[i][j] = 0;\n\t            }\n\t            U[j][j] = 1;\n\t        }\n\t        for (k = nct - 1; k >= 0; k--) {\n\t            if (s[k] !== 0) {\n\t                for (j = k + 1; j < nu; j++) {\n\t                    t = 0;\n\t                    for (i = k; i < m; i++) {\n\t                        t += U[i][k] * U[i][j];\n\t                    }\n\t                    t = -t / U[k][k];\n\t                    for (i = k; i < m; i++) {\n\t                        U[i][j] += t * U[i][k];\n\t                    }\n\t                }\n\t                for (i = k; i < m; i++) {\n\t                    U[i][k] = -U[i][k];\n\t                }\n\t                U[k][k] = 1 + U[k][k];\n\t                for (i = 0; i < k - 1; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t            } else {\n\t                for (i = 0; i < m; i++) {\n\t                    U[i][k] = 0;\n\t                }\n\t                U[k][k] = 1;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (wantv) {\n\t        for (k = n - 1; k >= 0; k--) {\n\t            if ((k < nrt) && (e[k] !== 0)) {\n\t                for (j = k + 1; j < n; j++) {\n\t                    t = 0;\n\t                    for (i = k + 1; i < n; i++) {\n\t                        t += V[i][k] * V[i][j];\n\t                    }\n\t                    t = -t / V[k + 1][k];\n\t                    for (i = k + 1; i < n; i++) {\n\t                        V[i][j] += t * V[i][k];\n\t                    }\n\t                }\n\t            }\n\t            for (i = 0; i < n; i++) {\n\t                V[i][k] = 0;\n\t            }\n\t            V[k][k] = 1;\n\t        }\n\t    }\n\t\n\t    var pp = p - 1,\n\t        iter = 0,\n\t        eps = Math.pow(2, -52);\n\t    while (p > 0) {\n\t        for (k = p - 2; k >= -1; k--) {\n\t            if (k === -1) {\n\t                break;\n\t            }\n\t            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n\t                e[k] = 0;\n\t                break;\n\t            }\n\t        }\n\t        if (k === p - 2) {\n\t            kase = 4;\n\t        } else {\n\t            for (ks = p - 1; ks >= k; ks--) {\n\t                if (ks === k) {\n\t                    break;\n\t                }\n\t                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n\t                if (Math.abs(s[ks]) <= eps * t) {\n\t                    s[ks] = 0;\n\t                    break;\n\t                }\n\t            }\n\t            if (ks === k) {\n\t                kase = 3;\n\t            } else if (ks === p - 1) {\n\t                kase = 1;\n\t            } else {\n\t                kase = 2;\n\t                k = ks;\n\t            }\n\t        }\n\t\n\t        k++;\n\t\n\t        switch (kase) {\n\t            case 1: {\n\t                f = e[p - 2];\n\t                e[p - 2] = 0;\n\t                for (j = p - 2; j >= k; j--) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    if (j !== k) {\n\t                        f = -sn * e[j - 1];\n\t                        e[j - 1] = cs * e[j - 1];\n\t                    }\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][p - 1];\n\t                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 2 : {\n\t                f = e[k - 1];\n\t                e[k - 1] = 0;\n\t                for (j = k; j < p; j++) {\n\t                    t = hypotenuse(s[j], f);\n\t                    cs = s[j] / t;\n\t                    sn = f / t;\n\t                    s[j] = t;\n\t                    f = -sn * e[j];\n\t                    e[j] = cs * e[j];\n\t                    if (wantu) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][k - 1];\n\t                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                break;\n\t            }\n\t            case 3 : {\n\t                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n\t                sp = s[p - 1] / scale;\n\t                spm1 = s[p - 2] / scale;\n\t                epm1 = e[p - 2] / scale;\n\t                sk = s[k] / scale;\n\t                ek = e[k] / scale;\n\t                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n\t                c = (sp * epm1) * (sp * epm1);\n\t                shift = 0;\n\t                if ((b !== 0) || (c !== 0)) {\n\t                    shift = Math.sqrt(b * b + c);\n\t                    if (b < 0) {\n\t                        shift = -shift;\n\t                    }\n\t                    shift = c / (b + shift);\n\t                }\n\t                f = (sk + sp) * (sk - sp) + shift;\n\t                g = sk * ek;\n\t                for (j = k; j < p - 1; j++) {\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    if (j !== k) {\n\t                        e[j - 1] = t;\n\t                    }\n\t                    f = cs * s[j] + sn * e[j];\n\t                    e[j] = cs * e[j] - sn * s[j];\n\t                    g = sn * s[j + 1];\n\t                    s[j + 1] = cs * s[j + 1];\n\t                    if (wantv) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = cs * V[i][j] + sn * V[i][j + 1];\n\t                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n\t                            V[i][j] = t;\n\t                        }\n\t                    }\n\t                    t = hypotenuse(f, g);\n\t                    cs = f / t;\n\t                    sn = g / t;\n\t                    s[j] = t;\n\t                    f = cs * e[j] + sn * s[j + 1];\n\t                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n\t                    g = sn * e[j + 1];\n\t                    e[j + 1] = cs * e[j + 1];\n\t                    if (wantu && (j < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = cs * U[i][j] + sn * U[i][j + 1];\n\t                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n\t                            U[i][j] = t;\n\t                        }\n\t                    }\n\t                }\n\t                e[p - 2] = f;\n\t                iter = iter + 1;\n\t                break;\n\t            }\n\t            case 4: {\n\t                if (s[k] <= 0) {\n\t                    s[k] = (s[k] < 0 ? -s[k] : 0);\n\t                    if (wantv) {\n\t                        for (i = 0; i <= pp; i++) {\n\t                            V[i][k] = -V[i][k];\n\t                        }\n\t                    }\n\t                }\n\t                while (k < pp) {\n\t                    if (s[k] >= s[k + 1]) {\n\t                        break;\n\t                    }\n\t                    t = s[k];\n\t                    s[k] = s[k + 1];\n\t                    s[k + 1] = t;\n\t                    if (wantv && (k < n - 1)) {\n\t                        for (i = 0; i < n; i++) {\n\t                            t = V[i][k + 1];\n\t                            V[i][k + 1] = V[i][k];\n\t                            V[i][k] = t;\n\t                        }\n\t                    }\n\t                    if (wantu && (k < m - 1)) {\n\t                        for (i = 0; i < m; i++) {\n\t                            t = U[i][k + 1];\n\t                            U[i][k + 1] = U[i][k];\n\t                            U[i][k] = t;\n\t                        }\n\t                    }\n\t                    k++;\n\t                }\n\t                iter = 0;\n\t                p--;\n\t                break;\n\t            }\n\t        }\n\t    }\n\t\n\t    if (swapped) {\n\t        var tmp = V;\n\t        V = U;\n\t        U = tmp;\n\t    }\n\t\n\t    this.m = m;\n\t    this.n = n;\n\t    this.s = s;\n\t    this.U = U;\n\t    this.V = V;\n\t}\n\t\n\tSingularValueDecomposition.prototype = {\n\t    get condition() {\n\t        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n\t    },\n\t    get norm2() {\n\t        return this.s[0];\n\t    },\n\t    get rank() {\n\t        var eps = Math.pow(2, -52),\n\t            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n\t            r = 0,\n\t            s = this.s;\n\t        for (var i = 0, ii = s.length; i < ii; i++) {\n\t            if (s[i] > tol) {\n\t                r++;\n\t            }\n\t        }\n\t        return r;\n\t    },\n\t    get diagonal() {\n\t        return this.s;\n\t    },\n\t    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n\t    get threshold() {\n\t        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n\t    },\n\t    get leftSingularVectors() {\n\t        return this.U;\n\t    },\n\t    get rightSingularVectors() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        return Matrix.diag(this.s);\n\t    },\n\t    solve: function (value) {\n\t\n\t        var Y = value,\n\t            e = this.threshold,\n\t            scols = this.s.length,\n\t            Ls = Matrix.zeros(scols, scols),\n\t            i;\n\t\n\t        for (i = 0; i < scols; i++) {\n\t            if (Math.abs(this.s[i]) <= e) {\n\t                Ls[i][i] = 0;\n\t            } else {\n\t                Ls[i][i] = 1 / this.s[i];\n\t            }\n\t        }\n\t\n\t\n\t        var VL = this.V.mmul(Ls),\n\t            vrows = this.V.rows,\n\t            urows = this.U.rows,\n\t            VLU = Matrix.zeros(vrows, urows),\n\t            j, k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < scols; k++) {\n\t                    sum += VL[i][k] * this.U[j][k];\n\t                }\n\t                VLU[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return VLU.mmul(Y);\n\t    },\n\t    solveForDiagonal: function (value) {\n\t        return this.solve(Matrix.diag(value));\n\t    },\n\t    inverse: function () {\n\t        var e = this.threshold,\n\t            vrows = this.V.rows,\n\t            vcols = this.V.columns,\n\t            X = new Matrix(vrows, this.s.length),\n\t            i, j;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < vcols; j++) {\n\t                if (Math.abs(this.s[j]) > e) {\n\t                    X[i][j] = this.V[i][j] / this.s[j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t\n\t        var urows = this.U.rows,\n\t            ucols = this.U.columns,\n\t            Y = new Matrix(vrows, urows),\n\t            k, sum;\n\t\n\t        for (i = 0; i < vrows; i++) {\n\t            for (j = 0; j < urows; j++) {\n\t                sum = 0;\n\t                for (k = 0; k < ucols; k++) {\n\t                    sum += X[i][k] * this.U[j][k];\n\t                }\n\t                Y[i][j] = sum;\n\t            }\n\t        }\n\t\n\t        return Y;\n\t    }\n\t};\n\t\n\tmodule.exports = SingularValueDecomposition;\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\texports.hypotenuse = function hypotenuse(a, b) {\n\t    var r;\n\t    if (Math.abs(a) > Math.abs(b)) {\n\t        r = b / a;\n\t        return Math.abs(a) * Math.sqrt(1 + r * r);\n\t    }\n\t    if (b !== 0) {\n\t        r = a / b;\n\t        return Math.abs(b) * Math.sqrt(1 + r * r);\n\t    }\n\t    return 0;\n\t};\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(6);\n\tvar hypotenuse = __webpack_require__(9).hypotenuse;\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\n\tfunction EigenvalueDecomposition(matrix) {\n\t    if (!(this instanceof EigenvalueDecomposition)) {\n\t        return new EigenvalueDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t    if (!matrix.isSquare()) {\n\t        throw new Error('Matrix is not a square matrix');\n\t    }\n\t\n\t    var n = matrix.columns,\n\t        V = Matrix.zeros(n, n),\n\t        d = new Array(n),\n\t        e = new Array(n),\n\t        value = matrix,\n\t        i, j;\n\t\n\t    if (matrix.isSymmetric()) {\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                V[i][j] = value[i][j];\n\t            }\n\t        }\n\t        tred2(n, e, d, V);\n\t        tql2(n, e, d, V);\n\t    }\n\t    else {\n\t        var H = Matrix.zeros(n, n),\n\t            ort = new Array(n);\n\t        for (j = 0; j < n; j++) {\n\t            for (i = 0; i < n; i++) {\n\t                H[i][j] = value[i][j];\n\t            }\n\t        }\n\t        orthes(n, H, ort, V);\n\t        hqr2(n, e, d, V, H);\n\t    }\n\t\n\t    this.n = n;\n\t    this.e = e;\n\t    this.d = d;\n\t    this.V = V;\n\t}\n\t\n\tEigenvalueDecomposition.prototype = {\n\t    get realEigenvalues() {\n\t        return this.d;\n\t    },\n\t    get imaginaryEigenvalues() {\n\t        return this.e;\n\t    },\n\t    get eigenvectorMatrix() {\n\t        return this.V;\n\t    },\n\t    get diagonalMatrix() {\n\t        var n = this.n,\n\t            e = this.e,\n\t            d = this.d,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                X[i][j] = 0;\n\t            }\n\t            X[i][i] = d[i];\n\t            if (e[i] > 0) {\n\t                X[i][i + 1] = e[i];\n\t            }\n\t            else if (e[i] < 0) {\n\t                X[i][i - 1] = e[i];\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tfunction tred2(n, e, d, V) {\n\t\n\t    var f, g, h, i, j, k,\n\t        hh, scale;\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t    }\n\t\n\t    for (i = n - 1; i > 0; i--) {\n\t        scale = 0;\n\t        h = 0;\n\t        for (k = 0; k < i; k++) {\n\t            scale = scale + Math.abs(d[k]);\n\t        }\n\t\n\t        if (scale === 0) {\n\t            e[i] = d[i - 1];\n\t            for (j = 0; j < i; j++) {\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t                V[j][i] = 0;\n\t            }\n\t        } else {\n\t            for (k = 0; k < i; k++) {\n\t                d[k] /= scale;\n\t                h += d[k] * d[k];\n\t            }\n\t\n\t            f = d[i - 1];\n\t            g = Math.sqrt(h);\n\t            if (f > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            e[i] = scale * g;\n\t            h = h - f * g;\n\t            d[i - 1] = f - g;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] = 0;\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                V[j][i] = f;\n\t                g = e[j] + V[j][j] * f;\n\t                for (k = j + 1; k <= i - 1; k++) {\n\t                    g += V[k][j] * d[k];\n\t                    e[k] += V[k][j] * f;\n\t                }\n\t                e[j] = g;\n\t            }\n\t\n\t            f = 0;\n\t            for (j = 0; j < i; j++) {\n\t                e[j] /= h;\n\t                f += e[j] * d[j];\n\t            }\n\t\n\t            hh = f / (h + h);\n\t            for (j = 0; j < i; j++) {\n\t                e[j] -= hh * d[j];\n\t            }\n\t\n\t            for (j = 0; j < i; j++) {\n\t                f = d[j];\n\t                g = e[j];\n\t                for (k = j; k <= i - 1; k++) {\n\t                    V[k][j] -= (f * e[k] + g * d[k]);\n\t                }\n\t                d[j] = V[i - 1][j];\n\t                V[i][j] = 0;\n\t            }\n\t        }\n\t        d[i] = h;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        V[n - 1][i] = V[i][i];\n\t        V[i][i] = 1;\n\t        h = d[i + 1];\n\t        if (h !== 0) {\n\t            for (k = 0; k <= i; k++) {\n\t                d[k] = V[k][i + 1] / h;\n\t            }\n\t\n\t            for (j = 0; j <= i; j++) {\n\t                g = 0;\n\t                for (k = 0; k <= i; k++) {\n\t                    g += V[k][i + 1] * V[k][j];\n\t                }\n\t                for (k = 0; k <= i; k++) {\n\t                    V[k][j] -= g * d[k];\n\t                }\n\t            }\n\t        }\n\t\n\t        for (k = 0; k <= i; k++) {\n\t            V[k][i + 1] = 0;\n\t        }\n\t    }\n\t\n\t    for (j = 0; j < n; j++) {\n\t        d[j] = V[n - 1][j];\n\t        V[n - 1][j] = 0;\n\t    }\n\t\n\t    V[n - 1][n - 1] = 1;\n\t    e[0] = 0;\n\t}\n\t\n\tfunction tql2(n, e, d, V) {\n\t\n\t    var g, h, i, j, k, l, m, p, r,\n\t        dl1, c, c2, c3, el1, s, s2,\n\t        iter;\n\t\n\t    for (i = 1; i < n; i++) {\n\t        e[i - 1] = e[i];\n\t    }\n\t\n\t    e[n - 1] = 0;\n\t\n\t    var f = 0,\n\t        tst1 = 0,\n\t        eps = Math.pow(2, -52);\n\t\n\t    for (l = 0; l < n; l++) {\n\t        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n\t        m = l;\n\t        while (m < n) {\n\t            if (Math.abs(e[m]) <= eps * tst1) {\n\t                break;\n\t            }\n\t            m++;\n\t        }\n\t\n\t        if (m > l) {\n\t            iter = 0;\n\t            do {\n\t                iter = iter + 1;\n\t\n\t                g = d[l];\n\t                p = (d[l + 1] - g) / (2 * e[l]);\n\t                r = hypotenuse(p, 1);\n\t                if (p < 0) {\n\t                    r = -r;\n\t                }\n\t\n\t                d[l] = e[l] / (p + r);\n\t                d[l + 1] = e[l] * (p + r);\n\t                dl1 = d[l + 1];\n\t                h = g - d[l];\n\t                for (i = l + 2; i < n; i++) {\n\t                    d[i] -= h;\n\t                }\n\t\n\t                f = f + h;\n\t\n\t                p = d[m];\n\t                c = 1;\n\t                c2 = c;\n\t                c3 = c;\n\t                el1 = e[l + 1];\n\t                s = 0;\n\t                s2 = 0;\n\t                for (i = m - 1; i >= l; i--) {\n\t                    c3 = c2;\n\t                    c2 = c;\n\t                    s2 = s;\n\t                    g = c * e[i];\n\t                    h = c * p;\n\t                    r = hypotenuse(p, e[i]);\n\t                    e[i + 1] = s * r;\n\t                    s = e[i] / r;\n\t                    c = p / r;\n\t                    p = c * d[i] - s * g;\n\t                    d[i + 1] = h + s * (c * g + s * d[i]);\n\t\n\t                    for (k = 0; k < n; k++) {\n\t                        h = V[k][i + 1];\n\t                        V[k][i + 1] = s * V[k][i] + c * h;\n\t                        V[k][i] = c * V[k][i] - s * h;\n\t                    }\n\t                }\n\t\n\t                p = -s * s2 * c3 * el1 * e[l] / dl1;\n\t                e[l] = s * p;\n\t                d[l] = c * p;\n\t\n\t            }\n\t            while (Math.abs(e[l]) > eps * tst1);\n\t        }\n\t        d[l] = d[l] + f;\n\t        e[l] = 0;\n\t    }\n\t\n\t    for (i = 0; i < n - 1; i++) {\n\t        k = i;\n\t        p = d[i];\n\t        for (j = i + 1; j < n; j++) {\n\t            if (d[j] < p) {\n\t                k = j;\n\t                p = d[j];\n\t            }\n\t        }\n\t\n\t        if (k !== i) {\n\t            d[k] = d[i];\n\t            d[i] = p;\n\t            for (j = 0; j < n; j++) {\n\t                p = V[j][i];\n\t                V[j][i] = V[j][k];\n\t                V[j][k] = p;\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction orthes(n, H, ort, V) {\n\t\n\t    var low = 0,\n\t        high = n - 1,\n\t        f, g, h, i, j, m,\n\t        scale;\n\t\n\t    for (m = low + 1; m <= high - 1; m++) {\n\t        scale = 0;\n\t        for (i = m; i <= high; i++) {\n\t            scale = scale + Math.abs(H[i][m - 1]);\n\t        }\n\t\n\t        if (scale !== 0) {\n\t            h = 0;\n\t            for (i = high; i >= m; i--) {\n\t                ort[i] = H[i][m - 1] / scale;\n\t                h += ort[i] * ort[i];\n\t            }\n\t\n\t            g = Math.sqrt(h);\n\t            if (ort[m] > 0) {\n\t                g = -g;\n\t            }\n\t\n\t            h = h - ort[m] * g;\n\t            ort[m] = ort[m] - g;\n\t\n\t            for (j = m; j < n; j++) {\n\t                f = 0;\n\t                for (i = high; i >= m; i--) {\n\t                    f += ort[i] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (i = m; i <= high; i++) {\n\t                    H[i][j] -= f * ort[i];\n\t                }\n\t            }\n\t\n\t            for (i = 0; i <= high; i++) {\n\t                f = 0;\n\t                for (j = high; j >= m; j--) {\n\t                    f += ort[j] * H[i][j];\n\t                }\n\t\n\t                f = f / h;\n\t                for (j = m; j <= high; j++) {\n\t                    H[i][j] -= f * ort[j];\n\t                }\n\t            }\n\t\n\t            ort[m] = scale * ort[m];\n\t            H[m][m - 1] = scale * g;\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < n; i++) {\n\t        for (j = 0; j < n; j++) {\n\t            V[i][j] = (i === j ? 1 : 0);\n\t        }\n\t    }\n\t\n\t    for (m = high - 1; m >= low + 1; m--) {\n\t        if (H[m][m - 1] !== 0) {\n\t            for (i = m + 1; i <= high; i++) {\n\t                ort[i] = H[i][m - 1];\n\t            }\n\t\n\t            for (j = m; j <= high; j++) {\n\t                g = 0;\n\t                for (i = m; i <= high; i++) {\n\t                    g += ort[i] * V[i][j];\n\t                }\n\t\n\t                g = (g / ort[m]) / H[m][m - 1];\n\t                for (i = m; i <= high; i++) {\n\t                    V[i][j] += g * ort[i];\n\t                }\n\t            }\n\t        }\n\t    }\n\t}\n\t\n\tfunction hqr2(nn, e, d, V, H) {\n\t    var n = nn - 1,\n\t        low = 0,\n\t        high = nn - 1,\n\t        eps = Math.pow(2, -52),\n\t        exshift = 0,\n\t        norm = 0,\n\t        p = 0,\n\t        q = 0,\n\t        r = 0,\n\t        s = 0,\n\t        z = 0,\n\t        iter = 0,\n\t        i, j, k, l, m, t, w, x, y,\n\t        ra, sa, vr, vi,\n\t        notlast, cdivres;\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            d[i] = H[i][i];\n\t            e[i] = 0;\n\t        }\n\t\n\t        for (j = Math.max(i - 1, 0); j < nn; j++) {\n\t            norm = norm + Math.abs(H[i][j]);\n\t        }\n\t    }\n\t\n\t    while (n >= low) {\n\t        l = n;\n\t        while (l > low) {\n\t            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n\t            if (s === 0) {\n\t                s = norm;\n\t            }\n\t            if (Math.abs(H[l][l - 1]) < eps * s) {\n\t                break;\n\t            }\n\t            l--;\n\t        }\n\t\n\t        if (l === n) {\n\t            H[n][n] = H[n][n] + exshift;\n\t            d[n] = H[n][n];\n\t            e[n] = 0;\n\t            n--;\n\t            iter = 0;\n\t        } else if (l === n - 1) {\n\t            w = H[n][n - 1] * H[n - 1][n];\n\t            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n\t            q = p * p + w;\n\t            z = Math.sqrt(Math.abs(q));\n\t            H[n][n] = H[n][n] + exshift;\n\t            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n\t            x = H[n][n];\n\t\n\t            if (q >= 0) {\n\t                z = (p >= 0) ? (p + z) : (p - z);\n\t                d[n - 1] = x + z;\n\t                d[n] = d[n - 1];\n\t                if (z !== 0) {\n\t                    d[n] = x - w / z;\n\t                }\n\t                e[n - 1] = 0;\n\t                e[n] = 0;\n\t                x = H[n][n - 1];\n\t                s = Math.abs(x) + Math.abs(z);\n\t                p = x / s;\n\t                q = z / s;\n\t                r = Math.sqrt(p * p + q * q);\n\t                p = p / r;\n\t                q = q / r;\n\t\n\t                for (j = n - 1; j < nn; j++) {\n\t                    z = H[n - 1][j];\n\t                    H[n - 1][j] = q * z + p * H[n][j];\n\t                    H[n][j] = q * H[n][j] - p * z;\n\t                }\n\t\n\t                for (i = 0; i <= n; i++) {\n\t                    z = H[i][n - 1];\n\t                    H[i][n - 1] = q * z + p * H[i][n];\n\t                    H[i][n] = q * H[i][n] - p * z;\n\t                }\n\t\n\t                for (i = low; i <= high; i++) {\n\t                    z = V[i][n - 1];\n\t                    V[i][n - 1] = q * z + p * V[i][n];\n\t                    V[i][n] = q * V[i][n] - p * z;\n\t                }\n\t            } else {\n\t                d[n - 1] = x + p;\n\t                d[n] = x + p;\n\t                e[n - 1] = z;\n\t                e[n] = -z;\n\t            }\n\t\n\t            n = n - 2;\n\t            iter = 0;\n\t        } else {\n\t            x = H[n][n];\n\t            y = 0;\n\t            w = 0;\n\t            if (l < n) {\n\t                y = H[n - 1][n - 1];\n\t                w = H[n][n - 1] * H[n - 1][n];\n\t            }\n\t\n\t            if (iter === 10) {\n\t                exshift += x;\n\t                for (i = low; i <= n; i++) {\n\t                    H[i][i] -= x;\n\t                }\n\t                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n\t                x = y = 0.75 * s;\n\t                w = -0.4375 * s * s;\n\t            }\n\t\n\t            if (iter === 30) {\n\t                s = (y - x) / 2;\n\t                s = s * s + w;\n\t                if (s > 0) {\n\t                    s = Math.sqrt(s);\n\t                    if (y < x) {\n\t                        s = -s;\n\t                    }\n\t                    s = x - w / ((y - x) / 2 + s);\n\t                    for (i = low; i <= n; i++) {\n\t                        H[i][i] -= s;\n\t                    }\n\t                    exshift += s;\n\t                    x = y = w = 0.964;\n\t                }\n\t            }\n\t\n\t            iter = iter + 1;\n\t\n\t            m = n - 2;\n\t            while (m >= l) {\n\t                z = H[m][m];\n\t                r = x - z;\n\t                s = y - z;\n\t                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n\t                q = H[m + 1][m + 1] - z - r - s;\n\t                r = H[m + 2][m + 1];\n\t                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                p = p / s;\n\t                q = q / s;\n\t                r = r / s;\n\t                if (m === l) {\n\t                    break;\n\t                }\n\t                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n\t                    break;\n\t                }\n\t                m--;\n\t            }\n\t\n\t            for (i = m + 2; i <= n; i++) {\n\t                H[i][i - 2] = 0;\n\t                if (i > m + 2) {\n\t                    H[i][i - 3] = 0;\n\t                }\n\t            }\n\t\n\t            for (k = m; k <= n - 1; k++) {\n\t                notlast = (k !== n - 1);\n\t                if (k !== m) {\n\t                    p = H[k][k - 1];\n\t                    q = H[k + 1][k - 1];\n\t                    r = (notlast ? H[k + 2][k - 1] : 0);\n\t                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n\t                    if (x !== 0) {\n\t                        p = p / x;\n\t                        q = q / x;\n\t                        r = r / x;\n\t                    }\n\t                }\n\t\n\t                if (x === 0) {\n\t                    break;\n\t                }\n\t\n\t                s = Math.sqrt(p * p + q * q + r * r);\n\t                if (p < 0) {\n\t                    s = -s;\n\t                }\n\t\n\t                if (s !== 0) {\n\t                    if (k !== m) {\n\t                        H[k][k - 1] = -s * x;\n\t                    } else if (l !== m) {\n\t                        H[k][k - 1] = -H[k][k - 1];\n\t                    }\n\t\n\t                    p = p + s;\n\t                    x = p / s;\n\t                    y = q / s;\n\t                    z = r / s;\n\t                    q = q / p;\n\t                    r = r / p;\n\t\n\t                    for (j = k; j < nn; j++) {\n\t                        p = H[k][j] + q * H[k + 1][j];\n\t                        if (notlast) {\n\t                            p = p + r * H[k + 2][j];\n\t                            H[k + 2][j] = H[k + 2][j] - p * z;\n\t                        }\n\t\n\t                        H[k][j] = H[k][j] - p * x;\n\t                        H[k + 1][j] = H[k + 1][j] - p * y;\n\t                    }\n\t\n\t                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n\t                        p = x * H[i][k] + y * H[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * H[i][k + 2];\n\t                            H[i][k + 2] = H[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        H[i][k] = H[i][k] - p;\n\t                        H[i][k + 1] = H[i][k + 1] - p * q;\n\t                    }\n\t\n\t                    for (i = low; i <= high; i++) {\n\t                        p = x * V[i][k] + y * V[i][k + 1];\n\t                        if (notlast) {\n\t                            p = p + z * V[i][k + 2];\n\t                            V[i][k + 2] = V[i][k + 2] - p * r;\n\t                        }\n\t\n\t                        V[i][k] = V[i][k] - p;\n\t                        V[i][k + 1] = V[i][k + 1] - p * q;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    if (norm === 0) {\n\t        return;\n\t    }\n\t\n\t    for (n = nn - 1; n >= 0; n--) {\n\t        p = d[n];\n\t        q = e[n];\n\t\n\t        if (q === 0) {\n\t            l = n;\n\t            H[n][n] = 1;\n\t            for (i = n - 1; i >= 0; i--) {\n\t                w = H[i][i] - p;\n\t                r = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    r = r + H[i][j] * H[j][n];\n\t                }\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    s = r;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n\t                        t = (x * s - z * r) / q;\n\t                        H[i][n] = t;\n\t                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n\t                    }\n\t\n\t                    t = Math.abs(H[i][n]);\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        } else if (q < 0) {\n\t            l = n - 1;\n\t\n\t            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n\t                H[n - 1][n - 1] = q / H[n][n - 1];\n\t                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n\t            } else {\n\t                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n\t                H[n - 1][n - 1] = cdivres[0];\n\t                H[n - 1][n] = cdivres[1];\n\t            }\n\t\n\t            H[n][n - 1] = 0;\n\t            H[n][n] = 1;\n\t            for (i = n - 2; i >= 0; i--) {\n\t                ra = 0;\n\t                sa = 0;\n\t                for (j = l; j <= n; j++) {\n\t                    ra = ra + H[i][j] * H[j][n - 1];\n\t                    sa = sa + H[i][j] * H[j][n];\n\t                }\n\t\n\t                w = H[i][i] - p;\n\t\n\t                if (e[i] < 0) {\n\t                    z = w;\n\t                    r = ra;\n\t                    s = sa;\n\t                } else {\n\t                    l = i;\n\t                    if (e[i] === 0) {\n\t                        cdivres = cdiv(-ra, -sa, w, q);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                    } else {\n\t                        x = H[i][i + 1];\n\t                        y = H[i + 1][i];\n\t                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n\t                        vi = (d[i] - p) * 2 * q;\n\t                        if (vr === 0 && vi === 0) {\n\t                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n\t                        }\n\t                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n\t                        H[i][n - 1] = cdivres[0];\n\t                        H[i][n] = cdivres[1];\n\t                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n\t                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n\t                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n\t                        } else {\n\t                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n\t                            H[i + 1][n - 1] = cdivres[0];\n\t                            H[i + 1][n] = cdivres[1];\n\t                        }\n\t                    }\n\t\n\t                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n\t                    if ((eps * t) * t > 1) {\n\t                        for (j = i; j <= n; j++) {\n\t                            H[j][n - 1] = H[j][n - 1] / t;\n\t                            H[j][n] = H[j][n] / t;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < nn; i++) {\n\t        if (i < low || i > high) {\n\t            for (j = i; j < nn; j++) {\n\t                V[i][j] = H[i][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    for (j = nn - 1; j >= low; j--) {\n\t        for (i = low; i <= high; i++) {\n\t            z = 0;\n\t            for (k = low; k <= Math.min(j, high); k++) {\n\t                z = z + V[i][k] * H[k][j];\n\t            }\n\t            V[i][j] = z;\n\t        }\n\t    }\n\t}\n\t\n\tfunction cdiv(xr, xi, yr, yi) {\n\t    var r, d;\n\t    if (Math.abs(yr) > Math.abs(yi)) {\n\t        r = yi / yr;\n\t        d = yr + r * yi;\n\t        return [(xr + r * xi) / d, (xi - r * xr) / d];\n\t    }\n\t    else {\n\t        r = yr / yi;\n\t        d = yi + r * yr;\n\t        return [(r * xr + xi) / d, (r * xi - xr) / d];\n\t    }\n\t}\n\t\n\tmodule.exports = EigenvalueDecomposition;\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(6);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\n\tfunction LuDecomposition(matrix) {\n\t    if (!(this instanceof LuDecomposition)) {\n\t        return new LuDecomposition(matrix);\n\t    }\n\t    matrix = Matrix.checkMatrix(matrix);\n\t\n\t    var lu = matrix.clone(),\n\t        rows = lu.rows,\n\t        columns = lu.columns,\n\t        pivotVector = new Array(rows),\n\t        pivotSign = 1,\n\t        i, j, k, p, s, t, v,\n\t        LUrowi, LUcolj, kmax;\n\t\n\t    for (i = 0; i < rows; i++) {\n\t        pivotVector[i] = i;\n\t    }\n\t\n\t    LUcolj = new Array(rows);\n\t\n\t    for (j = 0; j < columns; j++) {\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUcolj[i] = lu[i][j];\n\t        }\n\t\n\t        for (i = 0; i < rows; i++) {\n\t            LUrowi = lu[i];\n\t            kmax = Math.min(i, j);\n\t            s = 0;\n\t            for (k = 0; k < kmax; k++) {\n\t                s += LUrowi[k] * LUcolj[k];\n\t            }\n\t            LUrowi[j] = LUcolj[i] -= s;\n\t        }\n\t\n\t        p = j;\n\t        for (i = j + 1; i < rows; i++) {\n\t            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n\t                p = i;\n\t            }\n\t        }\n\t\n\t        if (p !== j) {\n\t            for (k = 0; k < columns; k++) {\n\t                t = lu[p][k];\n\t                lu[p][k] = lu[j][k];\n\t                lu[j][k] = t;\n\t            }\n\t\n\t            v = pivotVector[p];\n\t            pivotVector[p] = pivotVector[j];\n\t            pivotVector[j] = v;\n\t\n\t            pivotSign = -pivotSign;\n\t        }\n\t\n\t        if (j < rows && lu[j][j] !== 0) {\n\t            for (i = j + 1; i < rows; i++) {\n\t                lu[i][j] /= lu[j][j];\n\t            }\n\t        }\n\t    }\n\t\n\t    this.LU = lu;\n\t    this.pivotVector = pivotVector;\n\t    this.pivotSign = pivotSign;\n\t}\n\t\n\tLuDecomposition.prototype = {\n\t    isSingular: function () {\n\t        var data = this.LU,\n\t            col = data.columns;\n\t        for (var j = 0; j < col; j++) {\n\t            if (data[j][j] === 0) {\n\t                return true;\n\t            }\n\t        }\n\t        return false;\n\t    },\n\t    get determinant() {\n\t        var data = this.LU;\n\t        if (!data.isSquare())\n\t            throw new Error('Matrix must be square');\n\t        var determinant = this.pivotSign, col = data.columns;\n\t        for (var j = 0; j < col; j++)\n\t            determinant *= data[j][j];\n\t        return determinant;\n\t    },\n\t    get lowerTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i > j) {\n\t                    X[i][j] = data[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = 1;\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var data = this.LU,\n\t            rows = data.rows,\n\t            columns = data.columns,\n\t            X = new Matrix(rows, columns);\n\t        for (var i = 0; i < rows; i++) {\n\t            for (var j = 0; j < columns; j++) {\n\t                if (i <= j) {\n\t                    X[i][j] = data[i][j];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get pivotPermutationVector() {\n\t        return this.pivotVector.slice();\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var lu = this.LU,\n\t            rows = lu.rows;\n\t\n\t        if (rows !== value.rows)\n\t            throw new Error('Invalid matrix dimensions');\n\t        if (this.isSingular())\n\t            throw new Error('LU matrix is singular');\n\t\n\t        var count = value.columns,\n\t            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n\t            columns = lu.columns,\n\t            i, j, k;\n\t\n\t        for (k = 0; k < columns; k++) {\n\t            for (i = k + 1; i < columns; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= lu[k][k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * lu[i][k];\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = LuDecomposition;\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(6);\n\tvar hypotenuse = __webpack_require__(9).hypotenuse;\n\t\n\t//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\n\tfunction QrDecomposition(value) {\n\t    if (!(this instanceof QrDecomposition)) {\n\t        return new QrDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t\n\t    var qr = value.clone(),\n\t        m = value.rows,\n\t        n = value.columns,\n\t        rdiag = new Array(n),\n\t        i, j, k, s;\n\t\n\t    for (k = 0; k < n; k++) {\n\t        var nrm = 0;\n\t        for (i = k; i < m; i++) {\n\t            nrm = hypotenuse(nrm, qr[i][k]);\n\t        }\n\t        if (nrm !== 0) {\n\t            if (qr[k][k] < 0) {\n\t                nrm = -nrm;\n\t            }\n\t            for (i = k; i < m; i++) {\n\t                qr[i][k] /= nrm;\n\t            }\n\t            qr[k][k] += 1;\n\t            for (j = k + 1; j < n; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * qr[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    qr[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        rdiag[k] = -nrm;\n\t    }\n\t\n\t    this.QR = qr;\n\t    this.Rdiag = rdiag;\n\t}\n\t\n\tQrDecomposition.prototype = {\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var qr = this.QR,\n\t            m = qr.rows;\n\t\n\t        if (value.rows !== m)\n\t            throw new Error('Matrix row dimensions must agree');\n\t        if (!this.isFullRank())\n\t            throw new Error('Matrix is rank deficient');\n\t\n\t        var count = value.columns,\n\t            X = value.clone(),\n\t            n = qr.columns,\n\t            i, j, k, s;\n\t\n\t        for (k = 0; k < n; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                s = 0;\n\t                for (i = k; i < m; i++) {\n\t                    s += qr[i][k] * X[i][j];\n\t                }\n\t                s = -s / qr[k][k];\n\t                for (i = k; i < m; i++) {\n\t                    X[i][j] += s * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t        for (k = n - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                X[k][j] /= this.Rdiag[k];\n\t            }\n\t            for (i = 0; i < k; i++) {\n\t                for (j = 0; j < count; j++) {\n\t                    X[i][j] -= X[k][j] * qr[i][k];\n\t                }\n\t            }\n\t        }\n\t\n\t        return X.subMatrix(0, n - 1, 0, count - 1);\n\t    },\n\t    isFullRank: function () {\n\t        var columns = this.QR.columns;\n\t        for (var i = 0; i < columns; i++) {\n\t            if (this.Rdiag[i] === 0) {\n\t                return false;\n\t            }\n\t        }\n\t        return true;\n\t    },\n\t    get upperTriangularFactor() {\n\t        var qr = this.QR,\n\t            n = qr.columns,\n\t            X = new Matrix(n, n),\n\t            i, j;\n\t        for (i = 0; i < n; i++) {\n\t            for (j = 0; j < n; j++) {\n\t                if (i < j) {\n\t                    X[i][j] = qr[i][j];\n\t                } else if (i === j) {\n\t                    X[i][j] = this.Rdiag[i];\n\t                } else {\n\t                    X[i][j] = 0;\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    },\n\t    get orthogonalFactor() {\n\t        var qr = this.QR,\n\t            rows = qr.rows,\n\t            columns = qr.columns,\n\t            X = new Matrix(rows, columns),\n\t            i, j, k, s;\n\t\n\t        for (k = columns - 1; k >= 0; k--) {\n\t            for (i = 0; i < rows; i++) {\n\t                X[i][k] = 0;\n\t            }\n\t            X[k][k] = 1;\n\t            for (j = k; j < columns; j++) {\n\t                if (qr[k][k] !== 0) {\n\t                    s = 0;\n\t                    for (i = k; i < rows; i++) {\n\t                        s += qr[i][k] * X[i][j];\n\t                    }\n\t\n\t                    s = -s / qr[k][k];\n\t\n\t                    for (i = k; i < rows; i++) {\n\t                        X[i][j] += s * qr[i][k];\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        return X;\n\t    }\n\t};\n\t\n\tmodule.exports = QrDecomposition;\n\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(6);\n\t\n\t// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\n\tfunction CholeskyDecomposition(value) {\n\t    if (!(this instanceof CholeskyDecomposition)) {\n\t        return new CholeskyDecomposition(value);\n\t    }\n\t    value = Matrix.checkMatrix(value);\n\t    if (!value.isSymmetric())\n\t        throw new Error('Matrix is not symmetric');\n\t\n\t    var a = value,\n\t        dimension = a.rows,\n\t        l = new Matrix(dimension, dimension),\n\t        positiveDefinite = true,\n\t        i, j, k;\n\t\n\t    for (j = 0; j < dimension; j++) {\n\t        var Lrowj = l[j];\n\t        var d = 0;\n\t        for (k = 0; k < j; k++) {\n\t            var Lrowk = l[k];\n\t            var s = 0;\n\t            for (i = 0; i < k; i++) {\n\t                s += Lrowk[i] * Lrowj[i];\n\t            }\n\t            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n\t            d = d + s * s;\n\t        }\n\t\n\t        d = a[j][j] - d;\n\t\n\t        positiveDefinite &= (d > 0);\n\t        l[j][j] = Math.sqrt(Math.max(d, 0));\n\t        for (k = j + 1; k < dimension; k++) {\n\t            l[j][k] = 0;\n\t        }\n\t    }\n\t\n\t    if (!positiveDefinite) {\n\t        throw new Error('Matrix is not positive definite');\n\t    }\n\t\n\t    this.L = l;\n\t}\n\t\n\tCholeskyDecomposition.prototype = {\n\t    get leftTriangularFactor() {\n\t        return this.L;\n\t    },\n\t    solve: function (value) {\n\t        value = Matrix.checkMatrix(value);\n\t\n\t        var l = this.L,\n\t            dimension = l.rows;\n\t\n\t        if (value.rows !== dimension) {\n\t            throw new Error('Matrix dimensions do not match');\n\t        }\n\t\n\t        var count = value.columns,\n\t            B = value.clone(),\n\t            i, j, k;\n\t\n\t        for (k = 0; k < dimension; k++) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = 0; i < k; i++) {\n\t                    B[k][j] -= B[i][j] * l[k][i];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        for (k = dimension - 1; k >= 0; k--) {\n\t            for (j = 0; j < count; j++) {\n\t                for (i = k + 1; i < dimension; i++) {\n\t                    B[k][j] -= B[i][j] * l[i][k];\n\t                }\n\t                B[k][j] /= l[k][k];\n\t            }\n\t        }\n\t\n\t        return B;\n\t    }\n\t};\n\t\n\tmodule.exports = CholeskyDecomposition;\n\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t/**\n\t * Created by acastillo on 8/24/15.\n\t */\n\t/**\n\t * Non in-place function definitions, compatible with mathjs code *\n\t */\n\t\n\t'use strict';\n\t\n\tvar Matrix = __webpack_require__(5);\n\t\n\tfunction matrix(A,B){\n\t    return new Matrix(A,B);\n\t}\n\t\n\tfunction ones(rows, cols){\n\t    return Matrix.ones(rows,cols);\n\t}\n\t\n\tfunction eye(rows, cols){\n\t    return Matrix.eye(rows, cols);\n\t}\n\t\n\tfunction zeros(rows, cols){\n\t    return Matrix.zeros(rows, cols);\n\t}\n\t\n\tfunction random(rows, cols){\n\t    return Matrix.rand(rows,cols);\n\t}\n\t\n\tfunction transpose(A){\n\t    if(typeof A == 'number')\n\t        return A;\n\t    var result = A.clone();\n\t    return result.transpose();\n\t}\n\t\n\tfunction add(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A+B;\n\t    if(typeof A == 'number')\n\t        return this.add(B,A);\n\t\n\t    var result = A.clone();\n\t    return result.add(B);\n\t\n\t}\n\t\n\tfunction subtract(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A-B;\n\t    if(typeof A == 'number')\n\t        return this.subtract(B,A);\n\t    var result = A.clone();\n\t    return result.sub(B);\n\t}\n\t\n\tfunction multiply(A, B){\n\t    if(typeof A == 'number'&&typeof B === 'number')\n\t        return A*B;\n\t    if(typeof A == 'number')\n\t        return this.multiply(B,A);\n\t\n\t    var result = A.clone();\n\t\n\t    if(typeof B === 'number')\n\t        result.mul(B);\n\t    else\n\t        result = result.mmul(B);\n\t\n\t    if(result.rows==1&&result.columns==1)\n\t        return result[0][0];\n\t    else\n\t        return result;\n\t\n\t}\n\t\n\tfunction dotMultiply(A, B){\n\t    var result = A.clone();\n\t    return result.mul(B);\n\t}\n\t\n\tfunction dotDivide(A, B){\n\t    var result = A.clone();\n\t    return result.div(B);\n\t}\n\t\n\tfunction diag(A){\n\t    var diag = null;\n\t    var rows = A.rows, cols = A.columns, j, r;\n\t    //It is an array\n\t    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n\t        if(A[0]&&A[0].length){\n\t            rows = A.length;\n\t            cols = A[0].length;\n\t            r = Math.min(rows,cols);\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j][j];\n\t            }\n\t        }\n\t        else{\n\t            cols = A.length;\n\t            diag = Matrix.zeros(cols, cols);\n\t            for (j = 0; j < cols; j++) {\n\t                diag[j][j]=A[j];\n\t            }\n\t        }\n\t\n\t    }\n\t    if(rows == 1){\n\t        diag = Matrix.zeros(cols, cols);\n\t        for (j = 0; j < cols; j++) {\n\t            diag[j][j]=A[0][j];\n\t        }\n\t    }\n\t    else{\n\t        if(rows>0 && cols > 0){\n\t            r = Math.min(rows,cols);\n\t            diag = new Array(r);\n\t            for (j = 0; j < r; j++) {\n\t                diag[j] = A[j][j];\n\t            }\n\t        }\n\t    }\n\t    return diag;\n\t}\n\t\n\tfunction min(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.min(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] < B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction max(A, B){\n\t    if(typeof A==='number' && typeof B ==='number')\n\t        return Math.max(A,B);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            if (A[i][j] > B[i][j]) {\n\t                result[i][j] = A[i][j];\n\t            }\n\t            else{\n\t                result[i][j] = B[i][j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction sqrt(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.sqrt(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction abs(A){\n\t    if(typeof A==='number' )\n\t        return Math.abs(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.abs(A[i][j]);\n\t\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction exp(A){\n\t    if(typeof A==='number' )\n\t        return Math.sqrt(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.exp(A[i][j]);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction dotPow(A, b){\n\t    if(typeof A==='number' )\n\t        return Math.pow(A,b);\n\t    //console.log(A);\n\t    var ii = A.rows, jj = A.columns;\n\t    var result = new Matrix(ii,jj);\n\t    for (var i = 0; i < ii; i++) {\n\t        for (var j = 0; j < jj; j++) {\n\t            result[i][j] = Math.pow(A[i][j],b);\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction solve(A, B){\n\t    return A.solve(B);\n\t}\n\t\n\tfunction inv(A){\n\t    if(typeof A ===\"number\")\n\t        return 1/A;\n\t    return A.inverse();\n\t}\n\t\n\tmodule.exports = {\n\t    transpose:transpose,\n\t    add:add,\n\t    subtract:subtract,\n\t    multiply:multiply,\n\t    dotMultiply:dotMultiply,\n\t    dotDivide:dotDivide,\n\t    diag:diag,\n\t    min:min,\n\t    max:max,\n\t    solve:solve,\n\t    inv:inv,\n\t    sqrt:sqrt,\n\t    exp:exp,\n\t    dotPow:dotPow,\n\t    abs:abs,\n\t    matrix:matrix,\n\t    ones:ones,\n\t    zeros:zeros,\n\t    random:random,\n\t    eye:eye\n\t};\n\n\n/***/ },\n/* 15 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tvar Opt = __webpack_require__(2);\n\tvar stats = __webpack_require__(16);\n\tvar extend = __webpack_require__(19);\n\tvar SG = __webpack_require__(20);\n\t\n\tvar sgDefOptions = {\n\t    windowSize: 9,\n\t    polynomial: 3\n\t};\n\t\n\t\n\tfunction gsd(x, y, options){\n\t    //options = extend({}, defaultOptions, options);\n\t    var options=Object.create(options || {});\n\t    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n\t    if (options.broadRatio===undefined) options.broadRatio=0.00;\n\t    if (options.noiseLevel===undefined) options.noiseLevel=undefined;\n\t    if (options.noiseFactor===undefined) options.noiseFactor=3;\n\t    if (options.maxCriteria===undefined) options.maxCriteria=true;\n\t    if (options.smoothY===undefined) options.smoothY=true;\n\t    if (options.realTopDetection===undefined) options.realTopDetection=false;\n\t\n\t    var sgOptions = extend({}, sgDefOptions, options.sgOptions);\n\t\n\t    //console.log(JSON.stringify(stats.array.minMax(y)));\n\t    if(options.noiseLevel===undefined){\n\t        //We have to know if x is equally spaced\n\t        var maxDx=0, minDx=Number.MAX_VALUE,tmp;\n\t        for(var i=0;i< x.length-1;i++){\n\t            var tmp = Math.abs(x[i+1]-x[i]);\n\t            if(tmp<minDx){\n\t                minDx = tmp;\n\t            }\n\t            if(tmp>maxDx){\n\t                maxDx = tmp;\n\t            }\n\t        }\n\t\n\t        if((maxDx-minDx)/maxDx<0.05){\n\t\n\t            options.noiseLevel = getNoiseLevel(y);\n\t            //console.log(options.noiseLevel+\" \"+stats.array.median(y));\n\t        }\n\t        else{\n\t            options.noiseLevel = 0;\n\t        }\n\t    }\n\t    //console.log(\"options.noiseLevel \"+options.noiseLevel);\n\t    y=[].concat(y);\n\t    var yCorrection = {m:1, b:options.noiseLevel};\n\t    if(!options.maxCriteria){\n\t        yCorrection.m =-1;\n\t        yCorrection.b*=-1;\n\t    }\n\t\n\t    for (var i=0; i<y.length; i++){\n\t        y[i]=yCorrection.m*y[i]-yCorrection.b;\n\t    }\n\t\n\t    for (var i=0; i<y.length; i++) {\n\t        if (y[i] < 0) {\n\t            y[i] = 0;\n\t        }\n\t    }\n\t\n\t    //If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n\t    var Y = y;\n\t    if((maxDx-minDx)/maxDx<0.05){\n\t        if(options.smoothY)\n\t            Y = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n\t        var dY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n\t        var ddY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n\t    }\n\t    else{\n\t        if(options.smoothY)\n\t            Y = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n\t        var dY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n\t        var ddY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n\t    }\n\t\n\t    var X = x;\n\t    var dx = x[1]-x[0];\n\t    var maxDdy=0;\n\t    var maxY = 0;\n\t    //console.log(Y.length);\n\t    for (var i = 0; i < Y.length ; i++){\n\t        if(Math.abs(ddY[i])>maxDdy){\n\t            maxDdy = Math.abs(ddY[i]);\n\t        }\n\t        if(Math.abs(Y[i])>maxY){\n\t            maxY = Math.abs(Y[i]);\n\t        }\n\t    }\n\t    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\t\n\t    var minddY = [];\n\t    var intervalL = [];\n\t    var intervalR = [];\n\t    var lastMax = null;\n\t    var lastMin = null;\n\t    var broadMask = new Array();\n\t    //console.log(dx);\n\t    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n\t    for (var i = 1; i < Y.length -1 ; i++){\n\t        //console.log(dY[i]);\n\t        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n\t            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n\t            lastMin = X[i];\n\t            //console.log(\"min \"+lastMin);\n\t            if(dx>0&&lastMax!=null){\n\t                intervalL.push(lastMax);\n\t                intervalR.push(lastMin);\n\t\n\t            }\n\t        }\n\t\n\t        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n\t            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n\t            lastMax = X[i];\n\t            //console.log(\"max \"+lastMax);\n\t            if(dx<0&&lastMin!=null){\n\t                intervalL.push(lastMax);\n\t                intervalR.push(lastMin);\n\t            }\n\t        }\n\t        if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n\t            minddY.push(i);//( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n\t            if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n\t                broadMask.push(false);\n\t            }\n\t            else{\n\t                broadMask.push(true);\n\t            }\n\t        }\n\t    }\n\t    //\n\t    //console.log(intervalL.length+\" \"+minddY.length+\" \"+broadMask.length);\n\t    var signals = [];\n\t    var lastK = 0,possible, k, f,frequency, distanceJ, minDistance, gettingCloser;\n\t    for (var j = 0; j < minddY.length; j++){\n\t        frequency = X[minddY[j]];//minddY[j][0];\n\t        possible = -1;\n\t        k=lastK+1;\n\t        minDistance = Number.MAX_VALUE;\n\t        distanceJ = 0;\n\t        gettingCloser=true;\n\t        while(possible==-1&&k<intervalL.length&&gettingCloser){\n\t            distanceJ = Math.abs(frequency-(intervalL[k]+intervalR[k])/2);\n\t            //Still getting closer?\n\t            if(distanceJ<minDistance){\n\t                minDistance = distanceJ;\n\t            }\n\t            else{\n\t                gettingCloser = false;\n\t            }\n\t            if( distanceJ <Math.abs(intervalL[k]-intervalR[k])/2){\n\t                possible=k;\n\t                lastK = k;\n\t            }\n\t            k++;\n\t        }\n\t        //console.log(lastK+\" \"+intervalL.length+\" possible \"+k);\n\t        if (possible!=-1){\n\t            //console.log(height);\n\t            if (Math.abs(Y[minddY[j]]) > options.minMaxRatio*maxY) {\n\t                signals.push({\n\t                    i:minddY[j],\n\t                    x: frequency,\n\t                    y: (Y[minddY[j]]-yCorrection.b)/yCorrection.m,\n\t                    width:Math.abs(intervalR[possible] - intervalL[possible]),//widthCorrection\n\t                    soft:broadMask[j]\n\t                })\n\t            }\n\t        }\n\t    }\n\t\n\t\n\t    if(options.realTopDetection){\n\t        realTopDetection(signals,X,Y);\n\t    }\n\t\n\t    //Correct the values to fit the original spectra data\n\t    for(var j=0;j<signals.length;j++){\n\t        signals[j].base=options.noiseLevel;\n\t    }\n\t\n\t    signals.sort(function (a, b) {\n\t        return a.x - b.x;\n\t    });\n\t\n\t    return signals;\n\t\n\t}\n\t\n\tfunction getNoiseLevel(y){\n\t    var mean = 0,stddev=0;\n\t    var length = y.length,i=0;\n\t    for(i = 0; i < length; i++){\n\t        mean+=y[i];\n\t    }\n\t    mean/=length;\n\t    var averageDeviations = new Array(length);\n\t    for (i = 0; i < length; i++)\n\t        averageDeviations[i] = Math.abs(y[i] - mean);\n\t    averageDeviations.sort();\n\t    if (length % 2 == 1) {\n\t        stddev = averageDeviations[(length-1)/2] / 0.6745;\n\t    } else {\n\t        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n\t    }\n\t\n\t    return stddev;\n\t}\n\t\n\tfunction realTopDetection(peakList, x, y){\n\t    //console.log(peakList);\n\t    //console.log(x);\n\t    //console.log(y);\n\t    var listP = [];\n\t    var alpha, beta, gamma, p,currentPoint;\n\t    for(var j=0;j<peakList.length;j++){\n\t        currentPoint = peakList[j].i;//peakList[j][2];\n\t        var tmp = currentPoint;\n\t        //The detected peak could be moved 1 or 2 unit to left or right.\n\t        if(y[currentPoint-1]>=y[currentPoint-2]\n\t            &&y[currentPoint-1]>=y[currentPoint]) {\n\t            currentPoint--;\n\t        }\n\t        else{\n\t            if(y[currentPoint+1]>=y[currentPoint]\n\t                &&y[currentPoint+1]>=y[currentPoint+2]) {\n\t                currentPoint++;\n\t            }\n\t            else{\n\t                if(y[currentPoint-2]>=y[currentPoint-3]\n\t                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n\t                    currentPoint-=2;\n\t                }\n\t                else{\n\t                    if(y[currentPoint+2]>=y[currentPoint+1]\n\t                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n\t                        currentPoint+=2;\n\t                    }\n\t                }\n\t            }\n\t        }\n\t        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n\t            &&y[currentPoint]>=y[currentPoint-1]\n\t            &&y[currentPoint]>=y[currentPoint+1]) {\n\t            alpha = 20 * Math.log10(y[currentPoint - 1]);\n\t            beta = 20 * Math.log10(y[currentPoint]);\n\t            gamma = 20 * Math.log10(y[currentPoint + 1]);\n\t            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\t            //console.log(\"p: \"+p);\n\t            //console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n\t            peakList[j].x = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n\t            peakList[j].y = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n\t                - y[currentPoint + 1]) * p;//signal.peaks[j].intensity);\n\t            //console.log(y[tmp]+\" \"+peakList[j].y);\n\t        }\n\t    }\n\t}\n\t\n\tmodule.exports=gsd;\n\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.array = __webpack_require__(17);\n\texports.matrix = __webpack_require__(18);\n\n\n/***/ },\n/* 17 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tfunction compareNumbers(a, b) {\n\t    return a - b;\n\t}\n\t\n\t/**\n\t * Computes the sum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.sum = function sum(values) {\n\t    var sum = 0;\n\t    for (var i = 0; i < values.length; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum;\n\t};\n\t\n\t/**\n\t * Computes the maximum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.max = function max(values) {\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return max;\n\t};\n\t\n\t/**\n\t * Computes the minimum of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.min = function min(values) {\n\t    var min = Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t    }\n\t    return min;\n\t};\n\t\n\t/**\n\t * Computes the min and max of the given values\n\t * @param {Array} values\n\t * @returns {{min: number, max: number}}\n\t */\n\texports.minMax = function minMax(values) {\n\t    var min = Infinity;\n\t    var max = -Infinity;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] < min) min = values[i];\n\t        if (values[i] > max) max = values[i];\n\t    }\n\t    return {\n\t        min: min,\n\t        max: max\n\t    };\n\t};\n\t\n\t/**\n\t * Computes the arithmetic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.arithmeticMean = function arithmeticMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / l;\n\t};\n\t\n\t/**\n\t * {@link arithmeticMean}\n\t */\n\texports.mean = exports.arithmeticMean;\n\t\n\t/**\n\t * Computes the geometric mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.geometricMean = function geometricMean(values) {\n\t    var mul = 1;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        mul *= values[i];\n\t    }\n\t    return Math.pow(mul, 1 / l);\n\t};\n\t\n\t/**\n\t * Computes the mean of the log of the given values\n\t * If the return value is exponentiated, it gives the same result as the\n\t * geometric mean.\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.logMean = function logMean(values) {\n\t    var lnsum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        lnsum += Math.log(values[i]);\n\t    }\n\t    return lnsum / l;\n\t};\n\t\n\t/**\n\t * Computes the weighted grand mean for a list of means and sample sizes\n\t * @param {Array} means - Mean values for each set of samples\n\t * @param {Array} samples - Number of original values for each set of samples\n\t * @returns {number}\n\t */\n\texports.grandMean = function grandMean(means, samples) {\n\t    var sum = 0;\n\t    var n = 0;\n\t    var l = means.length;\n\t    for (var i = 0; i < l; i++) {\n\t        sum += samples[i] * means[i];\n\t        n += samples[i];\n\t    }\n\t    return sum / n;\n\t};\n\t\n\t/**\n\t * Computes the truncated mean of the given values using a given percentage\n\t * @param {Array} values\n\t * @param {number} percent - The percentage of values to keep (range: [0,1])\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var k = Math.floor(l * percent);\n\t    var sum = 0;\n\t    for (var i = k; i < (l - k); i++) {\n\t        sum += values[i];\n\t    }\n\t    return sum / (l - 2 * k);\n\t};\n\t\n\t/**\n\t * Computes the harmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.harmonicMean = function harmonicMean(values) {\n\t    var sum = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        if (values[i] === 0) {\n\t            throw new RangeError('value at index ' + i + 'is zero');\n\t        }\n\t        sum += 1 / values[i];\n\t    }\n\t    return l / sum;\n\t};\n\t\n\t/**\n\t * Computes the contraharmonic mean of the given values\n\t * @param {Array} values\n\t * @returns {number}\n\t */\n\texports.contraHarmonicMean = function contraHarmonicMean(values) {\n\t    var r1 = 0;\n\t    var r2 = 0;\n\t    var l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        r1 += values[i] * values[i];\n\t        r2 += values[i];\n\t    }\n\t    if (r2 < 0) {\n\t        throw new RangeError('sum of values is negative');\n\t    }\n\t    return r1 / r2;\n\t};\n\t\n\t/**\n\t * Computes the median of the given values\n\t * @param {Array} values\n\t * @param {boolean} [alreadySorted=false]\n\t * @returns {number}\n\t */\n\texports.median = function median(values, alreadySorted) {\n\t    if (alreadySorted === undefined) alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice().sort(compareNumbers);\n\t    }\n\t    var l = values.length;\n\t    var half = Math.floor(l / 2);\n\t    if (l % 2 === 0) {\n\t        return (values[half - 1] + values[half]) * 0.5;\n\t    } else {\n\t        return values[half];\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the variance of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.variance = function variance(values, unbiased) {\n\t    if (unbiased === undefined) unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var theVariance = 0;\n\t    var l = values.length;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var x = values[i] - theMean;\n\t        theVariance += x * x;\n\t    }\n\t\n\t    if (unbiased) {\n\t        return theVariance / (l - 1);\n\t    } else {\n\t        return theVariance / l;\n\t    }\n\t};\n\t\n\t/**\n\t * Computes the standard deviation of the given values\n\t * @param {Array} values\n\t * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n\t * @returns {number}\n\t */\n\texports.standardDeviation = function standardDeviation(values, unbiased) {\n\t    return Math.sqrt(exports.variance(values, unbiased));\n\t};\n\t\n\texports.standardError = function standardError(values) {\n\t    return exports.standardDeviation(values) / Math.sqrt(values.length);\n\t};\n\t\n\texports.quartiles = function quartiles(values, alreadySorted) {\n\t    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n\t    if (!alreadySorted) {\n\t        values = values.slice();\n\t        values.sort(compareNumbers);\n\t    }\n\t\n\t    var quart = values.length / 4;\n\t    var q1 = values[Math.ceil(quart) - 1];\n\t    var q2 = exports.median(values, true);\n\t    var q3 = values[Math.ceil(quart * 3) - 1];\n\t\n\t    return {q1: q1, q2: q2, q3: q3};\n\t};\n\t\n\texports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n\t    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n\t};\n\t\n\texports.pooledVariance = function pooledVariance(samples, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var sum = 0;\n\t    var length = 0, l = samples.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var values = samples[i];\n\t        var vari = exports.variance(values);\n\t\n\t        sum += (values.length - 1) * vari;\n\t\n\t        if (unbiased)\n\t            length += values.length - 1;\n\t        else\n\t            length += values.length;\n\t    }\n\t    return sum / length;\n\t};\n\t\n\texports.mode = function mode(values) {\n\t    var l = values.length,\n\t        itemCount = new Array(l),\n\t        i;\n\t    for (i = 0; i < l; i++) {\n\t        itemCount[i] = 0;\n\t    }\n\t    var itemArray = new Array(l);\n\t    var count = 0;\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var index = itemArray.indexOf(values[i]);\n\t        if (index >= 0)\n\t            itemCount[index]++;\n\t        else {\n\t            itemArray[count] = values[i];\n\t            itemCount[count] = 1;\n\t            count++;\n\t        }\n\t    }\n\t\n\t    var maxValue = 0, maxIndex = 0;\n\t    for (i = 0; i < count; i++) {\n\t        if (itemCount[i] > maxValue) {\n\t            maxValue = itemCount[i];\n\t            maxIndex = i;\n\t        }\n\t    }\n\t\n\t    return itemArray[maxIndex];\n\t};\n\t\n\texports.covariance = function covariance(vector1, vector2, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var mean1 = exports.mean(vector1);\n\t    var mean2 = exports.mean(vector2);\n\t\n\t    if (vector1.length !== vector2.length)\n\t        throw \"Vectors do not have the same dimensions\";\n\t\n\t    var cov = 0, l = vector1.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var x = vector1[i] - mean1;\n\t        var y = vector2[i] - mean2;\n\t        cov += x * y;\n\t    }\n\t\n\t    if (unbiased)\n\t        return cov / (l - 1);\n\t    else\n\t        return cov / l;\n\t};\n\t\n\texports.skewness = function skewness(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t\n\t    var s2 = 0, s3 = 0, l = values.length;\n\t    for (var i = 0; i < l; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s3 += dev * dev * dev;\n\t    }\n\t    var m2 = s2 / l;\n\t    var m3 = s3 / l;\n\t\n\t    var g = m3 / (Math.pow(m2, 3 / 2.0));\n\t    if (unbiased) {\n\t        var a = Math.sqrt(l * (l - 1));\n\t        var b = l - 2;\n\t        return (a / b) * g;\n\t    }\n\t    else {\n\t        return g;\n\t    }\n\t};\n\t\n\texports.kurtosis = function kurtosis(values, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var theMean = exports.mean(values);\n\t    var n = values.length, s2 = 0, s4 = 0;\n\t\n\t    for (var i = 0; i < n; i++) {\n\t        var dev = values[i] - theMean;\n\t        s2 += dev * dev;\n\t        s4 += dev * dev * dev * dev;\n\t    }\n\t    var m2 = s2 / n;\n\t    var m4 = s4 / n;\n\t\n\t    if (unbiased) {\n\t        var v = s2 / (n - 1);\n\t        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t        var b = s4 / (v * v);\n\t        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t\n\t        return a * b - 3 * c;\n\t    }\n\t    else {\n\t        return m4 / (m2 * m2) - 3;\n\t    }\n\t};\n\t\n\texports.entropy = function entropy(values, eps) {\n\t    if (typeof(eps) === 'undefined') eps = 0;\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * Math.log(values[i] + eps);\n\t    return -sum;\n\t};\n\t\n\texports.weightedMean = function weightedMean(values, weights) {\n\t    var sum = 0, l = values.length;\n\t    for (var i = 0; i < l; i++)\n\t        sum += values[i] * weights[i];\n\t    return sum;\n\t};\n\t\n\texports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n\t    return Math.sqrt(exports.weightedVariance(values, weights));\n\t};\n\t\n\texports.weightedVariance = function weightedVariance(values, weights) {\n\t    var theMean = exports.weightedMean(values, weights);\n\t    var vari = 0, l = values.length;\n\t    var a = 0, b = 0;\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        var z = values[i] - theMean;\n\t        var w = weights[i];\n\t\n\t        vari += w * (z * z);\n\t        b += w;\n\t        a += w * w;\n\t    }\n\t\n\t    return vari * (b / (b * b - a));\n\t};\n\t\n\texports.center = function center(values, inPlace) {\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t\n\t    var result = values;\n\t    if (!inPlace)\n\t        result = values.slice();\n\t\n\t    var theMean = exports.mean(result), l = result.length;\n\t    for (var i = 0; i < l; i++)\n\t        result[i] -= theMean;\n\t};\n\t\n\texports.standardize = function standardize(values, standardDev, inPlace) {\n\t    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n\t    if (typeof(inPlace) === 'undefined') inPlace = false;\n\t    var l = values.length;\n\t    var result = inPlace ? values : new Array(l);\n\t    for (var i = 0; i < l; i++)\n\t        result[i] = values[i] / standardDev;\n\t    return result;\n\t};\n\t\n\texports.cumulativeSum = function cumulativeSum(array) {\n\t    var l = array.length;\n\t    var result = new Array(l);\n\t    result[0] = array[0];\n\t    for (var i = 1; i < l; i++)\n\t        result[i] = result[i - 1] + array[i];\n\t    return result;\n\t};\n\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\tvar arrayStat = __webpack_require__(17);\n\t\n\t// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\t\n\tfunction entropy(matrix, eps) {\n\t    if (typeof(eps) === 'undefined') {\n\t        eps = 0;\n\t    }\n\t    var sum = 0,\n\t        l1 = matrix.length,\n\t        l2 = matrix[0].length;\n\t    for (var i = 0; i < l1; i++) {\n\t        for (var j = 0; j < l2; j++) {\n\t            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n\t        }\n\t    }\n\t    return -sum;\n\t}\n\t\n\tfunction mean(matrix, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        theMean, N, i, j;\n\t\n\t    if (dimension === -1) {\n\t        theMean = [0];\n\t        N = rows * cols;\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = 0; j < cols; j++) {\n\t                theMean[0] += matrix[i][j];\n\t            }\n\t        }\n\t        theMean[0] /= N;\n\t    } else if (dimension === 0) {\n\t        theMean = new Array(cols);\n\t        N = rows;\n\t        for (j = 0; j < cols; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < rows; i++) {\n\t                theMean[j] += matrix[i][j];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else if (dimension === 1) {\n\t        theMean = new Array(rows);\n\t        N = cols;\n\t        for (j = 0; j < rows; j++) {\n\t            theMean[j] = 0;\n\t            for (i = 0; i < cols; i++) {\n\t                theMean[j] += matrix[j][i];\n\t            }\n\t            theMean[j] /= N;\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t    return theMean;\n\t}\n\t\n\tfunction standardDeviation(matrix, means, unbiased) {\n\t    var vari = variance(matrix, means, unbiased), l = vari.length;\n\t    for (var i = 0; i < l; i++) {\n\t        vari[i] = Math.sqrt(vari[i]);\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction variance(matrix, means, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') {\n\t        unbiased = true;\n\t    }\n\t    means = means || mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum1 = 0, sum2 = 0, x = 0;\n\t        for (var i = 0; i < rows; i++) {\n\t            x = matrix[i][j] - means[j];\n\t            sum1 += x;\n\t            sum2 += x * x;\n\t        }\n\t        if (unbiased) {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n\t        } else {\n\t            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n\t        }\n\t    }\n\t    return vari;\n\t}\n\t\n\tfunction median(matrix) {\n\t    var rows = matrix.length, cols = matrix[0].length;\n\t    var medians = new Array(cols);\n\t\n\t    for (var i = 0; i < cols; i++) {\n\t        var data = new Array(rows);\n\t        for (var j = 0; j < rows; j++) {\n\t            data[j] = matrix[j][i];\n\t        }\n\t        data.sort();\n\t        var N = data.length;\n\t        if (N % 2 === 0) {\n\t            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n\t        } else {\n\t            medians[i] = data[Math.floor(N / 2)];\n\t        }\n\t    }\n\t    return medians;\n\t}\n\t\n\tfunction mode(matrix) {\n\t    var rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        modes = new Array(cols),\n\t        i, j;\n\t    for (i = 0; i < cols; i++) {\n\t        var itemCount = new Array(rows);\n\t        for (var k = 0; k < rows; k++) {\n\t            itemCount[k] = 0;\n\t        }\n\t        var itemArray = new Array(rows);\n\t        var count = 0;\n\t\n\t        for (j = 0; j < rows; j++) {\n\t            var index = itemArray.indexOf(matrix[j][i]);\n\t            if (index >= 0) {\n\t                itemCount[index]++;\n\t            } else {\n\t                itemArray[count] = matrix[j][i];\n\t                itemCount[count] = 1;\n\t                count++;\n\t            }\n\t        }\n\t\n\t        var maxValue = 0, maxIndex = 0;\n\t        for (j = 0; j < count; j++) {\n\t            if (itemCount[j] > maxValue) {\n\t                maxValue = itemCount[j];\n\t                maxIndex = j;\n\t            }\n\t        }\n\t\n\t        modes[i] = itemArray[maxIndex];\n\t    }\n\t    return modes;\n\t}\n\t\n\tfunction skewness(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, l = means.length;\n\t    var skew = new Array(l);\n\t\n\t    for (var j = 0; j < l; j++) {\n\t        var s2 = 0, s3 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s3 += dev * dev * dev;\n\t        }\n\t\n\t        var m2 = s2 / n;\n\t        var m3 = s3 / n;\n\t        var g = m3 / Math.pow(m2, 3 / 2);\n\t\n\t        if (unbiased) {\n\t            var a = Math.sqrt(n * (n - 1));\n\t            var b = n - 2;\n\t            skew[j] = (a / b) * g;\n\t        } else {\n\t            skew[j] = g;\n\t        }\n\t    }\n\t    return skew;\n\t}\n\t\n\tfunction kurtosis(matrix, unbiased) {\n\t    if (typeof(unbiased) === 'undefined') unbiased = true;\n\t    var means = mean(matrix);\n\t    var n = matrix.length, m = matrix[0].length;\n\t    var kurt = new Array(m);\n\t\n\t    for (var j = 0; j < m; j++) {\n\t        var s2 = 0, s4 = 0;\n\t        for (var i = 0; i < n; i++) {\n\t            var dev = matrix[i][j] - means[j];\n\t            s2 += dev * dev;\n\t            s4 += dev * dev * dev * dev;\n\t        }\n\t        var m2 = s2 / n;\n\t        var m4 = s4 / n;\n\t\n\t        if (unbiased) {\n\t            var v = s2 / (n - 1);\n\t            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n\t            var b = s4 / (v * v);\n\t            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\t            kurt[j] = a * b - 3 * c;\n\t        } else {\n\t            kurt[j] = m4 / (m2 * m2) - 3;\n\t        }\n\t    }\n\t    return kurt;\n\t}\n\t\n\tfunction standardError(matrix) {\n\t    var samples = matrix.length;\n\t    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n\t    var standardErrors = new Array(l);\n\t    var sqrtN = Math.sqrt(samples);\n\t\n\t    for (var i = 0; i < l; i++) {\n\t        standardErrors[i] = standardDeviations[i] / sqrtN;\n\t    }\n\t    return standardErrors;\n\t}\n\t\n\tfunction covariance(matrix, dimension) {\n\t    return scatter(matrix, undefined, dimension);\n\t}\n\t\n\tfunction scatter(matrix, divisor, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    if (typeof(divisor) === 'undefined') {\n\t        if (dimension === 0) {\n\t            divisor = matrix.length - 1;\n\t        } else if (dimension === 1) {\n\t            divisor = matrix[0].length - 1;\n\t        }\n\t    }\n\t    var means = mean(matrix, dimension),\n\t        rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, s, k;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                s /= divisor;\n\t                cov[i][j] = s;\n\t                cov[j][i] = s;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tfunction correlation(matrix) {\n\t    var means = mean(matrix),\n\t        standardDeviations = standardDeviation(matrix, true, means),\n\t        scores = zScores(matrix, means, standardDeviations),\n\t        rows = matrix.length,\n\t        cols = matrix[0].length,\n\t        i, j;\n\t\n\t    var cor = new Array(cols);\n\t    for (i = 0; i < cols; i++) {\n\t        cor[i] = new Array(cols);\n\t    }\n\t    for (i = 0; i < cols; i++) {\n\t        for (j = i; j < cols; j++) {\n\t            var c = 0;\n\t            for (var k = 0, l = scores.length; k < l; k++) {\n\t                c += scores[k][j] * scores[k][i];\n\t            }\n\t            c /= rows - 1;\n\t            cor[i][j] = c;\n\t            cor[j][i] = c;\n\t        }\n\t    }\n\t    return cor;\n\t}\n\t\n\tfunction zScores(matrix, means, standardDeviations) {\n\t    means = means || mean(matrix);\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n\t    return standardize(center(matrix, means, false), standardDeviations, true);\n\t}\n\t\n\tfunction center(matrix, means, inPlace) {\n\t    means = means || mean(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var row = result[i];\n\t        for (j = 0, jj = row.length; j < jj; j++) {\n\t            row[j] = matrix[i][j] - means[j];\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction standardize(matrix, standardDeviations, inPlace) {\n\t    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n\t    var result = matrix,\n\t        l = matrix.length,\n\t        i, j, jj;\n\t\n\t    if (!inPlace) {\n\t        result = new Array(l);\n\t        for (i = 0; i < l; i++) {\n\t            result[i] = new Array(matrix[i].length);\n\t        }\n\t    }\n\t\n\t    for (i = 0; i < l; i++) {\n\t        var resultRow = result[i];\n\t        var sourceRow = matrix[i];\n\t        for (j = 0, jj = resultRow.length; j < jj; j++) {\n\t            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n\t                resultRow[j] = sourceRow[j] / standardDeviations[j];\n\t            }\n\t        }\n\t    }\n\t    return result;\n\t}\n\t\n\tfunction weightedVariance(matrix, weights) {\n\t    var means = mean(matrix);\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length;\n\t    var vari = new Array(cols);\n\t\n\t    for (var j = 0; j < cols; j++) {\n\t        var sum = 0;\n\t        var a = 0, b = 0;\n\t\n\t        for (var i = 0; i < rows; i++) {\n\t            var z = matrix[i][j] - means[j];\n\t            var w = weights[i];\n\t\n\t            sum += w * (z * z);\n\t            b += w;\n\t            a += w * w;\n\t        }\n\t\n\t        vari[j] = sum * (b / (b * b - a));\n\t    }\n\t\n\t    return vari;\n\t}\n\t\n\tfunction weightedMean(matrix, weights, dimension) {\n\t    if (typeof(dimension) === 'undefined') {\n\t        dimension = 0;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) return [];\n\t    var cols = matrix[0].length,\n\t        means, i, ii, j, w, row;\n\t\n\t    if (dimension === 0) {\n\t        means = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            row = matrix[i];\n\t            w = weights[i];\n\t            for (j = 0; j < cols; j++) {\n\t                means[j] += row[j] * w;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        means = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            means[i] = 0;\n\t        }\n\t        for (j = 0; j < rows; j++) {\n\t            row = matrix[j];\n\t            w = weights[j];\n\t            for (i = 0; i < cols; i++) {\n\t                means[j] += row[i] * w;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    var weightSum = arrayStat.sum(weights);\n\t    if (weightSum !== 0) {\n\t        for (i = 0, ii = means.length; i < ii; i++) {\n\t            means[i] /= weightSum;\n\t        }\n\t    }\n\t    return means;\n\t}\n\t\n\tfunction weightedCovariance(matrix, weights, means, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    var s1 = 0, s2 = 0;\n\t    for (var i = 0, ii = weights.length; i < ii; i++) {\n\t        s1 += weights[i];\n\t        s2 += weights[i] * weights[i];\n\t    }\n\t    var factor = s1 / (s1 * s1 - s2);\n\t    return weightedScatter(matrix, weights, means, factor, dimension);\n\t}\n\t\n\tfunction weightedScatter(matrix, weights, means, factor, dimension) {\n\t    dimension = dimension || 0;\n\t    means = means || weightedMean(matrix, weights, dimension);\n\t    if (typeof(factor) === 'undefined') {\n\t        factor = 1;\n\t    }\n\t    var rows = matrix.length;\n\t    if (rows === 0) {\n\t        return [[]];\n\t    }\n\t    var cols = matrix[0].length,\n\t        cov, i, j, k, s;\n\t\n\t    if (dimension === 0) {\n\t        cov = new Array(cols);\n\t        for (i = 0; i < cols; i++) {\n\t            cov[i] = new Array(cols);\n\t        }\n\t        for (i = 0; i < cols; i++) {\n\t            for (j = i; j < cols; j++) {\n\t                s = 0;\n\t                for (k = 0; k < rows; k++) {\n\t                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else if (dimension === 1) {\n\t        cov = new Array(rows);\n\t        for (i = 0; i < rows; i++) {\n\t            cov[i] = new Array(rows);\n\t        }\n\t        for (i = 0; i < rows; i++) {\n\t            for (j = i; j < rows; j++) {\n\t                s = 0;\n\t                for (k = 0; k < cols; k++) {\n\t                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n\t                }\n\t                cov[i][j] = s * factor;\n\t                cov[j][i] = s * factor;\n\t            }\n\t        }\n\t    } else {\n\t        throw new Error('Invalid dimension');\n\t    }\n\t\n\t    return cov;\n\t}\n\t\n\tmodule.exports = {\n\t    entropy: entropy,\n\t    mean: mean,\n\t    standardDeviation: standardDeviation,\n\t    variance: variance,\n\t    median: median,\n\t    mode: mode,\n\t    skewness: skewness,\n\t    kurtosis: kurtosis,\n\t    standardError: standardError,\n\t    covariance: covariance,\n\t    scatter: scatter,\n\t    correlation: correlation,\n\t    zScores: zScores,\n\t    center: center,\n\t    standardize: standardize,\n\t    weightedVariance: weightedVariance,\n\t    weightedMean: weightedMean,\n\t    weightedCovariance: weightedCovariance,\n\t    weightedScatter: weightedScatter\n\t};\n\n\n/***/ },\n/* 19 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar hasOwn = Object.prototype.hasOwnProperty;\n\tvar toStr = Object.prototype.toString;\n\t\n\tvar isArray = function isArray(arr) {\n\t\tif (typeof Array.isArray === 'function') {\n\t\t\treturn Array.isArray(arr);\n\t\t}\n\t\n\t\treturn toStr.call(arr) === '[object Array]';\n\t};\n\t\n\tvar isPlainObject = function isPlainObject(obj) {\n\t\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\t\treturn false;\n\t\t}\n\t\n\t\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\t\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t\t// Not own constructor property must be Object\n\t\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\t\treturn false;\n\t\t}\n\t\n\t\t// Own properties are enumerated firstly, so to speed up,\n\t\t// if last one is own, then all properties are own.\n\t\tvar key;\n\t\tfor (key in obj) {/**/}\n\t\n\t\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n\t};\n\t\n\tmodule.exports = function extend() {\n\t\tvar options, name, src, copy, copyIsArray, clone,\n\t\t\ttarget = arguments[0],\n\t\t\ti = 1,\n\t\t\tlength = arguments.length,\n\t\t\tdeep = false;\n\t\n\t\t// Handle a deep copy situation\n\t\tif (typeof target === 'boolean') {\n\t\t\tdeep = target;\n\t\t\ttarget = arguments[1] || {};\n\t\t\t// skip the boolean and the target\n\t\t\ti = 2;\n\t\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\t\ttarget = {};\n\t\t}\n\t\n\t\tfor (; i < length; ++i) {\n\t\t\toptions = arguments[i];\n\t\t\t// Only deal with non-null/undefined values\n\t\t\tif (options != null) {\n\t\t\t\t// Extend the base object\n\t\t\t\tfor (name in options) {\n\t\t\t\t\tsrc = target[name];\n\t\t\t\t\tcopy = options[name];\n\t\n\t\t\t\t\t// Prevent never-ending loop\n\t\t\t\t\tif (target !== copy) {\n\t\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\t\n\t\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\n\t\t// Return the modified object\n\t\treturn target;\n\t};\n\t\n\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\n\tvar extend = __webpack_require__(19);\n\tvar stat = __webpack_require__(16);\n\t\n\tvar defaultOptions = {\n\t    windowSize: 9,\n\t    derivative: 0,\n\t    polynomial: 3,\n\t};\n\t\n\t\n\tfunction SavitzkyGolay(data, h, options) {\n\t    options = extend({}, defaultOptions, options);\n\t\n\t    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n\t            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\t\n\t\n\t    if (options.windowSize>data.length)\n\t        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n\t    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n\t        throw new RangeError('Derivative should be a positive integer');\n\t    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n\t        throw new RangeError('Polynomial should be a positive integer');\n\t    if (options.polynomial >= 6)\n\t        console.warn('You should not use polynomial grade higher than 5 if you are' +\n\t            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\t\n\t    var windowSize = options.windowSize;\n\t\n\t    var half = Math.floor(windowSize/2);\n\t    var np = data.length;\n\t    var ans = new Array(np);\n\t    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n\t    var hs = 0;\n\t    var constantH = true;\n\t    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n\t        constantH = false;\n\t    }\n\t    else{\n\t        hs = Math.pow(h, options.derivative);\n\t    }\n\t    //console.log(\"Constant h: \"+constantH);\n\t    //For the borders\n\t    for(var i=0;i<half;i++){\n\t        var wg1=weights[half-i-1];\n\t        var wg2=weights[half+i+1];\n\t        var d1 = 0,d2=0;\n\t        for (var l = 0; l < windowSize; l++){\n\t            d1 += wg1[l] * data[l];\n\t            d2 += wg2[l] * data[np-windowSize+l-1];\n\t        }\n\t        if(constantH){\n\t            ans[half-i-1] = d1/hs;\n\t            ans[np-half+i] = d2/hs;\n\t        }\n\t        else{\n\t            hs = getHs(h,half-i-1,half, options.derivative);\n\t            ans[half-i-1] = d1/hs;\n\t            hs = getHs(h,np-half+i,half, options.derivative);\n\t            ans[np-half+i] = d2/hs;\n\t        }\n\t    }\n\t    //For the internal points\n\t    var wg = weights[half];\n\t    for(var i=windowSize;i<np+1;i++){\n\t        var d = 0;\n\t        for (var l = 0; l < windowSize; l++)\n\t            d += wg[l] * data[l+i-windowSize];\n\t        if(!constantH)\n\t            hs = getHs(h,i-half-1,half, options.derivative);\n\t        ans[i-half-1] = d/hs;\n\t    }\n\t    return ans;\n\t}\n\t\n\tfunction getHs(h,center,half,derivative){\n\t    var hs = 0;\n\t    var count = 0;\n\t    for(var i=center-half;i<center+half;i++){\n\t        if(i>=0 && i < h.length-1){\n\t            hs+= (h[i+1]-h[i]);\n\t            count++;\n\t        }\n\t    }\n\t    return Math.pow(hs/count,derivative);\n\t}\n\t\n\tfunction GramPoly(i,m,k,s){\n\t    var Grampoly = 0;\n\t    if(k>0){\n\t        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n\t            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n\t    }\n\t    else{\n\t        if(k==0&&s==0){\n\t            Grampoly=1;\n\t        }\n\t        else{\n\t            Grampoly=0;\n\t        }\n\t    }\n\t    //console.log(Grampoly);\n\t    return Grampoly;\n\t}\n\t\n\tfunction GenFact(a,b){\n\t    var gf=1;\n\t    if(a>=b){\n\t        for(var j=a-b+1;j<=a;j++){\n\t            gf*=j;\n\t        }\n\t    }\n\t    return gf;\n\t}\n\t\n\tfunction Weight(i,t,m,n,s){\n\t    var sum=0;\n\t    for(var k=0;k<=n;k++){\n\t        //console.log(k);\n\t        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n\t    }\n\t    return sum;\n\t}\n\t\n\t/**\n\t *\n\t * @param m  Number of points\n\t * @param n  Polynomial grade\n\t * @param s  Derivative\n\t */\n\tfunction fullWeights(m,n,s){\n\t    var weights = new Array(m);\n\t    var np = Math.floor(m/2);\n\t    for(var t=-np;t<=np;t++){\n\t        weights[t+np] = new Array(m);\n\t        for(var j=-np;j<=np;j++){\n\t            weights[t+np][j+np]=Weight(j,t,np,n,s);\n\t        }\n\t    }\n\t    return weights;\n\t}\n\t\n\t/*function entropy(data,h,options){\n\t    var trend = SavitzkyGolay(data,h,trendOptions);\n\t    var copy = new Array(data.length);\n\t    var sum = 0;\n\t    var max = 0;\n\t    for(var i=0;i<data.length;i++){\n\t        copy[i] = data[i]-trend[i];\n\t    }\n\t\n\t    sum/=data.length;\n\t    console.log(sum+\" \"+max);\n\t    console.log(stat.array.standardDeviation(copy));\n\t    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n\t    return sum;\n\t\n\t}\n\t\n\t\n\t\n\tfunction guessWindowSize(data, h){\n\t    console.log(\"entropy \"+entropy(data,h,trendOptions));\n\t    return 5;\n\t}\n\t*/\n\tmodule.exports = SavitzkyGolay;\n\t \n\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** ml-gsd.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap bed0b26f7d7ae95c651f\n **/","\nmodule.exports.post = require(\"../src/optimize\");\nmodule.exports.gsd = require(\"../src/gsd\");\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/index.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 9/6/15.\n */\nvar Opt = require(\"ml-optimize-lorentzian\");\n\nfunction sampleFunction(from, to, x, y, lastIndex){\n    var nbPoints = x.length;\n    var sampleX = [];\n    var sampleY = [];\n    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n    if(direction==-1){\n        lastIndex[0]= x.length-1;\n    }\n\n    var delta = Math.abs(to-from)/2;\n    var mid = (from+to)/2;\n    var stop = false;\n    var index = lastIndex[0];\n    while(!stop&&index<nbPoints&&index>=0){\n        if(Math.abs(x[index]-mid)<=delta){\n            sampleX.push(x[index]);\n            sampleY.push(y[index]);\n            index+=direction;\n        }\n        //It is outside the range.\n        else{\n\n            if(Math.sign(mid-x[index])==1){\n                //We'll reach the mid going in the current direction\n                index+=direction;\n            }\n            else{\n                //There is not more peaks in the current range\n                stop=true;\n            }\n        }\n        //console.log(sampleX);\n    }\n    lastIndex[0]=index;\n    return [sampleX, sampleY];\n}\n\nfunction optimizePeaks(peakList,x,y,n, fnType){\n    var i, j, lastIndex=[0];\n    var groups = groupPeaks(peakList,n);\n    var result = [];\n    var factor = 1;\n    if(fnType==\"gaussian\")\n        factor = 1.17741;//From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n    for(i=0;i<groups.length;i++){\n        var peaks = groups[i].group;\n        if(peaks.length>1){\n            //Multiple peaks\n            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n            //console.log(\"here1\");\n            //console.log(groups[i].limits);\n            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n            //console.log(sampling);\n            if(sampling[0].length>5){\n                var error = peaks[0].width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                var optPeaks = [];\n                if(fnType==\"gaussian\")\n                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n                    }\n                }\n                //console.log(optPeak);\n                for(j=0;j<optPeaks.length;j++){\n                    result.push({x:optPeaks[j][0][0],y:optPeaks[j][1][0],width:optPeaks[j][2][0]*factor});\n                }\n            }\n        }\n        else{\n            //Single peak\n            peaks = peaks[0];\n            var sampling = sampleFunction(peaks.x-n*peaks.width,\n                peaks.x+n*peaks.width,x,y,lastIndex);\n            //console.log(\"here2\");\n            //console.log(groups[i].limits);\n            if(sampling[0].length>5){\n                var error = peaks.width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n                var optPeak = [];\n                if(fnType==\"gaussian\")\n                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n                    }\n                }\n                //console.log(optPeak);\n                result.push({x:optPeak[0][0],y:optPeak[1][0],width:optPeak[2][0]*factor}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n            }\n        }\n\n    }\n    return result;\n}\n\nfunction groupPeaks(peakList,nL){\n    var group = [];\n    var groups = [];\n    var i, j;\n    var limits = [peakList[0].x,nL*peakList[0].width];\n    var upperLimit, lowerLimit;\n    //Merge forward\n    for(i=0;i<peakList.length;i++){\n        //If the 2 things overlaps\n        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n            //Add the peak to the group\n            group.push(peakList[i]);\n            //Update the group limits\n            upperLimit = limits[0]+limits[1];\n            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n                upperLimit = peakList[i].x+nL*peakList[i].width;\n            }\n            lowerLimit = limits[0]-limits[1];\n            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n                lowerLimit = peakList[i].x-nL*peakList[i].width;\n            }\n            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n        }\n        else{\n            groups.push({limits:limits,group:group});\n            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n            group=[peakList[i]];\n            limits = [peakList[i].x,nL*peakList[i].width];\n        }\n    }\n    groups.push({limits:limits,group:group});\n    //Merge backward\n    for(i =groups.length-2;i>=0;i--){\n        //The groups overlaps\n        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n            for(j=0;j<groups[i+1].group.length;j++){\n                groups[i].group.push(groups[i+1].group[j]);\n            }\n            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n            }\n            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n            }\n            //console.log(limits);\n            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n            groups.splice(i+1,1);\n        }\n    }\n    return groups;\n}\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nfunction joinBroadPeaks(peakList, options){\n    var width = options.width;\n    var broadLines=[];\n    //Optimize the possible broad lines\n    var max=0, maxI=0,count=1;\n    var isPartOf = false;\n    for(var i=peakList.length-1;i>=0;i--){\n        if(peakList[i].soft){\n            broadLines.push(peakList.splice(i,1)[0]);\n        }\n    }\n    //Push a feak peak\n    broadLines.push({x:Number.MAX_VALUE});\n\n    var candidates = [[broadLines[0].x,\n                        broadLines[0].y]];\n    var indexes = [0];\n\n    for(var i=1;i<broadLines.length;i++){\n        //console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n        if(Math.abs(broadLines[i-1].x-broadLines[i].x)<width){\n            candidates.push([broadLines[i].x,broadLines[i].y]);\n            if(broadLines[i].y>max){\n                max = broadLines[i].y;\n                maxI = i;\n            }\n            indexes.push(i);\n            count++;\n        }\n        else{\n            if(count>2){\n                var fitted =  Opt.optimizeSingleLorentzian(candidates,\n                    {x: broadLines[maxI].x, y:max, width: Math.abs(candidates[0][0]-candidates[candidates.length-1][0])});\n                //console.log(fitted)\n                peakList.push({x:fitted[0][0],y:fitted[1][0],width:fitted[2][0],soft:false});\n\n            }\n            else{\n                //Put back the candidates to the signals list\n                indexes.map(function(index){peakList.push(broadLines[index])});\n            }\n            candidates = [[broadLines[i].x,broadLines[i].y]];\n            indexes = [i];\n            max = broadLines[i].y;\n            maxI = i;\n            count = 1;\n        }\n    }\n\n    peakList.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n    return peakList;\n\n}\n\n/*if(options.broadRatio>0){\n var broadLines=[[Number.MAX_VALUE,0,0]];\n //Optimize the possible broad lines\n var max=0, maxI=0,count=0;\n var candidates = [],broadLinesS=[];\n var isPartOf = false;\n\n for(var i=broadLines.length-1;i>0;i--){\n //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\n candidates.push(broadLines[i]);\n if(broadLines[i][1]>max){\n max = broadLines[i][1];\n maxI = i;\n }\n count++;\n }\n else{\n isPartOf = true;\n if(count>30){ // TODO, an options ?\n isPartOf = false;\n //for(var j=0;j<signals.length;j++){\n //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n //       isPartOf = true;\n //    }\n //console.log(\"Was part of \"+isPartOf);\n }\n if(isPartOf){\n for(var j=0;j<candidates.length;j++){\n signals.push([candidates[j][0], candidates[j][1], dx]);\n }\n }\n else{\n var fitted =  Opt.optimizeSingleLorentzian(candidates,{x:candidates[maxI][0],\n width:Math.abs(candidates[0][0]-candidates[candidates.length-1][0])},\n []);\n //console.log(fitted);\n signals.push([fitted[0][0],fitted[0][1],fitted[0][2]]);\n }\n candidates = [];\n max = 0;\n maxI = 0;\n count = 0;\n }\n }\n }*/\n\nmodule.exports={optimizePeaks:optimizePeaks,joinBroadPeaks:joinBroadPeaks};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/optimize.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else{\n            t = new Matrix(nbPoints,1);\n            y_data = new Matrix(nbPoints,1);\n            x = xy[0];\n            y = xy[1];\n            if(typeof x[0] === \"number\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i][0]=x[i];\n                    y_data[i][0]=y[i];\n                    if(y[i]>maxY)\n                        maxY = y[i];\n                }\n            }\n            else{\n                //It is a colum matrix\n                if(typeof x[0] === \"object\"){\n                    for(i=0;i<nbPoints;i++){\n                        t[i][0]=x[i][0];\n                        y_data[i][0]=y[i][0];\n                        if(y[i][0]>maxY)\n                            maxY = y[i][0];\n                    }\n                }\n\n            }\n\n        }\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else {\n            t = new Matrix(nbPoints, 1);\n            y_data = new Matrix(nbPoints, 1);\n            for (i = 0; i < nbPoints; i++) {\n                t[i][0] = xy[i][0];\n                y_data[i][0] = xy[i][1];\n                if(y_data[i][0]>maxY)\n                    maxY = y_data[i][0];\n            }\n        }\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i][0]/=maxY;\n    }\n    return [t,y_data,maxY];\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-optimize-lorentzian/src/index.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/index.js\n ** module id = 3\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/LM.js\n ** module id = 4\n ** module chunks = 0\n **/","'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/index.js\n ** module id = 5\n ** module chunks = 0\n **/","'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/matrix.js\n ** module id = 6\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/decompositions.js\n ** module id = 7\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/svd.js\n ** module id = 8\n ** module chunks = 0\n **/","'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/util.js\n ** module id = 9\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/evd.js\n ** module id = 10\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/lu.js\n ** module id = 11\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/qr.js\n ** module id = 12\n ** module chunks = 0\n **/","'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-matrix/src/dc/cholesky.js\n ** module id = 13\n ** module chunks = 0\n **/","/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-curve-fitting/src/algebra.js\n ** module id = 14\n ** module chunks = 0\n **/","var Opt = require(\"ml-optimize-lorentzian\");\nvar stats = require(\"ml-stat\");\nvar extend = require('extend');\nvar SG = require('ml-savitzky-golay-generalized');\n\nvar sgDefOptions = {\n    windowSize: 9,\n    polynomial: 3\n};\n\n\nfunction gsd(x, y, options){\n    //options = extend({}, defaultOptions, options);\n    var options=Object.create(options || {});\n    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n    if (options.broadRatio===undefined) options.broadRatio=0.00;\n    if (options.noiseLevel===undefined) options.noiseLevel=undefined;\n    if (options.noiseFactor===undefined) options.noiseFactor=3;\n    if (options.maxCriteria===undefined) options.maxCriteria=true;\n    if (options.smoothY===undefined) options.smoothY=true;\n    if (options.realTopDetection===undefined) options.realTopDetection=false;\n\n    var sgOptions = extend({}, sgDefOptions, options.sgOptions);\n\n    //console.log(JSON.stringify(stats.array.minMax(y)));\n    if(options.noiseLevel===undefined){\n        //We have to know if x is equally spaced\n        var maxDx=0, minDx=Number.MAX_VALUE,tmp;\n        for(var i=0;i< x.length-1;i++){\n            var tmp = Math.abs(x[i+1]-x[i]);\n            if(tmp<minDx){\n                minDx = tmp;\n            }\n            if(tmp>maxDx){\n                maxDx = tmp;\n            }\n        }\n\n        if((maxDx-minDx)/maxDx<0.05){\n\n            options.noiseLevel = getNoiseLevel(y);\n            //console.log(options.noiseLevel+\" \"+stats.array.median(y));\n        }\n        else{\n            options.noiseLevel = 0;\n        }\n    }\n    //console.log(\"options.noiseLevel \"+options.noiseLevel);\n    y=[].concat(y);\n    var yCorrection = {m:1, b:options.noiseLevel};\n    if(!options.maxCriteria){\n        yCorrection.m =-1;\n        yCorrection.b*=-1;\n    }\n\n    for (var i=0; i<y.length; i++){\n        y[i]=yCorrection.m*y[i]-yCorrection.b;\n    }\n\n    for (var i=0; i<y.length; i++) {\n        if (y[i] < 0) {\n            y[i] = 0;\n        }\n    }\n\n    //If the max difference between delta x is less than 5%, then, we can assume it to be equally spaced variable\n    var Y = y;\n    if((maxDx-minDx)/maxDx<0.05){\n        if(options.smoothY)\n            Y = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n        var dY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n        var ddY = SG(y, x[1]-x[0], {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n    }\n    else{\n        if(options.smoothY)\n            Y = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:0});\n        var dY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:1});\n        var ddY = SG(y, x, {windowSize:sgOptions.windowSize, polynomial:sgOptions.polynomial,derivative:2});\n    }\n\n    var X = x;\n    var dx = x[1]-x[0];\n    var maxDdy=0;\n    var maxY = 0;\n    //console.log(Y.length);\n    for (var i = 0; i < Y.length ; i++){\n        if(Math.abs(ddY[i])>maxDdy){\n            maxDdy = Math.abs(ddY[i]);\n        }\n        if(Math.abs(Y[i])>maxY){\n            maxY = Math.abs(Y[i]);\n        }\n    }\n    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n\n    var minddY = [];\n    var intervalL = [];\n    var intervalR = [];\n    var lastMax = null;\n    var lastMin = null;\n    var broadMask = new Array();\n    //console.log(dx);\n    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n    for (var i = 1; i < Y.length -1 ; i++){\n        //console.log(dY[i]);\n        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n            lastMin = X[i];\n            //console.log(\"min \"+lastMin);\n            if(dx>0&&lastMax!=null){\n                intervalL.push(lastMax);\n                intervalR.push(lastMin);\n\n            }\n        }\n\n        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n            lastMax = X[i];\n            //console.log(\"max \"+lastMax);\n            if(dx<0&&lastMin!=null){\n                intervalL.push(lastMax);\n                intervalR.push(lastMin);\n            }\n        }\n        if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n            minddY.push(i);//( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n            if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                broadMask.push(false);\n            }\n            else{\n                broadMask.push(true);\n            }\n        }\n    }\n    //\n    //console.log(intervalL.length+\" \"+minddY.length+\" \"+broadMask.length);\n    var signals = [];\n    var lastK = 0,possible, k, f,frequency, distanceJ, minDistance, gettingCloser;\n    for (var j = 0; j < minddY.length; j++){\n        frequency = X[minddY[j]];//minddY[j][0];\n        possible = -1;\n        k=lastK+1;\n        minDistance = Number.MAX_VALUE;\n        distanceJ = 0;\n        gettingCloser=true;\n        while(possible==-1&&k<intervalL.length&&gettingCloser){\n            distanceJ = Math.abs(frequency-(intervalL[k]+intervalR[k])/2);\n            //Still getting closer?\n            if(distanceJ<minDistance){\n                minDistance = distanceJ;\n            }\n            else{\n                gettingCloser = false;\n            }\n            if( distanceJ <Math.abs(intervalL[k]-intervalR[k])/2){\n                possible=k;\n                lastK = k;\n            }\n            k++;\n        }\n        //console.log(lastK+\" \"+intervalL.length+\" possible \"+k);\n        if (possible!=-1){\n            //console.log(height);\n            if (Math.abs(Y[minddY[j]]) > options.minMaxRatio*maxY) {\n                signals.push({\n                    i:minddY[j],\n                    x: frequency,\n                    y: (Y[minddY[j]]-yCorrection.b)/yCorrection.m,\n                    width:Math.abs(intervalR[possible] - intervalL[possible]),//widthCorrection\n                    soft:broadMask[j]\n                })\n            }\n        }\n    }\n\n\n    if(options.realTopDetection){\n        realTopDetection(signals,X,Y);\n    }\n\n    //Correct the values to fit the original spectra data\n    for(var j=0;j<signals.length;j++){\n        signals[j].base=options.noiseLevel;\n    }\n\n    signals.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n    return signals;\n\n}\n\nfunction getNoiseLevel(y){\n    var mean = 0,stddev=0;\n    var length = y.length,i=0;\n    for(i = 0; i < length; i++){\n        mean+=y[i];\n    }\n    mean/=length;\n    var averageDeviations = new Array(length);\n    for (i = 0; i < length; i++)\n        averageDeviations[i] = Math.abs(y[i] - mean);\n    averageDeviations.sort();\n    if (length % 2 == 1) {\n        stddev = averageDeviations[(length-1)/2] / 0.6745;\n    } else {\n        stddev = 0.5*(averageDeviations[length/2]+averageDeviations[length/2-1]) / 0.6745;\n    }\n\n    return stddev;\n}\n\nfunction realTopDetection(peakList, x, y){\n    //console.log(peakList);\n    //console.log(x);\n    //console.log(y);\n    var listP = [];\n    var alpha, beta, gamma, p,currentPoint;\n    for(var j=0;j<peakList.length;j++){\n        currentPoint = peakList[j].i;//peakList[j][2];\n        var tmp = currentPoint;\n        //The detected peak could be moved 1 or 2 unit to left or right.\n        if(y[currentPoint-1]>=y[currentPoint-2]\n            &&y[currentPoint-1]>=y[currentPoint]) {\n            currentPoint--;\n        }\n        else{\n            if(y[currentPoint+1]>=y[currentPoint]\n                &&y[currentPoint+1]>=y[currentPoint+2]) {\n                currentPoint++;\n            }\n            else{\n                if(y[currentPoint-2]>=y[currentPoint-3]\n                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n                    currentPoint-=2;\n                }\n                else{\n                    if(y[currentPoint+2]>=y[currentPoint+1]\n                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n                        currentPoint+=2;\n                    }\n                }\n            }\n        }\n        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n            &&y[currentPoint]>=y[currentPoint-1]\n            &&y[currentPoint]>=y[currentPoint+1]) {\n            alpha = 20 * Math.log10(y[currentPoint - 1]);\n            beta = 20 * Math.log10(y[currentPoint]);\n            gamma = 20 * Math.log10(y[currentPoint + 1]);\n            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n            //console.log(\"p: \"+p);\n            //console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n            peakList[j].x = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n            peakList[j].y = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n                - y[currentPoint + 1]) * p;//signal.peaks[j].intensity);\n            //console.log(y[tmp]+\" \"+peakList[j].y);\n        }\n    }\n}\n\nmodule.exports=gsd;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/gsd.js\n ** module id = 15\n ** module chunks = 0\n **/","'use strict';\n\nexports.array = require('./array');\nexports.matrix = require('./matrix');\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/index.js\n ** module id = 16\n ** module chunks = 0\n **/","'use strict';\n\nfunction compareNumbers(a, b) {\n    return a - b;\n}\n\n/**\n * Computes the sum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.sum = function sum(values) {\n    var sum = 0;\n    for (var i = 0; i < values.length; i++) {\n        sum += values[i];\n    }\n    return sum;\n};\n\n/**\n * Computes the maximum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.max = function max(values) {\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] > max) max = values[i];\n    }\n    return max;\n};\n\n/**\n * Computes the minimum of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.min = function min(values) {\n    var min = Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n    }\n    return min;\n};\n\n/**\n * Computes the min and max of the given values\n * @param {Array} values\n * @returns {{min: number, max: number}}\n */\nexports.minMax = function minMax(values) {\n    var min = Infinity;\n    var max = -Infinity;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] < min) min = values[i];\n        if (values[i] > max) max = values[i];\n    }\n    return {\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Computes the arithmetic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.arithmeticMean = function arithmeticMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        sum += values[i];\n    }\n    return sum / l;\n};\n\n/**\n * {@link arithmeticMean}\n */\nexports.mean = exports.arithmeticMean;\n\n/**\n * Computes the geometric mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.geometricMean = function geometricMean(values) {\n    var mul = 1;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        mul *= values[i];\n    }\n    return Math.pow(mul, 1 / l);\n};\n\n/**\n * Computes the mean of the log of the given values\n * If the return value is exponentiated, it gives the same result as the\n * geometric mean.\n * @param {Array} values\n * @returns {number}\n */\nexports.logMean = function logMean(values) {\n    var lnsum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        lnsum += Math.log(values[i]);\n    }\n    return lnsum / l;\n};\n\n/**\n * Computes the weighted grand mean for a list of means and sample sizes\n * @param {Array} means - Mean values for each set of samples\n * @param {Array} samples - Number of original values for each set of samples\n * @returns {number}\n */\nexports.grandMean = function grandMean(means, samples) {\n    var sum = 0;\n    var n = 0;\n    var l = means.length;\n    for (var i = 0; i < l; i++) {\n        sum += samples[i] * means[i];\n        n += samples[i];\n    }\n    return sum / n;\n};\n\n/**\n * Computes the truncated mean of the given values using a given percentage\n * @param {Array} values\n * @param {number} percent - The percentage of values to keep (range: [0,1])\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.truncatedMean = function truncatedMean(values, percent, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var k = Math.floor(l * percent);\n    var sum = 0;\n    for (var i = k; i < (l - k); i++) {\n        sum += values[i];\n    }\n    return sum / (l - 2 * k);\n};\n\n/**\n * Computes the harmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.harmonicMean = function harmonicMean(values) {\n    var sum = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        if (values[i] === 0) {\n            throw new RangeError('value at index ' + i + 'is zero');\n        }\n        sum += 1 / values[i];\n    }\n    return l / sum;\n};\n\n/**\n * Computes the contraharmonic mean of the given values\n * @param {Array} values\n * @returns {number}\n */\nexports.contraHarmonicMean = function contraHarmonicMean(values) {\n    var r1 = 0;\n    var r2 = 0;\n    var l = values.length;\n    for (var i = 0; i < l; i++) {\n        r1 += values[i] * values[i];\n        r2 += values[i];\n    }\n    if (r2 < 0) {\n        throw new RangeError('sum of values is negative');\n    }\n    return r1 / r2;\n};\n\n/**\n * Computes the median of the given values\n * @param {Array} values\n * @param {boolean} [alreadySorted=false]\n * @returns {number}\n */\nexports.median = function median(values, alreadySorted) {\n    if (alreadySorted === undefined) alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice().sort(compareNumbers);\n    }\n    var l = values.length;\n    var half = Math.floor(l / 2);\n    if (l % 2 === 0) {\n        return (values[half - 1] + values[half]) * 0.5;\n    } else {\n        return values[half];\n    }\n};\n\n/**\n * Computes the variance of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.variance = function variance(values, unbiased) {\n    if (unbiased === undefined) unbiased = true;\n    var theMean = exports.mean(values);\n    var theVariance = 0;\n    var l = values.length;\n\n    for (var i = 0; i < l; i++) {\n        var x = values[i] - theMean;\n        theVariance += x * x;\n    }\n\n    if (unbiased) {\n        return theVariance / (l - 1);\n    } else {\n        return theVariance / l;\n    }\n};\n\n/**\n * Computes the standard deviation of the given values\n * @param {Array} values\n * @param {boolean} [unbiased=true] - if true, divide by (n-1); if false, divide by n.\n * @returns {number}\n */\nexports.standardDeviation = function standardDeviation(values, unbiased) {\n    return Math.sqrt(exports.variance(values, unbiased));\n};\n\nexports.standardError = function standardError(values) {\n    return exports.standardDeviation(values) / Math.sqrt(values.length);\n};\n\nexports.quartiles = function quartiles(values, alreadySorted) {\n    if (typeof(alreadySorted) === 'undefined') alreadySorted = false;\n    if (!alreadySorted) {\n        values = values.slice();\n        values.sort(compareNumbers);\n    }\n\n    var quart = values.length / 4;\n    var q1 = values[Math.ceil(quart) - 1];\n    var q2 = exports.median(values, true);\n    var q3 = values[Math.ceil(quart * 3) - 1];\n\n    return {q1: q1, q2: q2, q3: q3};\n};\n\nexports.pooledStandardDeviation = function pooledStandardDeviation(samples, unbiased) {\n    return Math.sqrt(exports.pooledVariance(samples, unbiased));\n};\n\nexports.pooledVariance = function pooledVariance(samples, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var sum = 0;\n    var length = 0, l = samples.length;\n    for (var i = 0; i < l; i++) {\n        var values = samples[i];\n        var vari = exports.variance(values);\n\n        sum += (values.length - 1) * vari;\n\n        if (unbiased)\n            length += values.length - 1;\n        else\n            length += values.length;\n    }\n    return sum / length;\n};\n\nexports.mode = function mode(values) {\n    var l = values.length,\n        itemCount = new Array(l),\n        i;\n    for (i = 0; i < l; i++) {\n        itemCount[i] = 0;\n    }\n    var itemArray = new Array(l);\n    var count = 0;\n\n    for (i = 0; i < l; i++) {\n        var index = itemArray.indexOf(values[i]);\n        if (index >= 0)\n            itemCount[index]++;\n        else {\n            itemArray[count] = values[i];\n            itemCount[count] = 1;\n            count++;\n        }\n    }\n\n    var maxValue = 0, maxIndex = 0;\n    for (i = 0; i < count; i++) {\n        if (itemCount[i] > maxValue) {\n            maxValue = itemCount[i];\n            maxIndex = i;\n        }\n    }\n\n    return itemArray[maxIndex];\n};\n\nexports.covariance = function covariance(vector1, vector2, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var mean1 = exports.mean(vector1);\n    var mean2 = exports.mean(vector2);\n\n    if (vector1.length !== vector2.length)\n        throw \"Vectors do not have the same dimensions\";\n\n    var cov = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        var x = vector1[i] - mean1;\n        var y = vector2[i] - mean2;\n        cov += x * y;\n    }\n\n    if (unbiased)\n        return cov / (l - 1);\n    else\n        return cov / l;\n};\n\nexports.skewness = function skewness(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n\n    var s2 = 0, s3 = 0, l = values.length;\n    for (var i = 0; i < l; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s3 += dev * dev * dev;\n    }\n    var m2 = s2 / l;\n    var m3 = s3 / l;\n\n    var g = m3 / (Math.pow(m2, 3 / 2.0));\n    if (unbiased) {\n        var a = Math.sqrt(l * (l - 1));\n        var b = l - 2;\n        return (a / b) * g;\n    }\n    else {\n        return g;\n    }\n};\n\nexports.kurtosis = function kurtosis(values, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var theMean = exports.mean(values);\n    var n = values.length, s2 = 0, s4 = 0;\n\n    for (var i = 0; i < n; i++) {\n        var dev = values[i] - theMean;\n        s2 += dev * dev;\n        s4 += dev * dev * dev * dev;\n    }\n    var m2 = s2 / n;\n    var m4 = s4 / n;\n\n    if (unbiased) {\n        var v = s2 / (n - 1);\n        var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n        var b = s4 / (v * v);\n        var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n\n        return a * b - 3 * c;\n    }\n    else {\n        return m4 / (m2 * m2) - 3;\n    }\n};\n\nexports.entropy = function entropy(values, eps) {\n    if (typeof(eps) === 'undefined') eps = 0;\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * Math.log(values[i] + eps);\n    return -sum;\n};\n\nexports.weightedMean = function weightedMean(values, weights) {\n    var sum = 0, l = values.length;\n    for (var i = 0; i < l; i++)\n        sum += values[i] * weights[i];\n    return sum;\n};\n\nexports.weightedStandardDeviation = function weightedStandardDeviation(values, weights) {\n    return Math.sqrt(exports.weightedVariance(values, weights));\n};\n\nexports.weightedVariance = function weightedVariance(values, weights) {\n    var theMean = exports.weightedMean(values, weights);\n    var vari = 0, l = values.length;\n    var a = 0, b = 0;\n\n    for (var i = 0; i < l; i++) {\n        var z = values[i] - theMean;\n        var w = weights[i];\n\n        vari += w * (z * z);\n        b += w;\n        a += w * w;\n    }\n\n    return vari * (b / (b * b - a));\n};\n\nexports.center = function center(values, inPlace) {\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n\n    var result = values;\n    if (!inPlace)\n        result = values.slice();\n\n    var theMean = exports.mean(result), l = result.length;\n    for (var i = 0; i < l; i++)\n        result[i] -= theMean;\n};\n\nexports.standardize = function standardize(values, standardDev, inPlace) {\n    if (typeof(standardDev) === 'undefined') standardDev = exports.standardDeviation(values);\n    if (typeof(inPlace) === 'undefined') inPlace = false;\n    var l = values.length;\n    var result = inPlace ? values : new Array(l);\n    for (var i = 0; i < l; i++)\n        result[i] = values[i] / standardDev;\n    return result;\n};\n\nexports.cumulativeSum = function cumulativeSum(array) {\n    var l = array.length;\n    var result = new Array(l);\n    result[0] = array[0];\n    for (var i = 1; i < l; i++)\n        result[i] = result[i - 1] + array[i];\n    return result;\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/array.js\n ** module id = 17\n ** module chunks = 0\n **/","'use strict';\nvar arrayStat = require('./array');\n\n// https://github.com/accord-net/framework/blob/development/Sources/Accord.Statistics/Tools.cs\n\nfunction entropy(matrix, eps) {\n    if (typeof(eps) === 'undefined') {\n        eps = 0;\n    }\n    var sum = 0,\n        l1 = matrix.length,\n        l2 = matrix[0].length;\n    for (var i = 0; i < l1; i++) {\n        for (var j = 0; j < l2; j++) {\n            sum += matrix[i][j] * Math.log(matrix[i][j] + eps);\n        }\n    }\n    return -sum;\n}\n\nfunction mean(matrix, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        theMean, N, i, j;\n\n    if (dimension === -1) {\n        theMean = [0];\n        N = rows * cols;\n        for (i = 0; i < rows; i++) {\n            for (j = 0; j < cols; j++) {\n                theMean[0] += matrix[i][j];\n            }\n        }\n        theMean[0] /= N;\n    } else if (dimension === 0) {\n        theMean = new Array(cols);\n        N = rows;\n        for (j = 0; j < cols; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < rows; i++) {\n                theMean[j] += matrix[i][j];\n            }\n            theMean[j] /= N;\n        }\n    } else if (dimension === 1) {\n        theMean = new Array(rows);\n        N = cols;\n        for (j = 0; j < rows; j++) {\n            theMean[j] = 0;\n            for (i = 0; i < cols; i++) {\n                theMean[j] += matrix[j][i];\n            }\n            theMean[j] /= N;\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n    return theMean;\n}\n\nfunction standardDeviation(matrix, means, unbiased) {\n    var vari = variance(matrix, means, unbiased), l = vari.length;\n    for (var i = 0; i < l; i++) {\n        vari[i] = Math.sqrt(vari[i]);\n    }\n    return vari;\n}\n\nfunction variance(matrix, means, unbiased) {\n    if (typeof(unbiased) === 'undefined') {\n        unbiased = true;\n    }\n    means = means || mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum1 = 0, sum2 = 0, x = 0;\n        for (var i = 0; i < rows; i++) {\n            x = matrix[i][j] - means[j];\n            sum1 += x;\n            sum2 += x * x;\n        }\n        if (unbiased) {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / (rows - 1);\n        } else {\n            vari[j] = (sum2 - ((sum1 * sum1) / rows)) / rows;\n        }\n    }\n    return vari;\n}\n\nfunction median(matrix) {\n    var rows = matrix.length, cols = matrix[0].length;\n    var medians = new Array(cols);\n\n    for (var i = 0; i < cols; i++) {\n        var data = new Array(rows);\n        for (var j = 0; j < rows; j++) {\n            data[j] = matrix[j][i];\n        }\n        data.sort();\n        var N = data.length;\n        if (N % 2 === 0) {\n            medians[i] = (data[N / 2] + data[(N / 2) - 1]) * 0.5;\n        } else {\n            medians[i] = data[Math.floor(N / 2)];\n        }\n    }\n    return medians;\n}\n\nfunction mode(matrix) {\n    var rows = matrix.length,\n        cols = matrix[0].length,\n        modes = new Array(cols),\n        i, j;\n    for (i = 0; i < cols; i++) {\n        var itemCount = new Array(rows);\n        for (var k = 0; k < rows; k++) {\n            itemCount[k] = 0;\n        }\n        var itemArray = new Array(rows);\n        var count = 0;\n\n        for (j = 0; j < rows; j++) {\n            var index = itemArray.indexOf(matrix[j][i]);\n            if (index >= 0) {\n                itemCount[index]++;\n            } else {\n                itemArray[count] = matrix[j][i];\n                itemCount[count] = 1;\n                count++;\n            }\n        }\n\n        var maxValue = 0, maxIndex = 0;\n        for (j = 0; j < count; j++) {\n            if (itemCount[j] > maxValue) {\n                maxValue = itemCount[j];\n                maxIndex = j;\n            }\n        }\n\n        modes[i] = itemArray[maxIndex];\n    }\n    return modes;\n}\n\nfunction skewness(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, l = means.length;\n    var skew = new Array(l);\n\n    for (var j = 0; j < l; j++) {\n        var s2 = 0, s3 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s3 += dev * dev * dev;\n        }\n\n        var m2 = s2 / n;\n        var m3 = s3 / n;\n        var g = m3 / Math.pow(m2, 3 / 2);\n\n        if (unbiased) {\n            var a = Math.sqrt(n * (n - 1));\n            var b = n - 2;\n            skew[j] = (a / b) * g;\n        } else {\n            skew[j] = g;\n        }\n    }\n    return skew;\n}\n\nfunction kurtosis(matrix, unbiased) {\n    if (typeof(unbiased) === 'undefined') unbiased = true;\n    var means = mean(matrix);\n    var n = matrix.length, m = matrix[0].length;\n    var kurt = new Array(m);\n\n    for (var j = 0; j < m; j++) {\n        var s2 = 0, s4 = 0;\n        for (var i = 0; i < n; i++) {\n            var dev = matrix[i][j] - means[j];\n            s2 += dev * dev;\n            s4 += dev * dev * dev * dev;\n        }\n        var m2 = s2 / n;\n        var m4 = s4 / n;\n\n        if (unbiased) {\n            var v = s2 / (n - 1);\n            var a = (n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3));\n            var b = s4 / (v * v);\n            var c = ((n - 1) * (n - 1)) / ((n - 2) * (n - 3));\n            kurt[j] = a * b - 3 * c;\n        } else {\n            kurt[j] = m4 / (m2 * m2) - 3;\n        }\n    }\n    return kurt;\n}\n\nfunction standardError(matrix) {\n    var samples = matrix.length;\n    var standardDeviations = standardDeviation(matrix), l = standardDeviations.length;\n    var standardErrors = new Array(l);\n    var sqrtN = Math.sqrt(samples);\n\n    for (var i = 0; i < l; i++) {\n        standardErrors[i] = standardDeviations[i] / sqrtN;\n    }\n    return standardErrors;\n}\n\nfunction covariance(matrix, dimension) {\n    return scatter(matrix, undefined, dimension);\n}\n\nfunction scatter(matrix, divisor, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    if (typeof(divisor) === 'undefined') {\n        if (dimension === 0) {\n            divisor = matrix.length - 1;\n        } else if (dimension === 1) {\n            divisor = matrix[0].length - 1;\n        }\n    }\n    var means = mean(matrix, dimension),\n        rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, s, k;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                s /= divisor;\n                cov[i][j] = s;\n                cov[j][i] = s;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nfunction correlation(matrix) {\n    var means = mean(matrix),\n        standardDeviations = standardDeviation(matrix, true, means),\n        scores = zScores(matrix, means, standardDeviations),\n        rows = matrix.length,\n        cols = matrix[0].length,\n        i, j;\n\n    var cor = new Array(cols);\n    for (i = 0; i < cols; i++) {\n        cor[i] = new Array(cols);\n    }\n    for (i = 0; i < cols; i++) {\n        for (j = i; j < cols; j++) {\n            var c = 0;\n            for (var k = 0, l = scores.length; k < l; k++) {\n                c += scores[k][j] * scores[k][i];\n            }\n            c /= rows - 1;\n            cor[i][j] = c;\n            cor[j][i] = c;\n        }\n    }\n    return cor;\n}\n\nfunction zScores(matrix, means, standardDeviations) {\n    means = means || mean(matrix);\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix, true, means);\n    return standardize(center(matrix, means, false), standardDeviations, true);\n}\n\nfunction center(matrix, means, inPlace) {\n    means = means || mean(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var row = result[i];\n        for (j = 0, jj = row.length; j < jj; j++) {\n            row[j] = matrix[i][j] - means[j];\n        }\n    }\n    return result;\n}\n\nfunction standardize(matrix, standardDeviations, inPlace) {\n    if (typeof(standardDeviations) === 'undefined') standardDeviations = standardDeviation(matrix);\n    var result = matrix,\n        l = matrix.length,\n        i, j, jj;\n\n    if (!inPlace) {\n        result = new Array(l);\n        for (i = 0; i < l; i++) {\n            result[i] = new Array(matrix[i].length);\n        }\n    }\n\n    for (i = 0; i < l; i++) {\n        var resultRow = result[i];\n        var sourceRow = matrix[i];\n        for (j = 0, jj = resultRow.length; j < jj; j++) {\n            if (standardDeviations[j] !== 0 && !isNaN(standardDeviations[j])) {\n                resultRow[j] = sourceRow[j] / standardDeviations[j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction weightedVariance(matrix, weights) {\n    var means = mean(matrix);\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length;\n    var vari = new Array(cols);\n\n    for (var j = 0; j < cols; j++) {\n        var sum = 0;\n        var a = 0, b = 0;\n\n        for (var i = 0; i < rows; i++) {\n            var z = matrix[i][j] - means[j];\n            var w = weights[i];\n\n            sum += w * (z * z);\n            b += w;\n            a += w * w;\n        }\n\n        vari[j] = sum * (b / (b * b - a));\n    }\n\n    return vari;\n}\n\nfunction weightedMean(matrix, weights, dimension) {\n    if (typeof(dimension) === 'undefined') {\n        dimension = 0;\n    }\n    var rows = matrix.length;\n    if (rows === 0) return [];\n    var cols = matrix[0].length,\n        means, i, ii, j, w, row;\n\n    if (dimension === 0) {\n        means = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            means[i] = 0;\n        }\n        for (i = 0; i < rows; i++) {\n            row = matrix[i];\n            w = weights[i];\n            for (j = 0; j < cols; j++) {\n                means[j] += row[j] * w;\n            }\n        }\n    } else if (dimension === 1) {\n        means = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            means[i] = 0;\n        }\n        for (j = 0; j < rows; j++) {\n            row = matrix[j];\n            w = weights[j];\n            for (i = 0; i < cols; i++) {\n                means[j] += row[i] * w;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    var weightSum = arrayStat.sum(weights);\n    if (weightSum !== 0) {\n        for (i = 0, ii = means.length; i < ii; i++) {\n            means[i] /= weightSum;\n        }\n    }\n    return means;\n}\n\nfunction weightedCovariance(matrix, weights, means, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    var s1 = 0, s2 = 0;\n    for (var i = 0, ii = weights.length; i < ii; i++) {\n        s1 += weights[i];\n        s2 += weights[i] * weights[i];\n    }\n    var factor = s1 / (s1 * s1 - s2);\n    return weightedScatter(matrix, weights, means, factor, dimension);\n}\n\nfunction weightedScatter(matrix, weights, means, factor, dimension) {\n    dimension = dimension || 0;\n    means = means || weightedMean(matrix, weights, dimension);\n    if (typeof(factor) === 'undefined') {\n        factor = 1;\n    }\n    var rows = matrix.length;\n    if (rows === 0) {\n        return [[]];\n    }\n    var cols = matrix[0].length,\n        cov, i, j, k, s;\n\n    if (dimension === 0) {\n        cov = new Array(cols);\n        for (i = 0; i < cols; i++) {\n            cov[i] = new Array(cols);\n        }\n        for (i = 0; i < cols; i++) {\n            for (j = i; j < cols; j++) {\n                s = 0;\n                for (k = 0; k < rows; k++) {\n                    s += weights[k] * (matrix[k][j] - means[j]) * (matrix[k][i] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else if (dimension === 1) {\n        cov = new Array(rows);\n        for (i = 0; i < rows; i++) {\n            cov[i] = new Array(rows);\n        }\n        for (i = 0; i < rows; i++) {\n            for (j = i; j < rows; j++) {\n                s = 0;\n                for (k = 0; k < cols; k++) {\n                    s += weights[k] * (matrix[j][k] - means[j]) * (matrix[i][k] - means[i]);\n                }\n                cov[i][j] = s * factor;\n                cov[j][i] = s * factor;\n            }\n        }\n    } else {\n        throw new Error('Invalid dimension');\n    }\n\n    return cov;\n}\n\nmodule.exports = {\n    entropy: entropy,\n    mean: mean,\n    standardDeviation: standardDeviation,\n    variance: variance,\n    median: median,\n    mode: mode,\n    skewness: skewness,\n    kurtosis: kurtosis,\n    standardError: standardError,\n    covariance: covariance,\n    scatter: scatter,\n    correlation: correlation,\n    zScores: zScores,\n    center: center,\n    standardize: standardize,\n    weightedVariance: weightedVariance,\n    weightedMean: weightedMean,\n    weightedCovariance: weightedCovariance,\n    weightedScatter: weightedScatter\n};\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-stat/matrix.js\n ** module id = 18\n ** module chunks = 0\n **/","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) {/**/}\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone,\n\t\ttarget = arguments[0],\n\t\ti = 1,\n\t\tlength = arguments.length,\n\t\tdeep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t} else if ((typeof target !== 'object' && typeof target !== 'function') || target == null) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = target[name];\n\t\t\t\tcopy = options[name];\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\ttarget[name] = extend(deep, clone, copy);\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\ttarget[name] = copy;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/extend/index.js\n ** module id = 19\n ** module chunks = 0\n **/","//Code translate from Pascal source in http://pubs.acs.org/doi/pdf/10.1021/ac00205a007\nvar extend = require('extend');\nvar stat = require('ml-stat');\n\nvar defaultOptions = {\n    windowSize: 9,\n    derivative: 0,\n    polynomial: 3,\n};\n\n\nfunction SavitzkyGolay(data, h, options) {\n    options = extend({}, defaultOptions, options);\n\n    if ((options.windowSize % 2 === 0) || (options.windowSize < 5) || !(Number.isInteger(options.windowSize)))\n            throw new RangeError('Invalid window size (should be odd and at least 5 integer number)')\n\n\n    if (options.windowSize>data.length)\n        throw new RangeError('Window size is higher than the data length '+options.windowSize+\">\"+data.length);\n    if ((options.derivative < 0) || !(Number.isInteger(options.derivative)))\n        throw new RangeError('Derivative should be a positive integer');\n    if ((options.polynomial < 1) || !(Number.isInteger(options.polynomial)))\n        throw new RangeError('Polynomial should be a positive integer');\n    if (options.polynomial >= 6)\n        console.warn('You should not use polynomial grade higher than 5 if you are' +\n            ' not sure that your data arises from such a model. Possible polynomial oscillation problems');\n\n    var windowSize = options.windowSize;\n\n    var half = Math.floor(windowSize/2);\n    var np = data.length;\n    var ans = new Array(np);\n    var weights = fullWeights(windowSize,options.polynomial,options.derivative);\n    var hs = 0;\n    var constantH = true;\n    if( Object.prototype.toString.call( h ) === '[object Array]' ) {\n        constantH = false;\n    }\n    else{\n        hs = Math.pow(h, options.derivative);\n    }\n    //console.log(\"Constant h: \"+constantH);\n    //For the borders\n    for(var i=0;i<half;i++){\n        var wg1=weights[half-i-1];\n        var wg2=weights[half+i+1];\n        var d1 = 0,d2=0;\n        for (var l = 0; l < windowSize; l++){\n            d1 += wg1[l] * data[l];\n            d2 += wg2[l] * data[np-windowSize+l-1];\n        }\n        if(constantH){\n            ans[half-i-1] = d1/hs;\n            ans[np-half+i] = d2/hs;\n        }\n        else{\n            hs = getHs(h,half-i-1,half, options.derivative);\n            ans[half-i-1] = d1/hs;\n            hs = getHs(h,np-half+i,half, options.derivative);\n            ans[np-half+i] = d2/hs;\n        }\n    }\n    //For the internal points\n    var wg = weights[half];\n    for(var i=windowSize;i<np+1;i++){\n        var d = 0;\n        for (var l = 0; l < windowSize; l++)\n            d += wg[l] * data[l+i-windowSize];\n        if(!constantH)\n            hs = getHs(h,i-half-1,half, options.derivative);\n        ans[i-half-1] = d/hs;\n    }\n    return ans;\n}\n\nfunction getHs(h,center,half,derivative){\n    var hs = 0;\n    var count = 0;\n    for(var i=center-half;i<center+half;i++){\n        if(i>=0 && i < h.length-1){\n            hs+= (h[i+1]-h[i]);\n            count++;\n        }\n    }\n    return Math.pow(hs/count,derivative);\n}\n\nfunction GramPoly(i,m,k,s){\n    var Grampoly = 0;\n    if(k>0){\n        Grampoly = (4*k-2)/(k*(2*m-k+1))*(i*GramPoly(i,m,k-1,s) +\n            s*GramPoly(i,m,k-1,s-1)) - ((k-1)*(2*m+k))/(k*(2*m-k+1))*GramPoly(i,m,k-2,s);\n    }\n    else{\n        if(k==0&&s==0){\n            Grampoly=1;\n        }\n        else{\n            Grampoly=0;\n        }\n    }\n    //console.log(Grampoly);\n    return Grampoly;\n}\n\nfunction GenFact(a,b){\n    var gf=1;\n    if(a>=b){\n        for(var j=a-b+1;j<=a;j++){\n            gf*=j;\n        }\n    }\n    return gf;\n}\n\nfunction Weight(i,t,m,n,s){\n    var sum=0;\n    for(var k=0;k<=n;k++){\n        //console.log(k);\n        sum+=(2*k+1)*(GenFact(2*m,k)/GenFact(2*m+k+1,k+1))*GramPoly(i,m,k,0)*GramPoly(t,m,k,s)\n    }\n    return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m,n,s){\n    var weights = new Array(m);\n    var np = Math.floor(m/2);\n    for(var t=-np;t<=np;t++){\n        weights[t+np] = new Array(m);\n        for(var j=-np;j<=np;j++){\n            weights[t+np][j+np]=Weight(j,t,np,n,s);\n        }\n    }\n    return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\nmodule.exports = SavitzkyGolay;\n \n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/ml-savitzky-golay-generalized/src/index.js\n ** module id = 20\n ** module chunks = 0\n **/"],"sourceRoot":""}