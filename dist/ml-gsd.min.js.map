{"version":3,"sources":["ml-gsd.min.js"],"names":["e","exports","module","define","amd","f","window","global","self","mlGsd","t","n","r","s","o","u","a","require","i","Error","code","l","call","length",1,"optimize","gsd","../src/gsd","../src/optimize",2,"Matrix","math","LM","func","p","y_dat","weight","dp","p_min","p_max","c","opts","tensor_parameter","iteration","k","eps","Npar","Npnt","p_old","zeros","y_old","X2","X2_old","J","console","log","length_t","length_y_dat","Math","sqrt","multiply","transpose","abs","prnt","MaxIter","epsilon_1","epsilon_4","lambda_0","lambda_UP_fac","lambda_DN_fac","Update_Type","dp_array","Array","idx","push","Nfit","stop","weight_sq","tmp","ones","dotMultiply","result","this","lm_matx","JtWJ","JtWdy","Chi_sq","y_hat","max","lambda","diag","nu","h","solve","add","eye","hidx","p_try","min","delta_y","subtract","X2_try","JtWdy_th","alpha","inv","mat","rho","dX2","apply","j","lm_FD_J","y","m","ps","clone","del","y1","column","dotDivide","lm_Broyden_J","h_t","div","Jt","./algebra","ml-matrix",3,"matrix","A","B","rows","cols","random","rand","sub","mul","mmul","columns","ii","jj","exp","dotPow","b","pow","inverse",4,"algebra","./LM",5,"CholeskyDecomposition","value","checkMatrix","isSymmetric","dimension","positiveDefinite","Lrowj","d","Lrowk","L","prototype",{"end":{"file":"?","comments_before":[],"nlb":false,"endpos":31329,"endcol":28,"endline":841,"pos":31309,"col":8,"line":841,"value":"leftTriangularFactor","type":"name"},"start":{"file":"?","comments_before":[],"nlb":false,"endpos":31329,"endcol":28,"endline":841,"pos":31309,"col":8,"line":841,"value":"leftTriangularFactor","type":"name"},"name":"leftTriangularFactor"},"leftTriangularFactor","count","../matrix",6,"EigenvalueDecomposition","isSquare","V","tred2","tql2","H","ort","orthes","hqr2","g","hh","scale","dl1","c2","c3","el1","s2","iter","tst1","hypotenuse","low","high","nn","w","x","ra","sa","vr","vi","notlast","cdivres","exshift","norm","q","z","cdiv","xr","xi","yr","yi","realEigenvalues","imaginaryEigenvalues","eigenvectorMatrix","diagonalMatrix","X","./util",7,"LuDecomposition","v","LUrowi","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","data","col","determinant","lowerTriangularFactor","upperTriangularFactor","pivotPermutationVector","slice","subMatrixRow",8,"QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","subMatrix","orthogonalFactor",9,"SingularValueDecomposition","options","wantu","wantv","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","swapped","aux","warn","ks","cs","sn","kase","sp","spm1","epm1","sk","ek","shift","U","work","nct","nrt","pp","condition","norm2","rank","tol","diagonal","threshold","leftSingularVectors","rightSingularVectors","Y","scols","Ls","sum","VL","vrows","urows","VLU","solveForDiagonal","vcols","ucols",10,11,"leftHandSide","rightHandSide","other","SVD","EVD","CHO","./dc/cholesky","./dc/evd","./dc/lu","./dc/qr","./dc/svd","./matrix",12,"Decompositions","DC","./decompositions",13,"arr","nRows","nColumns","newInstance","isArray","TypeError","RangeError","Object","defineProperty","writable","__proto__","Asplice","splice","Aconcat","concat","from1DArray","newRows","newColumns","newData","rowVector","columnVector","vector","empty","fill","indices","from","to","stack","arg1","isMatrix","arguments","current","setRow","expand","base","expansion","klass","get","checkRowIndex","index","checkColumnIndex","checkDimensions","otherMatrix","callback","to2DArray","to1DArray","copy","isRowVector","isColumnVector","isVector","set","rowIndex","columnIndex","neg","mulS","addS","addM","subS","subM","mulM","divS","divM","getRow","getRowVector","array","removeRow","addRow","swapRows","row1","row2","temp","getColumn","getColumnVector","setColumn","removeColumn","addColumn","swapColumns","column1","column2","row","checkRowVector","checkColumnVector","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","Infinity","maxIndex","minIndex","maxRow","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","mean","size","prod","cumulativeSum","dot","vector1","vector2","Bcolj","Arowi","sortRows","compareFunction","sort","sortColumns","startRow","endRow","startColumn","endColumn","newMatrix","subMatrixColumn","trace",14,"sumOfLorentzians","factor","p2","nL","singleLorentzian","singleGaussian","factor2","optimizeSingleLorentzian","xy","peak","xy2","parseData","y_data","maxY","nbPoints","create","consts","dt","dx","p_init","width","p_fit","optimizeSingleGaussian","optimizeLorentzianSum","group","optimizeGaussianSum","nbSeries","SizeException","ml-curve-fitting",15,"undefined","minMaxRatio","broadRatio","noiseLevel","maxCriteria","smoothY","dY","ddY","maxDdy","minddY","intervals","lastMax","lastMin","broadMask","realTopDetection","signals","frequency","possible","inter","linewidth","height","broadLines","Number","MAX_VALUE","maxI","candidates","isPartOf","rangeX","fitted","optimizePeaks","peakList","beta","gamma","currentPoint","log10",16,"sampleFunction","lastIndex","sampleX","sampleY","direction","sign","delta","mid","fnType","groups","groupPeaks","peaks","sampling","limits","error","optPeaks","Opt","optPeak","upperLimit","lowerLimit","ml-optimize-lorentzian"],"mappings":"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","file":"ml-gsd.min.js","sourcesContent":["/**\n * ml-gsd - Global Spectra Deconvolution\n * @version v0.0.1\n * @link https://github.com/mljs/global-spectra-deconvolution\n * @license MIT\n */\n!function(e){if(\"object\"==typeof exports&&\"undefined\"!=typeof module)module.exports=e();else if(\"function\"==typeof define&&define.amd)define([],e);else{var f;\"undefined\"!=typeof window?f=window:\"undefined\"!=typeof global?f=global:\"undefined\"!=typeof self&&(f=self),f.mlGsd=e()}}(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\nmodule.exports.optimize = require(\"../src/optimize\");\nmodule.exports.gsd = require(\"../src/gsd\");\n\n},{\"../src/gsd\":15,\"../src/optimize\":16}],2:[function(require,module,exports){\n/**\n * Created by acastillo on 8/5/15.\n */\nvar Matrix = require(\"ml-matrix\");\nvar math = require(\"./algebra\");\n\nvar DEBUG = false;\n/** Levenberg Marquardt curve-fitting: minimize sum of weighted squared residuals\n ----------  INPUT  VARIABLES  -----------\n func   = function of n independent variables, 't', and m parameters, 'p',\n returning the simulated model: y_hat = func(t,p,c)\n p      = n-vector of initial guess of parameter values\n t      = m-vectors or matrix of independent variables (used as arg to func)\n y_dat  = m-vectors or matrix of data to be fit by func(t,p)\n weight = weighting vector for least squares fit ( weight >= 0 ) ...\n inverse of the standard measurement errors\n Default:  sqrt(d.o.f. / ( y_dat' * y_dat ))\n dp     = fractional increment of 'p' for numerical derivatives\n dp(j)>0 central differences calculated\n dp(j)<0 one sided 'backwards' differences calculated\n dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n Default:  0.001;\n p_min  = n-vector of lower bounds for parameter values\n p_max  = n-vector of upper bounds for parameter values\n c      = an optional matrix of values passed to func(t,p,c)\n opts   = vector of algorithmic parameters\n parameter    defaults    meaning\n opts(1)  =  prnt            3        >1 intermediate results; >2 plots\n opts(2)  =  MaxIter      10*Npar     maximum number of iterations\n opts(3)  =  epsilon_1       1e-3     convergence tolerance for gradient\n opts(4)  =  epsilon_2       1e-3     convergence tolerance for parameters\n opts(5)  =  epsilon_3       1e-3     convergence tolerance for Chi-square\n opts(6)  =  epsilon_4       1e-2     determines acceptance of a L-M step\n opts(7)  =  lambda_0        1e-2     initial value of L-M paramter\n opts(8)  =  lambda_UP_fac   11       factor for increasing lambda\n opts(9)  =  lambda_DN_fac    9       factor for decreasing lambda\n opts(10) =  Update_Type      1       1: Levenberg-Marquardt lambda update\n 2: Quadratic update\n 3: Nielsen's lambda update equations\n\n ----------  OUTPUT  VARIABLES  -----------\n p       = least-squares optimal estimate of the parameter values\n X2      = Chi squared criteria\n sigma_p = asymptotic standard error of the parameters\n sigma_y = asymptotic standard error of the curve-fit\n corr    = correlation matrix of the parameters\n R_sq    = R-squared cofficient of multiple determination\n cvg_hst = convergence history\n\n Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. 22 Sep 2013\n modified from: http://octave.sourceforge.net/optim/function/leasqr.html\n using references by\n Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n Sam Roweis       http://www.cs.toronto.edu/~roweis/notes/lm.pdf\n Manolis Lourakis http://www.ics.forth.gr/~lourakis/levmar/levmar.pdf\n Hans Nielson     http://www2.imm.dtu.dk/~hbn/publ/TR9905.ps\n Mathworks        optimization toolbox reference manual\n K. Madsen, H.B., Nielsen, and O. Tingleff\n http://www2.imm.dtu.dk/pubdb/views/edoc_download.php/3215/pdf/imm3215.pdf\n */\nvar LM = {\n\n    optimize: function(func,p,t,y_dat,weight,dp,p_min,p_max,c,opts){\n\n        var tensor_parameter = 0;\t\t\t// set to 1 of parameter is a tensor\n\n        var iteration  = 0;\t\t\t// iteration counter\n        //func_calls = 0;\t\t\t// running count of function evaluations\n\n        if((typeof p[0])!=\"object\"){\n            for(var i=0;i< p.length;i++){\n                p[i]=[p[i]];\n            }\n\n        }\n        //p = p(:); y_dat = y_dat(:);\t\t// make column vectors\n        var i,k;\n        var eps = 2^-52;\n        var Npar   = p.length;//length(p); \t\t\t// number of parameters\n        var Npnt   = y_dat.length;//length(y_dat);\t\t// number of data points\n        var p_old  = Matrix.zeros(Npar,1);\t\t// previous set of parameters\n        var y_old  = Matrix.zeros(Npnt,1);\t\t// previous model, y_old = y_hat(t;p_old)\n        var X2     = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var X2_old = 1e-2/eps;\t\t\t// a really big initial Chi-sq value\n        var J =  Matrix.zeros(Npnt,Npar);\n\n\n        if (t.length != y_dat.length) {\n            console.log('lm.m error: the length of t must equal the length of y_dat');\n\n            length_t = t.length;\n            length_y_dat = y_dat.length;\n            var X2 = 0, corr = 0, sigma_p = 0, sigma_y = 0, R_sq = 0, cvg_hist = 0;\n            if (!tensor_parameter) {\n                return;\n            }\n        }\n\n        weight = weight||Math.sqrt((Npnt-Npar+1)/(math.multiply(math.transpose(y_dat),y_dat)));\n        dp = dp || 0.001;\n        p_min   = p_min || math.multiply(Math.abs(p),-100);\n        p_max   = p_max || math.multiply(Math.abs(p),100);\n        c = c || 1;\n        // Algorithmic Paramters\n        //prnt MaxIter  eps1  eps2  epx3  eps4  lam0  lamUP lamDN UpdateType\n        opts = opts ||[  3,10*Npar, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2, 11, 9, 1 ];\n\n        var prnt          = opts[0];\t// >1 intermediate results; >2 plots\n        var MaxIter       = opts[1];\t// maximum number of iterations\n        var epsilon_1     = opts[2];\t// convergence tolerance for gradient\n        var epsilon_2     = opts[3];\t// convergence tolerance for parameter\n        var epsilon_3     = opts[4];\t// convergence tolerance for Chi-square\n        var epsilon_4     = opts[5];\t// determines acceptance of a L-M step\n        var lambda_0      = opts[6];\t// initial value of damping paramter, lambda\n        var lambda_UP_fac = opts[7];\t// factor for increasing lambda\n        var lambda_DN_fac = opts[8];\t// factor for decreasing lambda\n        var Update_Type   = opts[9];\t// 1: Levenberg-Marquardt lambda update\n        // 2: Quadratic update\n        // 3: Nielsen's lambda update equations\n\n        if ( tensor_parameter && prnt == 3 ) prnt = 2;\n\n\n        if(!dp.length || dp.length == 1){\n            var dp_array = new Array(Npar);\n            for(var i=0;i<Npar;i++)\n                dp_array[i]=[dp];\n            dp=dp_array;\n        }\n\n        // indices of the parameters to be fit\n        var idx   = [];\n        for(i=0;i<dp.length;i++){\n            if(dp[i][0]!=0){\n                idx.push(i);\n            }\n        }\n\n        var Nfit = idx.length;\t\t\t// number of parameters to fit\n        var stop = false;\t\t\t\t// termination flag\n\n        var weight_sq = null;\n        //console.log(weight);\n        if ( !weight.length || weight.length < Npnt )\t{\n            // squared weighting vector\n            //weight_sq = ( weight(1)*ones(Npnt,1) ).^2;\n            //console.log(\"weight[0] \"+typeof weight[0]);\n            var tmp = math.multiply(Matrix.ones(Npnt,1),weight[0]);\n            weight_sq = math.dotMultiply(tmp,tmp);\n        }\n        else{\n            //weight_sq = (weight(:)).^2;\n            weight_sq = math.dotMultiply(weight,weight);\n        }\n\n\n        // initialize Jacobian with finite difference calculation\n        //console.log(\"J \"+weight_sq);\n        var result = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        var JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n        //[JtWJ,JtWdy,X2,y_hat,J] = this.lm_matx(func,t,p_old,y_old,1,J,p,y_dat,weight_sq,dp,c);\n        //console.log(JtWJ);\n\n        if ( Math.max(Math.abs(JtWdy)) < epsilon_1 ){\n            console.log(' *** Your Initial Guess is Extremely Close to Optimal ***')\n            console.log(' *** epsilon_1 = ', epsilon_1);\n            stop = true;\n        }\n\n\n        switch(Update_Type){\n            case 1: // Marquardt: init'l lambda\n                lambda  = lambda_0;\n                break;\n            default:    // Quadratic and Nielsen\n                lambda  = lambda_0 * Math.max(math.diag(JtWJ));\n                nu=2;\n        }\n        //console.log(X2);\n        X2_old = X2; // previous value of X2\n        //console.log(MaxIter+\" \"+Npar);\n        //var cvg_hst = Matrix.ones(MaxIter,Npar+3);\t\t// initialize convergence history\n        var h = null;\n        while ( !stop && iteration <= MaxIter ) {\t\t// --- Main Loop\n            iteration = iteration + 1;\n            // incremental change in parameters\n            switch(Update_Type){\n                case 1:\t\t\t\t\t// Marquardt\n                    //h = ( JtWJ + lambda * math.diag(math.diag(JtWJ)) ) \\ JtWdy;\n                    //h = math.multiply(math.inv(JtWdy),math.add(JtWJ,math.multiply(lambda,math.diag(math.diag(Npar)))));\n                    h = math.solve(math.add(JtWJ,math.multiply(math.diag(math.diag(JtWJ)),lambda)),JtWdy);\n                    break;\n                default:\t\t\t\t\t// Quadratic and Nielsen\n                    //h = ( JtWJ + lambda * math.eye(Npar) ) \\ JtWdy;\n\n                    h = math.solve(math.add(JtWJ,math.multiply( Matrix.eye(Npar),lambda)),JtWdy);\n            }\n\n            /*for(var k=0;k< h.length;k++){\n             h[k]=[h[k]];\n             }*/\n            //console.log(\"h \"+h);\n            //h=math.matrix(h);\n            //  big = max(abs(h./p)) > 2;\n            //this is a big step\n            // --- Are parameters [p+h] much better than [p] ?\n            var hidx = new Array(idx.length);\n            for(k=0;k<idx.length;k++){\n                hidx[k]=h[idx[k]];\n            }\n            var p_try = math.add(p, hidx);// update the [idx] elements\n\n            for(k=0;k<p_try.length;k++){\n                p_try[k][0]=Math.min(Math.max(p_min[k][0],p_try[k][0]),p_max[k][0]);\n            }\n            // p_try = Math.min(Math.max(p_min,p_try),p_max);           // apply constraints\n\n            var delta_y = math.subtract(y_dat, func(t,p_try,c));       // residual error using p_try\n            //func_calls = func_calls + 1;\n            //X2_try = delta_y' * ( delta_y .* weight_sq );  // Chi-squared error criteria\n\n            var X2_try = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n\n            if ( Update_Type == 2 ){  \t\t\t  // Quadratic\n                //    One step of quadratic line update in the h direction for minimum X2\n                //var alpha =  JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n                var JtWdy_th = math.multiply(math.transpose(JtWdy),h);\n                var alpha =  math.multiply(JtWdy_th,math.inv(math.add(math.multiply(math.subtract(X2_try - X2),1/2)),math.multiply(JtWdy_th,2)));//JtWdy'*h / ( (X2_try - X2)/2 + 2*JtWdy'*h ) ;\n\n                h = math.multiply(alpha, h);\n                for(var k=0;k<idx.length;k++){\n                    hidx[k]=h[idx[k]];\n                }\n\n                p_try = math.add(p ,hidx);                     // update only [idx] elements\n                p_try = math.min(math.max(p_min,p_try),p_max);          // apply constraints\n\n                delta_y = math.subtract(y_dat, func(t,p_try,c));      // residual error using p_try\n                // func_calls = func_calls + 1;\n                //X2_try = delta_y' * ( delta_y .* weight_sq ); // Chi-squared error criteria\n                X2_try = math.multiply(math.transpose(delta_y), mat.dotMultiply(delta_y, weight_sq));\n            }\n\n            //rho = (X2 - X2_try) / ( 2*h' * (lambda * h + JtWdy) ); // Nielsen\n            var rho = (X2-X2_try)/math.multiply(math.multiply(math.transpose(h),2),math.add(math.multiply(lambda, h),JtWdy));\n            //console.log(\"rho \"+rho);\n            if ( rho > epsilon_4 ) {\t\t// it IS significantly better\n                //console.log(\"Here\");\n                dX2 = X2 - X2_old;\n                X2_old = X2;\n                p_old = p;\n                y_old = y_hat;\n                p = p_try;\t\t\t// accept p_try\n\n                result = this.lm_matx(func, t, p_old, y_old, dX2, J, p, y_dat, weight_sq, dp, c);\n                JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                // decrease lambda ==> Gauss-Newton method\n\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.max(lambda / lambda_DN_fac, 1.e-7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = Math.max(lambda / (1 + alpha), 1.e-7);\n                        break;\n                    case 3:\t\t\t\t\t\t\t// Nielsen\n                        lambda = math.multiply(Math.max(1 / 3, 1 - (2 * rho - 1) ^ 3),lambda);\n                        nu = 2;\n                        break;\n                }\n            }\n            else {\t\t\t\t\t// it IS NOT better\n                X2 = X2_old;\t\t\t// do not accept p_try\n                if (iteration%(2 * Npar)==0) {\t// rank-1 update of Jacobian\n                    result = this.lm_matx(func, t, p_old, y_old, -1, J, p, y_dat, weight_sq, dp, c);\n                    JtWJ = result.JtWJ,JtWdy=result.JtWdy,dX2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n                }\n\n                // increase lambda  ==> gradient descent method\n                switch (Update_Type) {\n                    case 1:\t\t\t\t\t\t\t// Levenberg\n                        lambda = Math.min(lambda * lambda_UP_fac, 1.e7);\n                        break;\n                    case 2:\t\t\t\t\t\t\t// Quadratic\n                        lambda = lambda + Math.abs((X2_try - X2) / 2 / alpha);\n                        break;\n                    case 3:\t\t\t\t\t\t// Nielsen\n                        lambda = lambda * nu;\n                        nu = 2 * nu;\n                        break;\n                }\n            }\n        }// --- End of Main Loop\n\n        // --- convergence achieved, find covariance and confidence intervals\n\n        // equal weights for paramter error analysis\n        weight_sq = math.multiply(math.multiply(math.transpose(delta_y),delta_y), Matrix.ones(Npnt,1));\n\n        weight_sq.apply(function(i,j){\n            weight_sq[i][j] = (Npnt-Nfit+1)/weight_sq[i][j];\n        });\n        //console.log(weight_sq);\n        result = this.lm_matx(func,t,p_old,y_old,-1,J,p,y_dat,weight_sq,dp,c);\n        JtWJ = result.JtWJ,JtWdy=result.JtWdy,X2=result.Chi_sq,y_hat=result.y_hat,J=result.J;\n\n        /*if nargout > 2\t\t\t\t// standard error of parameters\n         covar = inv(JtWJ);\n         sigma_p = sqrt(diag(covar));\n         end\n\n         if nargout > 3\t\t\t\t// standard error of the fit\n         //  sigma_y = sqrt(diag(J * covar * J'));\t// slower version of below\n         sigma_y = zeros(Npnt,1);\n         for i=1:Npnt\n         sigma_y(i) = J(i,:) * covar * J(i,:)';\n         end\n         sigma_y = sqrt(sigma_y);\n         end\n\n         if nargout > 4\t\t\t\t// parameter correlation matrix\n         corr = covar ./ [sigma_p*sigma_p'];\n         end\n\n         if nargout > 5\t\t\t\t// coefficient of multiple determination\n         R_sq = corrcoef([y_dat y_hat]);\n         R_sq = R_sq(1,2).^2;\n         end\n\n         if nargout > 6\t\t\t\t// convergence history\n         cvg_hst = cvg_hst(1:iteration,:);\n         end*/\n\n        // endfunction  # ---------------------------------------------------------- LM\n\n        return { p:p, X2:X2};\n    },\n\n    lm_FD_J:function(func,t,p,y,dp,c) {\n        // J = lm_FD_J(func,t,p,y,{dp},{c})\n        //\n        // partial derivatives (Jacobian) dy/dp for use with lm.m\n        // computed via Finite Differences\n        // Requires n or 2n function evaluations, n = number of nonzero values of dp\n        // -------- INPUT VARIABLES ---------\n        // func = function of independent variables, 't', and parameters, 'p',\n        //        returning the simulated model: y_hat = func(t,p,c)\n        // t  = m-vector of independent variables (used as arg to func)\n        // p  = n-vector of current parameter values\n        // y  = func(t,p,c) n-vector initialised by user before each call to lm_FD_J\n        // dp = fractional increment of p for numerical derivatives\n        //      dp(j)>0 central differences calculated\n        //      dp(j)<0 one sided differences calculated\n        //      dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //      Default:  0.001;\n        // c  = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // J  = Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n        var m = y.length;\t\t\t// number of data points\n        var n = p.length;\t\t\t// number of parameters\n\n        dp = dp || math.multiply( Matrix.ones(n, 1), 0.001);\n\n        var ps = p.clone();//JSON.parse(JSON.stringify(p));\n        //var ps = $.extend(true, [], p);\n        var J = new Matrix(m,n), del =new Array(n);         // initialize Jacobian to Zero\n\n        for (var j = 0;j < n; j++) {\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n            del[j] = dp[j]*(1+Math.abs(p[j][0]));  // parameter perturbation\n            p[j] = [ps[j][0]+del[j]];\t      // perturb parameter p(j)\n            //console.log(j+\" \"+dp[j]+\" \"+p[j]+\" \"+ps[j]+\" \"+del[j]);\n\n            if (del[j] != 0){\n                y1 = func(t, p, c);\n                //func_calls = func_calls + 1;\n                if (dp[j][0] < 0) {\t\t// backwards difference\n                    //J(:,j) = math.dotDivide(math.subtract(y1, y),del[j]);//. / del[j];\n                    //console.log(del[j]);\n                    //console.log(y);\n                    var column = math.dotDivide(math.subtract(y1, y),del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n                    //console.log(column);\n                }\n                else{\n                    p[j][0] = ps[j][0] - del[j];\n                    //J(:,j) = (y1 - feval(func, t, p, c)). / (2. * del[j]);\n                    var column = math.dotDivide(math.subtract(y1,func(t,p,c)),2*del[j]);\n                    for(var k=0;k< m;k++){\n                        J[k][j]=column[k][0];\n                    }\n\n                }\t\t\t// central difference, additional func call\n            }\n\n            p[j] = ps[j];\t\t// restore p(j)\n\n        }\n        //console.log(\"lm_FD_J: \"+ JSON.stringify(J));\n        return J;\n\n    },\n\n    // endfunction # -------------------------------------------------- LM_FD_J\n    lm_Broyden_J: function(p_old,y_old,J,p,y){\n        // J = lm_Broyden_J(p_old,y_old,J,p,y)\n        // carry out a rank-1 update to the Jacobian matrix using Broyden's equation\n        //---------- INPUT VARIABLES -------\n        // p_old = previous set of parameters\n        // y_old = model evaluation at previous set of parameters, y_hat(t;p_old)\n        // J  = current version of the Jacobian matrix\n        // p     = current  set of parameters\n        // y     = model evaluation at current  set of parameters, y_hat(t;p)\n        //---------- OUTPUT VARIABLES -------\n        // J = rank-1 update to Jacobian Matrix J(i,j)=dy(i)/dp(j)\ti=1:n; j=1:m\n        //console.log(p+\" X \"+ p_old)\n        var h  = math.subtract(p, p_old);\n\n        //console.log(\"hhh \"+h);\n        var h_t = math.transpose(h);\n        h_t.div(math.multiply(h_t,h));\n\n        //console.log(h_t);\n        //J = J + ( y - y_old - J*h )*h' / (h'*h);\t// Broyden rank-1 update eq'n\n        J = math.add(J, math.multiply(math.subtract(y, math.add(y_old,math.multiply(J,h))),h_t));\n        return J;\n        // endfunction # ---------------------------------------------- LM_Broyden_J\n    },\n\n    lm_matx : function (func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,dp,c,iteration){\n        // [JtWJ,JtWdy,Chi_sq,y_hat,J] = this.lm_matx(func,t,p_old,y_old,dX2,J,p,y_dat,weight_sq,{da},{c})\n        //\n        // Evaluate the linearized fitting matrix, JtWJ, and vector JtWdy,\n        // and calculate the Chi-squared error function, Chi_sq\n        // Used by Levenberg-Marquard algorithm, lm.m\n        // -------- INPUT VARIABLES ---------\n        // func   = function ofpn independent variables, p, and m parameters, p,\n        //         returning the simulated model: y_hat = func(t,p,c)\n        // t      = m-vectors or matrix of independent variables (used as arg to func)\n        // p_old  = n-vector of previous parameter values\n        // y_old  = m-vector of previous model ... y_old = y_hat(t;p_old);\n        // dX2    = previous change in Chi-squared criteria\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n        // p      = n-vector of current  parameter values\n        // y_dat  = n-vector of data to be fit by func(t,p,c)\n        // weight_sq = square of the weighting vector for least squares fit ...\n        //\t    inverse of the standard measurement errors\n        // dp     = fractional increment of 'p' for numerical derivatives\n        //          dp(j)>0 central differences calculated\n        //          dp(j)<0 one sided differences calculated\n        //          dp(j)=0 sets corresponding partials to zero; i.e. holds p(j) fixed\n        //          Default:  0.001;\n        // c      = optional vector of constants passed to y_hat = func(t,p,c)\n        //---------- OUTPUT VARIABLES -------\n        // JtWJ\t = linearized Hessian matrix (inverse of covariance matrix)\n        // JtWdy   = linearized fitting vector\n        // Chi_sq = Chi-squared criteria: weighted sum of the squared residuals WSSR\n        // y_hat  = model evaluated with parameters 'p'\n        // J   = m-by-n Jacobian of model, y_hat, with respect to parameters, p\n\n        //   Henri Gavin, Dept. Civil & Environ. Engineering, Duke Univ. November 2005\n        //   modified from: ftp://fly.cnuce.cnr.it/pub/software/octave/leasqr/\n        //   Press, et al., Numerical Recipes, Cambridge Univ. Press, 1992, Chapter 15.\n\n\n        var Npnt = y_dat.length;\t\t// number of data points\n        var Npar = p.length;\t\t// number of parameters\n\n        dp = dp || 0.001;\n\n\n        //var JtWJ = new Matrix.zeros(Npar);\n        //var JtWdy  = new Matrix.zeros(Npar,1);\n\n        var y_hat = func(t,p,c);\t// evaluate model using parameters 'p'\n        //func_calls = func_calls + 1;\n        //console.log(J);\n        if ( (iteration%(2*Npar))==0 || dX2 > 0 ) {\n            //console.log(\"Par\");\n            J = this.lm_FD_J(func, t, p, y_hat, dp, c);\t\t// finite difference\n        }\n        else{\n            //console.log(\"ImPar\");\n            J = this.lm_Broyden_J(p_old, y_old, J, p, y_hat); // rank-1 update\n        }\n        var delta_y = math.subtract(y_dat, y_hat);\t// residual error between model and data\n        //console.log(delta_y[0][0]);\n        //console.log(delta_y.rows+\" \"+delta_y.columns+\" \"+JSON.stringify(weight_sq));\n        //var Chi_sq = delta_y' * ( delta_y .* weight_sq ); \t// Chi-squared error criteria\n        var Chi_sq = math.multiply(math.transpose(delta_y),math.dotMultiply(delta_y,weight_sq));\n        //JtWJ  = J' * ( J .* ( weight_sq * ones(1,Npar) ) );\n        var Jt = math.transpose(J);\n\n        //console.log(weight_sq);\n\n        var JtWJ = math.multiply(Jt, math.dotMultiply(J,math.multiply(weight_sq, Matrix.ones(1,Npar))));\n\n        //JtWdy = J' * ( weight_sq .* delta_y );\n        var JtWdy = math.multiply(Jt, math.dotMultiply(weight_sq,delta_y));\n\n\n        return {JtWJ:JtWJ,JtWdy:JtWdy,Chi_sq:Chi_sq,y_hat:y_hat,J:J};\n        // endfunction  # ------------------------------------------------------ LM_MATX\n    }\n\n\n\n};\n\nmodule.exports = LM;\n},{\"./algebra\":3,\"ml-matrix\":12}],3:[function(require,module,exports){\n/**\n * Created by acastillo on 8/24/15.\n */\n/**\n * Non in-place function definitions, compatible with mathjs code *\n */\n\n'use strict';\n\nvar Matrix = require('ml-matrix');\n\nfunction matrix(A,B){\n    return new Matrix(A,B);\n}\n\nfunction ones(rows, cols){\n    return Matrix.ones(rows,cols);\n}\n\nfunction eye(rows, cols){\n    return Matrix.eye(rows, cols);\n}\n\nfunction zeros(rows, cols){\n    return Matrix.zeros(rows, cols);\n}\n\nfunction random(rows, cols){\n    return Matrix.rand(rows,cols);\n}\n\nfunction transpose(A){\n    if(typeof A == 'number')\n        return A;\n    var result = A.clone();\n    return result.transpose();\n}\n\nfunction add(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A+B;\n    if(typeof A == 'number')\n        return this.add(B,A);\n\n    var result = A.clone();\n    return result.add(B);\n\n}\n\nfunction subtract(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A-B;\n    if(typeof A == 'number')\n        return this.subtract(B,A);\n    var result = A.clone();\n    return result.sub(B);\n}\n\nfunction multiply(A, B){\n    if(typeof A == 'number'&&typeof B === 'number')\n        return A*B;\n    if(typeof A == 'number')\n        return this.multiply(B,A);\n\n    var result = A.clone();\n\n    if(typeof B === 'number')\n        result.mul(B);\n    else\n        result = result.mmul(B);\n\n    if(result.rows==1&&result.columns==1)\n        return result[0][0];\n    else\n        return result;\n\n}\n\nfunction dotMultiply(A, B){\n    var result = A.clone();\n    return result.mul(B);\n}\n\nfunction dotDivide(A, B){\n    var result = A.clone();\n    return result.div(B);\n}\n\nfunction diag(A){\n    var diag = null;\n    var rows = A.rows, cols = A.columns, j, r;\n    //It is an array\n    if(typeof cols === \"undefined\" && (typeof A)=='object'){\n        if(A[0]&&A[0].length){\n            rows = A.length;\n            cols = A[0].length;\n            r = Math.min(rows,cols);\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j][j];\n            }\n        }\n        else{\n            cols = A.length;\n            diag = Matrix.zeros(cols, cols);\n            for (j = 0; j < cols; j++) {\n                diag[j][j]=A[j];\n            }\n        }\n\n    }\n    if(rows == 1){\n        diag = Matrix.zeros(cols, cols);\n        for (j = 0; j < cols; j++) {\n            diag[j][j]=A[0][j];\n        }\n    }\n    else{\n        if(rows>0 && cols > 0){\n            r = Math.min(rows,cols);\n            diag = new Array(r);\n            for (j = 0; j < r; j++) {\n                diag[j] = A[j][j];\n            }\n        }\n    }\n    return diag;\n}\n\nfunction min(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.min(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] < B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction max(A, B){\n    if(typeof A==='number' && typeof B ==='number')\n        return Math.max(A,B);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (A[i][j] > B[i][j]) {\n                result[i][j] = A[i][j];\n            }\n            else{\n                result[i][j] = B[i][j];\n            }\n        }\n    }\n    return result;\n}\n\nfunction sqrt(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.sqrt(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction abs(A){\n    if(typeof A==='number' )\n        return Math.abs(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.abs(A[i][j]);\n\n        }\n    }\n    return result;\n}\n\nfunction exp(A){\n    if(typeof A==='number' )\n        return Math.sqrt(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.exp(A[i][j]);\n        }\n    }\n    return result;\n}\n\nfunction dotPow(A, b){\n    if(typeof A==='number' )\n        return Math.pow(A,b);\n    //console.log(A);\n    var ii = A.rows, jj = A.columns;\n    var result = new Matrix(ii,jj);\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[i][j] = Math.pow(A[i][j],b);\n        }\n    }\n    return result;\n}\n\nfunction solve(A, B){\n    return A.solve(B);\n}\n\nfunction inv(A){\n    if(typeof A ===\"number\")\n        return 1/A;\n    return A.inverse();\n}\n\nmodule.exports = {\n    transpose:transpose,\n    add:add,\n    subtract:subtract,\n    multiply:multiply,\n    dotMultiply:dotMultiply,\n    dotDivide:dotDivide,\n    diag:diag,\n    min:min,\n    max:max,\n    solve:solve,\n    inv:inv,\n    sqrt:sqrt,\n    exp:exp,\n    dotPow:dotPow,\n    abs:abs,\n    matrix:matrix,\n    ones:ones,\n    zeros:zeros,\n    random:random,\n    eye:eye\n};\n\n},{\"ml-matrix\":12}],4:[function(require,module,exports){\n'use strict';\n\nmodule.exports = require('./LM');\nmodule.exports.Matrix = require('ml-matrix');\nmodule.exports.Matrix.algebra = require('./algebra');\n\n},{\"./LM\":2,\"./algebra\":3,\"ml-matrix\":12}],5:[function(require,module,exports){\n'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/CholeskyDecomposition.cs\nfunction CholeskyDecomposition(value) {\n    if (!(this instanceof CholeskyDecomposition)) {\n        return new CholeskyDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n    if (!value.isSymmetric())\n        throw new Error('Matrix is not symmetric');\n\n    var a = value,\n        dimension = a.rows,\n        l = new Matrix(dimension, dimension),\n        positiveDefinite = true,\n        i, j, k;\n\n    for (j = 0; j < dimension; j++) {\n        var Lrowj = l[j];\n        var d = 0;\n        for (k = 0; k < j; k++) {\n            var Lrowk = l[k];\n            var s = 0;\n            for (i = 0; i < k; i++) {\n                s += Lrowk[i] * Lrowj[i];\n            }\n            Lrowj[k] = s = (a[j][k] - s) / l[k][k];\n            d = d + s * s;\n        }\n\n        d = a[j][j] - d;\n\n        positiveDefinite &= (d > 0);\n        l[j][j] = Math.sqrt(Math.max(d, 0));\n        for (k = j + 1; k < dimension; k++) {\n            l[j][k] = 0;\n        }\n    }\n\n    if (!positiveDefinite) {\n        throw new Error('Matrix is not positive definite');\n    }\n\n    this.L = l;\n}\n\nCholeskyDecomposition.prototype = {\n    get leftTriangularFactor() {\n        return this.L;\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var l = this.L,\n            dimension = l.rows;\n\n        if (value.rows !== dimension) {\n            throw new Error('Matrix dimensions do not match');\n        }\n\n        var count = value.columns,\n            B = value.clone(),\n            i, j, k;\n\n        for (k = 0; k < dimension; k++) {\n            for (j = 0; j < count; j++) {\n                for (i = 0; i < k; i++) {\n                    B[k][j] -= B[i][j] * l[k][i];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        for (k = dimension - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                for (i = k + 1; i < dimension; i++) {\n                    B[k][j] -= B[i][j] * l[i][k];\n                }\n                B[k][j] /= l[k][k];\n            }\n        }\n\n        return B;\n    }\n};\n\nmodule.exports = CholeskyDecomposition;\n\n},{\"../matrix\":13}],6:[function(require,module,exports){\n'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/EigenvalueDecomposition.cs\nfunction EigenvalueDecomposition(matrix) {\n    if (!(this instanceof EigenvalueDecomposition)) {\n        return new EigenvalueDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n    if (!matrix.isSquare()) {\n        throw new Error('Matrix is not a square matrix');\n    }\n\n    var n = matrix.columns,\n        V = Matrix.zeros(n, n),\n        d = new Array(n),\n        e = new Array(n),\n        value = matrix,\n        i, j;\n\n    if (matrix.isSymmetric()) {\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                V[i][j] = value[i][j];\n            }\n        }\n        tred2(n, e, d, V);\n        tql2(n, e, d, V);\n    }\n    else {\n        var H = Matrix.zeros(n, n),\n            ort = new Array(n);\n        for (j = 0; j < n; j++) {\n            for (i = 0; i < n; i++) {\n                H[i][j] = value[i][j];\n            }\n        }\n        orthes(n, H, ort, V);\n        hqr2(n, e, d, V, H);\n    }\n\n    this.n = n;\n    this.e = e;\n    this.d = d;\n    this.V = V;\n}\n\nEigenvalueDecomposition.prototype = {\n    get realEigenvalues() {\n        return this.d;\n    },\n    get imaginaryEigenvalues() {\n        return this.e;\n    },\n    get eigenvectorMatrix() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        var n = this.n,\n            e = this.e,\n            d = this.d,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                X[i][j] = 0;\n            }\n            X[i][i] = d[i];\n            if (e[i] > 0) {\n                X[i][i + 1] = e[i];\n            }\n            else if (e[i] < 0) {\n                X[i][i - 1] = e[i];\n            }\n        }\n        return X;\n    }\n};\n\nfunction tred2(n, e, d, V) {\n\n    var f, g, h, i, j, k,\n        hh, scale;\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n    }\n\n    for (i = n - 1; i > 0; i--) {\n        scale = 0;\n        h = 0;\n        for (k = 0; k < i; k++) {\n            scale = scale + Math.abs(d[k]);\n        }\n\n        if (scale === 0) {\n            e[i] = d[i - 1];\n            for (j = 0; j < i; j++) {\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n                V[j][i] = 0;\n            }\n        } else {\n            for (k = 0; k < i; k++) {\n                d[k] /= scale;\n                h += d[k] * d[k];\n            }\n\n            f = d[i - 1];\n            g = Math.sqrt(h);\n            if (f > 0) {\n                g = -g;\n            }\n\n            e[i] = scale * g;\n            h = h - f * g;\n            d[i - 1] = f - g;\n            for (j = 0; j < i; j++) {\n                e[j] = 0;\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                V[j][i] = f;\n                g = e[j] + V[j][j] * f;\n                for (k = j + 1; k <= i - 1; k++) {\n                    g += V[k][j] * d[k];\n                    e[k] += V[k][j] * f;\n                }\n                e[j] = g;\n            }\n\n            f = 0;\n            for (j = 0; j < i; j++) {\n                e[j] /= h;\n                f += e[j] * d[j];\n            }\n\n            hh = f / (h + h);\n            for (j = 0; j < i; j++) {\n                e[j] -= hh * d[j];\n            }\n\n            for (j = 0; j < i; j++) {\n                f = d[j];\n                g = e[j];\n                for (k = j; k <= i - 1; k++) {\n                    V[k][j] -= (f * e[k] + g * d[k]);\n                }\n                d[j] = V[i - 1][j];\n                V[i][j] = 0;\n            }\n        }\n        d[i] = h;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        V[n - 1][i] = V[i][i];\n        V[i][i] = 1;\n        h = d[i + 1];\n        if (h !== 0) {\n            for (k = 0; k <= i; k++) {\n                d[k] = V[k][i + 1] / h;\n            }\n\n            for (j = 0; j <= i; j++) {\n                g = 0;\n                for (k = 0; k <= i; k++) {\n                    g += V[k][i + 1] * V[k][j];\n                }\n                for (k = 0; k <= i; k++) {\n                    V[k][j] -= g * d[k];\n                }\n            }\n        }\n\n        for (k = 0; k <= i; k++) {\n            V[k][i + 1] = 0;\n        }\n    }\n\n    for (j = 0; j < n; j++) {\n        d[j] = V[n - 1][j];\n        V[n - 1][j] = 0;\n    }\n\n    V[n - 1][n - 1] = 1;\n    e[0] = 0;\n}\n\nfunction tql2(n, e, d, V) {\n\n    var g, h, i, j, k, l, m, p, r,\n        dl1, c, c2, c3, el1, s, s2,\n        iter;\n\n    for (i = 1; i < n; i++) {\n        e[i - 1] = e[i];\n    }\n\n    e[n - 1] = 0;\n\n    var f = 0,\n        tst1 = 0,\n        eps = Math.pow(2, -52);\n\n    for (l = 0; l < n; l++) {\n        tst1 = Math.max(tst1, Math.abs(d[l]) + Math.abs(e[l]));\n        m = l;\n        while (m < n) {\n            if (Math.abs(e[m]) <= eps * tst1) {\n                break;\n            }\n            m++;\n        }\n\n        if (m > l) {\n            iter = 0;\n            do {\n                iter = iter + 1;\n\n                g = d[l];\n                p = (d[l + 1] - g) / (2 * e[l]);\n                r = hypotenuse(p, 1);\n                if (p < 0) {\n                    r = -r;\n                }\n\n                d[l] = e[l] / (p + r);\n                d[l + 1] = e[l] * (p + r);\n                dl1 = d[l + 1];\n                h = g - d[l];\n                for (i = l + 2; i < n; i++) {\n                    d[i] -= h;\n                }\n\n                f = f + h;\n\n                p = d[m];\n                c = 1;\n                c2 = c;\n                c3 = c;\n                el1 = e[l + 1];\n                s = 0;\n                s2 = 0;\n                for (i = m - 1; i >= l; i--) {\n                    c3 = c2;\n                    c2 = c;\n                    s2 = s;\n                    g = c * e[i];\n                    h = c * p;\n                    r = hypotenuse(p, e[i]);\n                    e[i + 1] = s * r;\n                    s = e[i] / r;\n                    c = p / r;\n                    p = c * d[i] - s * g;\n                    d[i + 1] = h + s * (c * g + s * d[i]);\n\n                    for (k = 0; k < n; k++) {\n                        h = V[k][i + 1];\n                        V[k][i + 1] = s * V[k][i] + c * h;\n                        V[k][i] = c * V[k][i] - s * h;\n                    }\n                }\n\n                p = -s * s2 * c3 * el1 * e[l] / dl1;\n                e[l] = s * p;\n                d[l] = c * p;\n\n            }\n            while (Math.abs(e[l]) > eps * tst1);\n        }\n        d[l] = d[l] + f;\n        e[l] = 0;\n    }\n\n    for (i = 0; i < n - 1; i++) {\n        k = i;\n        p = d[i];\n        for (j = i + 1; j < n; j++) {\n            if (d[j] < p) {\n                k = j;\n                p = d[j];\n            }\n        }\n\n        if (k !== i) {\n            d[k] = d[i];\n            d[i] = p;\n            for (j = 0; j < n; j++) {\n                p = V[j][i];\n                V[j][i] = V[j][k];\n                V[j][k] = p;\n            }\n        }\n    }\n}\n\nfunction orthes(n, H, ort, V) {\n\n    var low = 0,\n        high = n - 1,\n        f, g, h, i, j, m,\n        scale;\n\n    for (m = low + 1; m <= high - 1; m++) {\n        scale = 0;\n        for (i = m; i <= high; i++) {\n            scale = scale + Math.abs(H[i][m - 1]);\n        }\n\n        if (scale !== 0) {\n            h = 0;\n            for (i = high; i >= m; i--) {\n                ort[i] = H[i][m - 1] / scale;\n                h += ort[i] * ort[i];\n            }\n\n            g = Math.sqrt(h);\n            if (ort[m] > 0) {\n                g = -g;\n            }\n\n            h = h - ort[m] * g;\n            ort[m] = ort[m] - g;\n\n            for (j = m; j < n; j++) {\n                f = 0;\n                for (i = high; i >= m; i--) {\n                    f += ort[i] * H[i][j];\n                }\n\n                f = f / h;\n                for (i = m; i <= high; i++) {\n                    H[i][j] -= f * ort[i];\n                }\n            }\n\n            for (i = 0; i <= high; i++) {\n                f = 0;\n                for (j = high; j >= m; j--) {\n                    f += ort[j] * H[i][j];\n                }\n\n                f = f / h;\n                for (j = m; j <= high; j++) {\n                    H[i][j] -= f * ort[j];\n                }\n            }\n\n            ort[m] = scale * ort[m];\n            H[m][m - 1] = scale * g;\n        }\n    }\n\n    for (i = 0; i < n; i++) {\n        for (j = 0; j < n; j++) {\n            V[i][j] = (i === j ? 1 : 0);\n        }\n    }\n\n    for (m = high - 1; m >= low + 1; m--) {\n        if (H[m][m - 1] !== 0) {\n            for (i = m + 1; i <= high; i++) {\n                ort[i] = H[i][m - 1];\n            }\n\n            for (j = m; j <= high; j++) {\n                g = 0;\n                for (i = m; i <= high; i++) {\n                    g += ort[i] * V[i][j];\n                }\n\n                g = (g / ort[m]) / H[m][m - 1];\n                for (i = m; i <= high; i++) {\n                    V[i][j] += g * ort[i];\n                }\n            }\n        }\n    }\n}\n\nfunction hqr2(nn, e, d, V, H) {\n    var n = nn - 1,\n        low = 0,\n        high = nn - 1,\n        eps = Math.pow(2, -52),\n        exshift = 0,\n        norm = 0,\n        p = 0,\n        q = 0,\n        r = 0,\n        s = 0,\n        z = 0,\n        iter = 0,\n        i, j, k, l, m, t, w, x, y,\n        ra, sa, vr, vi,\n        notlast, cdivres;\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            d[i] = H[i][i];\n            e[i] = 0;\n        }\n\n        for (j = Math.max(i - 1, 0); j < nn; j++) {\n            norm = norm + Math.abs(H[i][j]);\n        }\n    }\n\n    while (n >= low) {\n        l = n;\n        while (l > low) {\n            s = Math.abs(H[l - 1][l - 1]) + Math.abs(H[l][l]);\n            if (s === 0) {\n                s = norm;\n            }\n            if (Math.abs(H[l][l - 1]) < eps * s) {\n                break;\n            }\n            l--;\n        }\n\n        if (l === n) {\n            H[n][n] = H[n][n] + exshift;\n            d[n] = H[n][n];\n            e[n] = 0;\n            n--;\n            iter = 0;\n        } else if (l === n - 1) {\n            w = H[n][n - 1] * H[n - 1][n];\n            p = (H[n - 1][n - 1] - H[n][n]) / 2;\n            q = p * p + w;\n            z = Math.sqrt(Math.abs(q));\n            H[n][n] = H[n][n] + exshift;\n            H[n - 1][n - 1] = H[n - 1][n - 1] + exshift;\n            x = H[n][n];\n\n            if (q >= 0) {\n                z = (p >= 0) ? (p + z) : (p - z);\n                d[n - 1] = x + z;\n                d[n] = d[n - 1];\n                if (z !== 0) {\n                    d[n] = x - w / z;\n                }\n                e[n - 1] = 0;\n                e[n] = 0;\n                x = H[n][n - 1];\n                s = Math.abs(x) + Math.abs(z);\n                p = x / s;\n                q = z / s;\n                r = Math.sqrt(p * p + q * q);\n                p = p / r;\n                q = q / r;\n\n                for (j = n - 1; j < nn; j++) {\n                    z = H[n - 1][j];\n                    H[n - 1][j] = q * z + p * H[n][j];\n                    H[n][j] = q * H[n][j] - p * z;\n                }\n\n                for (i = 0; i <= n; i++) {\n                    z = H[i][n - 1];\n                    H[i][n - 1] = q * z + p * H[i][n];\n                    H[i][n] = q * H[i][n] - p * z;\n                }\n\n                for (i = low; i <= high; i++) {\n                    z = V[i][n - 1];\n                    V[i][n - 1] = q * z + p * V[i][n];\n                    V[i][n] = q * V[i][n] - p * z;\n                }\n            } else {\n                d[n - 1] = x + p;\n                d[n] = x + p;\n                e[n - 1] = z;\n                e[n] = -z;\n            }\n\n            n = n - 2;\n            iter = 0;\n        } else {\n            x = H[n][n];\n            y = 0;\n            w = 0;\n            if (l < n) {\n                y = H[n - 1][n - 1];\n                w = H[n][n - 1] * H[n - 1][n];\n            }\n\n            if (iter === 10) {\n                exshift += x;\n                for (i = low; i <= n; i++) {\n                    H[i][i] -= x;\n                }\n                s = Math.abs(H[n][n - 1]) + Math.abs(H[n - 1][n - 2]);\n                x = y = 0.75 * s;\n                w = -0.4375 * s * s;\n            }\n\n            if (iter === 30) {\n                s = (y - x) / 2;\n                s = s * s + w;\n                if (s > 0) {\n                    s = Math.sqrt(s);\n                    if (y < x) {\n                        s = -s;\n                    }\n                    s = x - w / ((y - x) / 2 + s);\n                    for (i = low; i <= n; i++) {\n                        H[i][i] -= s;\n                    }\n                    exshift += s;\n                    x = y = w = 0.964;\n                }\n            }\n\n            iter = iter + 1;\n\n            m = n - 2;\n            while (m >= l) {\n                z = H[m][m];\n                r = x - z;\n                s = y - z;\n                p = (r * s - w) / H[m + 1][m] + H[m][m + 1];\n                q = H[m + 1][m + 1] - z - r - s;\n                r = H[m + 2][m + 1];\n                s = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                p = p / s;\n                q = q / s;\n                r = r / s;\n                if (m === l) {\n                    break;\n                }\n                if (Math.abs(H[m][m - 1]) * (Math.abs(q) + Math.abs(r)) < eps * (Math.abs(p) * (Math.abs(H[m - 1][m - 1]) + Math.abs(z) + Math.abs(H[m + 1][m + 1])))) {\n                    break;\n                }\n                m--;\n            }\n\n            for (i = m + 2; i <= n; i++) {\n                H[i][i - 2] = 0;\n                if (i > m + 2) {\n                    H[i][i - 3] = 0;\n                }\n            }\n\n            for (k = m; k <= n - 1; k++) {\n                notlast = (k !== n - 1);\n                if (k !== m) {\n                    p = H[k][k - 1];\n                    q = H[k + 1][k - 1];\n                    r = (notlast ? H[k + 2][k - 1] : 0);\n                    x = Math.abs(p) + Math.abs(q) + Math.abs(r);\n                    if (x !== 0) {\n                        p = p / x;\n                        q = q / x;\n                        r = r / x;\n                    }\n                }\n\n                if (x === 0) {\n                    break;\n                }\n\n                s = Math.sqrt(p * p + q * q + r * r);\n                if (p < 0) {\n                    s = -s;\n                }\n\n                if (s !== 0) {\n                    if (k !== m) {\n                        H[k][k - 1] = -s * x;\n                    } else if (l !== m) {\n                        H[k][k - 1] = -H[k][k - 1];\n                    }\n\n                    p = p + s;\n                    x = p / s;\n                    y = q / s;\n                    z = r / s;\n                    q = q / p;\n                    r = r / p;\n\n                    for (j = k; j < nn; j++) {\n                        p = H[k][j] + q * H[k + 1][j];\n                        if (notlast) {\n                            p = p + r * H[k + 2][j];\n                            H[k + 2][j] = H[k + 2][j] - p * z;\n                        }\n\n                        H[k][j] = H[k][j] - p * x;\n                        H[k + 1][j] = H[k + 1][j] - p * y;\n                    }\n\n                    for (i = 0; i <= Math.min(n, k + 3); i++) {\n                        p = x * H[i][k] + y * H[i][k + 1];\n                        if (notlast) {\n                            p = p + z * H[i][k + 2];\n                            H[i][k + 2] = H[i][k + 2] - p * r;\n                        }\n\n                        H[i][k] = H[i][k] - p;\n                        H[i][k + 1] = H[i][k + 1] - p * q;\n                    }\n\n                    for (i = low; i <= high; i++) {\n                        p = x * V[i][k] + y * V[i][k + 1];\n                        if (notlast) {\n                            p = p + z * V[i][k + 2];\n                            V[i][k + 2] = V[i][k + 2] - p * r;\n                        }\n\n                        V[i][k] = V[i][k] - p;\n                        V[i][k + 1] = V[i][k + 1] - p * q;\n                    }\n                }\n            }\n        }\n    }\n\n    if (norm === 0) {\n        return;\n    }\n\n    for (n = nn - 1; n >= 0; n--) {\n        p = d[n];\n        q = e[n];\n\n        if (q === 0) {\n            l = n;\n            H[n][n] = 1;\n            for (i = n - 1; i >= 0; i--) {\n                w = H[i][i] - p;\n                r = 0;\n                for (j = l; j <= n; j++) {\n                    r = r + H[i][j] * H[j][n];\n                }\n\n                if (e[i] < 0) {\n                    z = w;\n                    s = r;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        H[i][n] = (w !== 0) ? (-r / w) : (-r / (eps * norm));\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        q = (d[i] - p) * (d[i] - p) + e[i] * e[i];\n                        t = (x * s - z * r) / q;\n                        H[i][n] = t;\n                        H[i + 1][n] = (Math.abs(x) > Math.abs(z)) ? ((-r - w * t) / x) : ((-s - y * t) / z);\n                    }\n\n                    t = Math.abs(H[i][n]);\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        } else if (q < 0) {\n            l = n - 1;\n\n            if (Math.abs(H[n][n - 1]) > Math.abs(H[n - 1][n])) {\n                H[n - 1][n - 1] = q / H[n][n - 1];\n                H[n - 1][n] = -(H[n][n] - p) / H[n][n - 1];\n            } else {\n                cdivres = cdiv(0, -H[n - 1][n], H[n - 1][n - 1] - p, q);\n                H[n - 1][n - 1] = cdivres[0];\n                H[n - 1][n] = cdivres[1];\n            }\n\n            H[n][n - 1] = 0;\n            H[n][n] = 1;\n            for (i = n - 2; i >= 0; i--) {\n                ra = 0;\n                sa = 0;\n                for (j = l; j <= n; j++) {\n                    ra = ra + H[i][j] * H[j][n - 1];\n                    sa = sa + H[i][j] * H[j][n];\n                }\n\n                w = H[i][i] - p;\n\n                if (e[i] < 0) {\n                    z = w;\n                    r = ra;\n                    s = sa;\n                } else {\n                    l = i;\n                    if (e[i] === 0) {\n                        cdivres = cdiv(-ra, -sa, w, q);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                    } else {\n                        x = H[i][i + 1];\n                        y = H[i + 1][i];\n                        vr = (d[i] - p) * (d[i] - p) + e[i] * e[i] - q * q;\n                        vi = (d[i] - p) * 2 * q;\n                        if (vr === 0 && vi === 0) {\n                            vr = eps * norm * (Math.abs(w) + Math.abs(q) + Math.abs(x) + Math.abs(y) + Math.abs(z));\n                        }\n                        cdivres = cdiv(x * r - z * ra + q * sa, x * s - z * sa - q * ra, vr, vi);\n                        H[i][n - 1] = cdivres[0];\n                        H[i][n] = cdivres[1];\n                        if (Math.abs(x) > (Math.abs(z) + Math.abs(q))) {\n                            H[i + 1][n - 1] = (-ra - w * H[i][n - 1] + q * H[i][n]) / x;\n                            H[i + 1][n] = (-sa - w * H[i][n] - q * H[i][n - 1]) / x;\n                        } else {\n                            cdivres = cdiv(-r - y * H[i][n - 1], -s - y * H[i][n], z, q);\n                            H[i + 1][n - 1] = cdivres[0];\n                            H[i + 1][n] = cdivres[1];\n                        }\n                    }\n\n                    t = Math.max(Math.abs(H[i][n - 1]), Math.abs(H[i][n]));\n                    if ((eps * t) * t > 1) {\n                        for (j = i; j <= n; j++) {\n                            H[j][n - 1] = H[j][n - 1] / t;\n                            H[j][n] = H[j][n] / t;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for (i = 0; i < nn; i++) {\n        if (i < low || i > high) {\n            for (j = i; j < nn; j++) {\n                V[i][j] = H[i][j];\n            }\n        }\n    }\n\n    for (j = nn - 1; j >= low; j--) {\n        for (i = low; i <= high; i++) {\n            z = 0;\n            for (k = low; k <= Math.min(j, high); k++) {\n                z = z + V[i][k] * H[k][j];\n            }\n            V[i][j] = z;\n        }\n    }\n}\n\nfunction cdiv(xr, xi, yr, yi) {\n    var r, d;\n    if (Math.abs(yr) > Math.abs(yi)) {\n        r = yi / yr;\n        d = yr + r * yi;\n        return [(xr + r * xi) / d, (xi - r * xr) / d];\n    }\n    else {\n        r = yr / yi;\n        d = yi + r * yr;\n        return [(r * xr + xi) / d, (r * xi - xr) / d];\n    }\n}\n\nmodule.exports = EigenvalueDecomposition;\n\n},{\"../matrix\":13,\"./util\":10}],7:[function(require,module,exports){\n'use strict';\n\nvar Matrix = require('../matrix');\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/LuDecomposition.cs\nfunction LuDecomposition(matrix) {\n    if (!(this instanceof LuDecomposition)) {\n        return new LuDecomposition(matrix);\n    }\n    matrix = Matrix.checkMatrix(matrix);\n\n    var lu = matrix.clone(),\n        rows = lu.rows,\n        columns = lu.columns,\n        pivotVector = new Array(rows),\n        pivotSign = 1,\n        i, j, k, p, s, t, v,\n        LUrowi, LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n        pivotVector[i] = i;\n    }\n\n    LUcolj = new Array(rows);\n\n    for (j = 0; j < columns; j++) {\n\n        for (i = 0; i < rows; i++) {\n            LUcolj[i] = lu[i][j];\n        }\n\n        for (i = 0; i < rows; i++) {\n            LUrowi = lu[i];\n            kmax = Math.min(i, j);\n            s = 0;\n            for (k = 0; k < kmax; k++) {\n                s += LUrowi[k] * LUcolj[k];\n            }\n            LUrowi[j] = LUcolj[i] -= s;\n        }\n\n        p = j;\n        for (i = j + 1; i < rows; i++) {\n            if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n                p = i;\n            }\n        }\n\n        if (p !== j) {\n            for (k = 0; k < columns; k++) {\n                t = lu[p][k];\n                lu[p][k] = lu[j][k];\n                lu[j][k] = t;\n            }\n\n            v = pivotVector[p];\n            pivotVector[p] = pivotVector[j];\n            pivotVector[j] = v;\n\n            pivotSign = -pivotSign;\n        }\n\n        if (j < rows && lu[j][j] !== 0) {\n            for (i = j + 1; i < rows; i++) {\n                lu[i][j] /= lu[j][j];\n            }\n        }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n}\n\nLuDecomposition.prototype = {\n    isSingular: function () {\n        var data = this.LU,\n            col = data.columns;\n        for (var j = 0; j < col; j++) {\n            if (data[j][j] === 0) {\n                return true;\n            }\n        }\n        return false;\n    },\n    get determinant() {\n        var data = this.LU;\n        if (!data.isSquare())\n            throw new Error('Matrix must be square');\n        var determinant = this.pivotSign, col = data.columns;\n        for (var j = 0; j < col; j++)\n            determinant *= data[j][j];\n        return determinant;\n    },\n    get lowerTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i > j) {\n                    X[i][j] = data[i][j];\n                } else if (i === j) {\n                    X[i][j] = 1;\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get upperTriangularFactor() {\n        var data = this.LU,\n            rows = data.rows,\n            columns = data.columns,\n            X = new Matrix(rows, columns);\n        for (var i = 0; i < rows; i++) {\n            for (var j = 0; j < columns; j++) {\n                if (i <= j) {\n                    X[i][j] = data[i][j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get pivotPermutationVector() {\n        return this.pivotVector.slice();\n    },\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var lu = this.LU,\n            rows = lu.rows;\n\n        if (rows !== value.rows)\n            throw new Error('Invalid matrix dimensions');\n        if (this.isSingular())\n            throw new Error('LU matrix is singular');\n\n        var count = value.columns,\n            X = value.subMatrixRow(this.pivotVector, 0, count - 1),\n            columns = lu.columns,\n            i, j, k;\n\n        for (k = 0; k < columns; k++) {\n            for (i = k + 1; i < columns; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        for (k = columns - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= lu[k][k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * lu[i][k];\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = LuDecomposition;\n\n},{\"../matrix\":13}],8:[function(require,module,exports){\n'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n//https://github.com/lutzroeder/Mapack/blob/master/Source/QrDecomposition.cs\nfunction QrDecomposition(value) {\n    if (!(this instanceof QrDecomposition)) {\n        return new QrDecomposition(value);\n    }\n    value = Matrix.checkMatrix(value);\n\n    var qr = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        rdiag = new Array(n),\n        i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n        var nrm = 0;\n        for (i = k; i < m; i++) {\n            nrm = hypotenuse(nrm, qr[i][k]);\n        }\n        if (nrm !== 0) {\n            if (qr[k][k] < 0) {\n                nrm = -nrm;\n            }\n            for (i = k; i < m; i++) {\n                qr[i][k] /= nrm;\n            }\n            qr[k][k] += 1;\n            for (j = k + 1; j < n; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * qr[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    qr[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n}\n\nQrDecomposition.prototype = {\n    solve: function (value) {\n        value = Matrix.checkMatrix(value);\n\n        var qr = this.QR,\n            m = qr.rows;\n\n        if (value.rows !== m)\n            throw new Error('Matrix row dimensions must agree');\n        if (!this.isFullRank())\n            throw new Error('Matrix is rank deficient');\n\n        var count = value.columns,\n            X = value.clone(),\n            n = qr.columns,\n            i, j, k, s;\n\n        for (k = 0; k < n; k++) {\n            for (j = 0; j < count; j++) {\n                s = 0;\n                for (i = k; i < m; i++) {\n                    s += qr[i][k] * X[i][j];\n                }\n                s = -s / qr[k][k];\n                for (i = k; i < m; i++) {\n                    X[i][j] += s * qr[i][k];\n                }\n            }\n        }\n        for (k = n - 1; k >= 0; k--) {\n            for (j = 0; j < count; j++) {\n                X[k][j] /= this.Rdiag[k];\n            }\n            for (i = 0; i < k; i++) {\n                for (j = 0; j < count; j++) {\n                    X[i][j] -= X[k][j] * qr[i][k];\n                }\n            }\n        }\n\n        return X.subMatrix(0, n - 1, 0, count - 1);\n    },\n    isFullRank: function () {\n        var columns = this.QR.columns;\n        for (var i = 0; i < columns; i++) {\n            if (this.Rdiag[i] === 0) {\n                return false;\n            }\n        }\n        return true;\n    },\n    get upperTriangularFactor() {\n        var qr = this.QR,\n            n = qr.columns,\n            X = new Matrix(n, n),\n            i, j;\n        for (i = 0; i < n; i++) {\n            for (j = 0; j < n; j++) {\n                if (i < j) {\n                    X[i][j] = qr[i][j];\n                } else if (i === j) {\n                    X[i][j] = this.Rdiag[i];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n        return X;\n    },\n    get orthogonalFactor() {\n        var qr = this.QR,\n            rows = qr.rows,\n            columns = qr.columns,\n            X = new Matrix(rows, columns),\n            i, j, k, s;\n\n        for (k = columns - 1; k >= 0; k--) {\n            for (i = 0; i < rows; i++) {\n                X[i][k] = 0;\n            }\n            X[k][k] = 1;\n            for (j = k; j < columns; j++) {\n                if (qr[k][k] !== 0) {\n                    s = 0;\n                    for (i = k; i < rows; i++) {\n                        s += qr[i][k] * X[i][j];\n                    }\n\n                    s = -s / qr[k][k];\n\n                    for (i = k; i < rows; i++) {\n                        X[i][j] += s * qr[i][k];\n                    }\n                }\n            }\n        }\n        return X;\n    }\n};\n\nmodule.exports = QrDecomposition;\n\n},{\"../matrix\":13,\"./util\":10}],9:[function(require,module,exports){\n'use strict';\n\nvar Matrix = require('../matrix');\nvar hypotenuse = require('./util').hypotenuse;\n\n// https://github.com/lutzroeder/Mapack/blob/master/Source/SingularValueDecomposition.cs\nfunction SingularValueDecomposition(value, options) {\n    if (!(this instanceof SingularValueDecomposition)) {\n        return new SingularValueDecomposition(value, options);\n    }\n    value = Matrix.checkMatrix(value);\n\n    options = options || {};\n\n    var a = value.clone(),\n        m = value.rows,\n        n = value.columns,\n        nu = Math.min(m, n);\n\n    var wantu = true, wantv = true;\n    if (options.computeLeftSingularVectors === false)\n        wantu = false;\n    if (options.computeRightSingularVectors === false)\n        wantv = false;\n    var autoTranspose = options.autoTranspose === true;\n\n    var swapped = false;\n    if (m < n) {\n        if (!autoTranspose) {\n            console.warn('Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose');\n        } else {\n            a = a.transpose();\n            m = a.rows;\n            n = a.columns;\n            swapped = true;\n            var aux = wantu;\n            wantu = wantv;\n            wantv = aux;\n        }\n    }\n\n    var s = new Array(Math.min(m + 1, n)),\n        U = Matrix.zeros(m, nu),\n        V = Matrix.zeros(n, n),\n        e = new Array(n),\n        work = new Array(m);\n\n    var nct = Math.min(m - 1, n);\n    var nrt = Math.max(0, Math.min(n - 2, m));\n\n    var i, j, k, p, t, ks, f, cs, sn, max, kase,\n        scale, sp, spm1, epm1, sk, ek, b, c, shift, g;\n\n    for (k = 0, max = Math.max(nct, nrt); k < max; k++) {\n        if (k < nct) {\n            s[k] = 0;\n            for (i = k; i < m; i++) {\n                s[k] = hypotenuse(s[k], a[i][k]);\n            }\n            if (s[k] !== 0) {\n                if (a[k][k] < 0) {\n                    s[k] = -s[k];\n                }\n                for (i = k; i < m; i++) {\n                    a[i][k] /= s[k];\n                }\n                a[k][k] += 1;\n            }\n            s[k] = -s[k];\n        }\n\n        for (j = k + 1; j < n; j++) {\n            if ((k < nct) && (s[k] !== 0)) {\n                t = 0;\n                for (i = k; i < m; i++) {\n                    t += a[i][k] * a[i][j];\n                }\n                t = -t / a[k][k];\n                for (i = k; i < m; i++) {\n                    a[i][j] += t * a[i][k];\n                }\n            }\n            e[j] = a[k][j];\n        }\n\n        if (wantu && (k < nct)) {\n            for (i = k; i < m; i++) {\n                U[i][k] = a[i][k];\n            }\n        }\n\n        if (k < nrt) {\n            e[k] = 0;\n            for (i = k + 1; i < n; i++) {\n                e[k] = hypotenuse(e[k], e[i]);\n            }\n            if (e[k] !== 0) {\n                if (e[k + 1] < 0)\n                    e[k] = -e[k];\n                for (i = k + 1; i < n; i++) {\n                    e[i] /= e[k];\n                }\n                e[k + 1] += 1;\n            }\n            e[k] = -e[k];\n            if ((k + 1 < m) && (e[k] !== 0)) {\n                for (i = k + 1; i < m; i++) {\n                    work[i] = 0;\n                }\n                for (j = k + 1; j < n; j++) {\n                    for (i = k + 1; i < m; i++) {\n                        work[i] += e[j] * a[i][j];\n                    }\n                }\n                for (j = k + 1; j < n; j++) {\n                    t = -e[j] / e[k + 1];\n                    for (i = k + 1; i < m; i++) {\n                        a[i][j] += t * work[i];\n                    }\n                }\n            }\n            if (wantv) {\n                for (i = k + 1; i < n; i++) {\n                    V[i][k] = e[i];\n                }\n            }\n        }\n    }\n\n    p = Math.min(n, m + 1);\n    if (nct < n) {\n        s[nct] = a[nct][nct];\n    }\n    if (m < p) {\n        s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n        e[nrt] = a[nrt][p - 1];\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n        for (j = nct; j < nu; j++) {\n            for (i = 0; i < m; i++) {\n                U[i][j] = 0;\n            }\n            U[j][j] = 1;\n        }\n        for (k = nct - 1; k >= 0; k--) {\n            if (s[k] !== 0) {\n                for (j = k + 1; j < nu; j++) {\n                    t = 0;\n                    for (i = k; i < m; i++) {\n                        t += U[i][k] * U[i][j];\n                    }\n                    t = -t / U[k][k];\n                    for (i = k; i < m; i++) {\n                        U[i][j] += t * U[i][k];\n                    }\n                }\n                for (i = k; i < m; i++) {\n                    U[i][k] = -U[i][k];\n                }\n                U[k][k] = 1 + U[k][k];\n                for (i = 0; i < k - 1; i++) {\n                    U[i][k] = 0;\n                }\n            } else {\n                for (i = 0; i < m; i++) {\n                    U[i][k] = 0;\n                }\n                U[k][k] = 1;\n            }\n        }\n    }\n\n    if (wantv) {\n        for (k = n - 1; k >= 0; k--) {\n            if ((k < nrt) && (e[k] !== 0)) {\n                for (j = k + 1; j < n; j++) {\n                    t = 0;\n                    for (i = k + 1; i < n; i++) {\n                        t += V[i][k] * V[i][j];\n                    }\n                    t = -t / V[k + 1][k];\n                    for (i = k + 1; i < n; i++) {\n                        V[i][j] += t * V[i][k];\n                    }\n                }\n            }\n            for (i = 0; i < n; i++) {\n                V[i][k] = 0;\n            }\n            V[k][k] = 1;\n        }\n    }\n\n    var pp = p - 1,\n        iter = 0,\n        eps = Math.pow(2, -52);\n    while (p > 0) {\n        for (k = p - 2; k >= -1; k--) {\n            if (k === -1) {\n                break;\n            }\n            if (Math.abs(e[k]) <= eps * (Math.abs(s[k]) + Math.abs(s[k + 1]))) {\n                e[k] = 0;\n                break;\n            }\n        }\n        if (k === p - 2) {\n            kase = 4;\n        } else {\n            for (ks = p - 1; ks >= k; ks--) {\n                if (ks === k) {\n                    break;\n                }\n                t = (ks !== p ? Math.abs(e[ks]) : 0) + (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n                if (Math.abs(s[ks]) <= eps * t) {\n                    s[ks] = 0;\n                    break;\n                }\n            }\n            if (ks === k) {\n                kase = 3;\n            } else if (ks === p - 1) {\n                kase = 1;\n            } else {\n                kase = 2;\n                k = ks;\n            }\n        }\n\n        k++;\n\n        switch (kase) {\n            case 1: {\n                f = e[p - 2];\n                e[p - 2] = 0;\n                for (j = p - 2; j >= k; j--) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    if (j !== k) {\n                        f = -sn * e[j - 1];\n                        e[j - 1] = cs * e[j - 1];\n                    }\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][p - 1];\n                            V[i][p - 1] = -sn * V[i][j] + cs * V[i][p - 1];\n                            V[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 2 : {\n                f = e[k - 1];\n                e[k - 1] = 0;\n                for (j = k; j < p; j++) {\n                    t = hypotenuse(s[j], f);\n                    cs = s[j] / t;\n                    sn = f / t;\n                    s[j] = t;\n                    f = -sn * e[j];\n                    e[j] = cs * e[j];\n                    if (wantu) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][k - 1];\n                            U[i][k - 1] = -sn * U[i][j] + cs * U[i][k - 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                break;\n            }\n            case 3 : {\n                scale = Math.max(Math.max(Math.max(Math.max(Math.abs(s[p - 1]), Math.abs(s[p - 2])), Math.abs(e[p - 2])), Math.abs(s[k])), Math.abs(e[k]));\n                sp = s[p - 1] / scale;\n                spm1 = s[p - 2] / scale;\n                epm1 = e[p - 2] / scale;\n                sk = s[k] / scale;\n                ek = e[k] / scale;\n                b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n                c = (sp * epm1) * (sp * epm1);\n                shift = 0;\n                if ((b !== 0) || (c !== 0)) {\n                    shift = Math.sqrt(b * b + c);\n                    if (b < 0) {\n                        shift = -shift;\n                    }\n                    shift = c / (b + shift);\n                }\n                f = (sk + sp) * (sk - sp) + shift;\n                g = sk * ek;\n                for (j = k; j < p - 1; j++) {\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    if (j !== k) {\n                        e[j - 1] = t;\n                    }\n                    f = cs * s[j] + sn * e[j];\n                    e[j] = cs * e[j] - sn * s[j];\n                    g = sn * s[j + 1];\n                    s[j + 1] = cs * s[j + 1];\n                    if (wantv) {\n                        for (i = 0; i < n; i++) {\n                            t = cs * V[i][j] + sn * V[i][j + 1];\n                            V[i][j + 1] = -sn * V[i][j] + cs * V[i][j + 1];\n                            V[i][j] = t;\n                        }\n                    }\n                    t = hypotenuse(f, g);\n                    cs = f / t;\n                    sn = g / t;\n                    s[j] = t;\n                    f = cs * e[j] + sn * s[j + 1];\n                    s[j + 1] = -sn * e[j] + cs * s[j + 1];\n                    g = sn * e[j + 1];\n                    e[j + 1] = cs * e[j + 1];\n                    if (wantu && (j < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = cs * U[i][j] + sn * U[i][j + 1];\n                            U[i][j + 1] = -sn * U[i][j] + cs * U[i][j + 1];\n                            U[i][j] = t;\n                        }\n                    }\n                }\n                e[p - 2] = f;\n                iter = iter + 1;\n                break;\n            }\n            case 4: {\n                if (s[k] <= 0) {\n                    s[k] = (s[k] < 0 ? -s[k] : 0);\n                    if (wantv) {\n                        for (i = 0; i <= pp; i++) {\n                            V[i][k] = -V[i][k];\n                        }\n                    }\n                }\n                while (k < pp) {\n                    if (s[k] >= s[k + 1]) {\n                        break;\n                    }\n                    t = s[k];\n                    s[k] = s[k + 1];\n                    s[k + 1] = t;\n                    if (wantv && (k < n - 1)) {\n                        for (i = 0; i < n; i++) {\n                            t = V[i][k + 1];\n                            V[i][k + 1] = V[i][k];\n                            V[i][k] = t;\n                        }\n                    }\n                    if (wantu && (k < m - 1)) {\n                        for (i = 0; i < m; i++) {\n                            t = U[i][k + 1];\n                            U[i][k + 1] = U[i][k];\n                            U[i][k] = t;\n                        }\n                    }\n                    k++;\n                }\n                iter = 0;\n                p--;\n                break;\n            }\n        }\n    }\n\n    if (swapped) {\n        var tmp = V;\n        V = U;\n        U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n}\n\nSingularValueDecomposition.prototype = {\n    get condition() {\n        return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n    },\n    get norm2() {\n        return this.s[0];\n    },\n    get rank() {\n        var eps = Math.pow(2, -52),\n            tol = Math.max(this.m, this.n) * this.s[0] * eps,\n            r = 0,\n            s = this.s;\n        for (var i = 0, ii = s.length; i < ii; i++) {\n            if (s[i] > tol) {\n                r++;\n            }\n        }\n        return r;\n    },\n    get diagonal() {\n        return this.s;\n    },\n    // https://github.com/accord-net/framework/blob/development/Sources/Accord.Math/Decompositions/SingularValueDecomposition.cs\n    get threshold() {\n        return (Math.pow(2, -52) / 2) * Math.max(this.m, this.n) * this.s[0];\n    },\n    get leftSingularVectors() {\n        return this.U;\n    },\n    get rightSingularVectors() {\n        return this.V;\n    },\n    get diagonalMatrix() {\n        return Matrix.diag(this.s);\n    },\n    solve: function (value) {\n\n        var Y = value,\n            e = this.threshold,\n            scols = this.s.length,\n            Ls = Matrix.zeros(scols, scols),\n            i;\n\n        for (i = 0; i < scols; i++) {\n            if (Math.abs(this.s[i]) <= e) {\n                Ls[i][i] = 0;\n            } else {\n                Ls[i][i] = 1 / this.s[i];\n            }\n        }\n\n\n        var VL = this.V.mmul(Ls),\n            vrows = this.V.rows,\n            urows = this.U.rows,\n            VLU = Matrix.zeros(vrows, urows),\n            j, k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < scols; k++) {\n                    sum += VL[i][k] * this.U[j][k];\n                }\n                VLU[i][j] = sum;\n            }\n        }\n\n        return VLU.mmul(Y);\n    },\n    solveForDiagonal: function (value) {\n        return this.solve(Matrix.diag(value));\n    },\n    inverse: function () {\n        var e = this.threshold,\n            vrows = this.V.rows,\n            vcols = this.V.columns,\n            X = new Matrix(vrows, this.s.length),\n            i, j;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < vcols; j++) {\n                if (Math.abs(this.s[j]) > e) {\n                    X[i][j] = this.V[i][j] / this.s[j];\n                } else {\n                    X[i][j] = 0;\n                }\n            }\n        }\n\n        var urows = this.U.rows,\n            ucols = this.U.columns,\n            Y = new Matrix(vrows, urows),\n            k, sum;\n\n        for (i = 0; i < vrows; i++) {\n            for (j = 0; j < urows; j++) {\n                sum = 0;\n                for (k = 0; k < ucols; k++) {\n                    sum += X[i][k] * this.U[j][k];\n                }\n                Y[i][j] = sum;\n            }\n        }\n\n        return Y;\n    }\n};\n\nmodule.exports = SingularValueDecomposition;\n\n},{\"../matrix\":13,\"./util\":10}],10:[function(require,module,exports){\n'use strict';\n\nexports.hypotenuse = function hypotenuse(a, b) {\n    var r;\n    if (Math.abs(a) > Math.abs(b)) {\n        r = b / a;\n        return Math.abs(a) * Math.sqrt(1 + r * r);\n    }\n    if (b !== 0) {\n        r = a / b;\n        return Math.abs(b) * Math.sqrt(1 + r * r);\n    }\n    return 0;\n};\n\n},{}],11:[function(require,module,exports){\n'use strict';\n\nvar Matrix = require('./matrix');\n\nvar SingularValueDecomposition = require('./dc/svd');\nvar EigenvalueDecomposition = require('./dc/evd');\nvar LuDecomposition = require('./dc/lu');\nvar QrDecomposition = require('./dc/qr');\nvar CholeskyDecomposition = require('./dc/cholesky');\n\nfunction inverse(matrix) {\n    return solve(matrix, Matrix.eye(matrix.rows));\n}\n\nMatrix.prototype.inverse = function () {\n    return inverse(this);\n};\n\nfunction solve(leftHandSide, rightHandSide) {\n    return leftHandSide.isSquare() ? new LuDecomposition(leftHandSide).solve(rightHandSide) : new QrDecomposition(leftHandSide).solve(rightHandSide);\n}\n\nMatrix.prototype.solve = function (other) {\n    return solve(this, other);\n};\n\nmodule.exports = {\n    SingularValueDecomposition: SingularValueDecomposition,\n    SVD: SingularValueDecomposition,\n    EigenvalueDecomposition: EigenvalueDecomposition,\n    EVD: EigenvalueDecomposition,\n    LuDecomposition: LuDecomposition,\n    LU: LuDecomposition,\n    QrDecomposition: QrDecomposition,\n    QR: QrDecomposition,\n    CholeskyDecomposition: CholeskyDecomposition,\n    CHO: CholeskyDecomposition,\n    inverse: inverse,\n    solve: solve\n};\n\n},{\"./dc/cholesky\":5,\"./dc/evd\":6,\"./dc/lu\":7,\"./dc/qr\":8,\"./dc/svd\":9,\"./matrix\":13}],12:[function(require,module,exports){\n'use strict';\n\nmodule.exports = require('./matrix');\nmodule.exports.Decompositions = module.exports.DC = require('./decompositions');\n\n},{\"./decompositions\":11,\"./matrix\":13}],13:[function(require,module,exports){\n'use strict';\n\nvar Asplice = Array.prototype.splice,\n    Aconcat = Array.prototype.concat;\n\n// For performance : http://jsperf.com/clone-array-slice-vs-while-vs-for\nfunction slice(arr) {\n    var i = 0,\n        ii = arr.length,\n        result = new Array(ii);\n    for (; i < ii; i++) {\n        result[i] = arr[i];\n    }\n    return result;\n}\n\n/**\n * Real matrix.\n * @constructor\n * @param {number|Array} nRows - Number of rows of the new matrix or a 2D array containing the data.\n * @param {number|boolean} [nColumns] - Number of columns of the new matrix or a boolean specifying if the input array should be cloned\n */\nfunction Matrix(nRows, nColumns) {\n    var i = 0, rows, columns, matrix, newInstance;\n    if (Array.isArray(nRows)) {\n        newInstance = nColumns;\n        matrix = newInstance ? slice(nRows) : nRows;\n        nRows = matrix.length;\n        nColumns = matrix[0].length;\n        if (typeof nColumns === 'undefined') {\n            throw new TypeError('Data must be a 2D array');\n        }\n        if (nRows > 0 && nColumns > 0) {\n            for (; i < nRows; i++) {\n                if (matrix[i].length !== nColumns) {\n                    throw new RangeError('Inconsistent array dimensions');\n                } else if (newInstance) {\n                    matrix[i] = slice(matrix[i]);\n                }\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else if (typeof nRows === 'number') { // Create empty matrix\n        if (nRows > 0 && nColumns > 0) {\n            matrix = new Array(nRows);\n            for (; i < nRows; i++) {\n                matrix[i] = new Array(nColumns);\n            }\n        } else {\n            throw new RangeError('Invalid dimensions: ' + nRows + 'x' + nColumns);\n        }\n    } else {\n        throw new TypeError('Invalid arguments');\n    }\n\n    Object.defineProperty(matrix, 'rows', {writable: true, value: nRows});\n    Object.defineProperty(matrix, 'columns', {writable: true, value: nColumns});\n\n    matrix.__proto__ = Matrix.prototype;\n\n    return matrix;\n}\n\n/**\n * Constructs a Matrix with the chosen dimensions from a 1D array.\n * @param {number} newRows - Number of rows\n * @param {number} newColumns - Number of columns\n * @param {Array} newData - A 1D array containing data for the matrix\n * @returns {Matrix} - The new matrix\n */\nMatrix.from1DArray = function from1DArray(newRows, newColumns, newData) {\n    var length, data, i = 0;\n\n    length = newRows * newColumns;\n    if (length !== newData.length)\n        throw new RangeError('Data length does not match given dimensions');\n\n    data = new Array(newRows);\n    for (; i < newRows; i++) {\n        data[i] = newData.slice(i * newColumns, (i + 1) * newColumns);\n    }\n    return new Matrix(data);\n};\n\n/**\n * Creates a row vector, a matrix with only one row.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.rowVector = function rowVector(newData) {\n    return new Matrix([newData]);\n};\n\n/**\n * Creates a column vector, a matrix with only one column.\n * @param {Array} newData - A 1D array containing data for the vector\n * @returns {Matrix} - The new matrix\n */\nMatrix.columnVector = function columnVector(newData) {\n    var l = newData.length, vector = new Array(l);\n    for (var i = 0; i < l; i++)\n        vector[i] = [newData[i]];\n    return new Matrix(vector);\n};\n\n/**\n * Creates an empty matrix with the given dimensions. Values will be undefined. Same as using new Matrix(rows, columns).\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.empty = function empty(rows, columns) {\n    return new Matrix(rows, columns);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to zero.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.zeros = function zeros(rows, columns) {\n    return Matrix.empty(rows, columns).fill(0);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be set to one.\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.ones = function ones(rows, columns) {\n    return Matrix.empty(rows, columns).fill(1);\n};\n\n/**\n * Creates a matrix with the given dimensions. Values will be randomly set using Math.random().\n * @param {number} rows - Number of rows\n * @param {number} columns - Number of columns\n * @returns {Matrix} The new matrix\n */\nMatrix.rand = function rand(rows, columns) {\n    var matrix = Matrix.empty(rows, columns);\n    for (var i = 0, ii = matrix.rows; i < ii; i++) {\n        for (var j = 0, jj = matrix.columns; j < jj; j++) {\n            matrix[i][j] = Math.random();\n        }\n    }\n    return matrix;\n};\n\n/**\n * Creates an identity matrix with the given dimension. Values of the diagonal will be 1 and other will be 0.\n * @param {number} n - Number of rows and columns\n * @returns {Matrix} - The new matrix\n */\nMatrix.eye = function eye(n) {\n    var matrix = Matrix.zeros(n, n), l = matrix.rows;\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = 1;\n    }\n    return matrix;\n};\n\n/**\n * Creates a diagonal matrix based on the given array.\n * @param {Array} data - Array containing the data for the diagonal\n * @returns {Matrix} - The new matrix\n */\nMatrix.diag = function diag(data) {\n    var l = data.length, matrix = Matrix.zeros(l, l);\n    for (var i = 0; i < l; i++) {\n        matrix[i][i] = data[i];\n    }\n    return matrix;\n};\n\n/**\n * Creates an array of indices between two values\n * @param {number} from\n * @param {number} to\n * @returns {Array}\n */\nMatrix.indices = function indices(from, to) {\n    var vector = new Array(to - from);\n    for (var i = 0; i < vector.length; i++)\n        vector[i] = from++;\n    return vector;\n};\n\n// TODO DOC\nMatrix.stack = function stack(arg1) {\n    var i, j, k;\n    if (Matrix.isMatrix(arg1)) {\n        var rows = 0,\n            cols = 0;\n        for (i = 0; i < arguments.length; i++) {\n            rows += arguments[i].rows;\n            if (arguments[i].columns > cols)\n                cols = arguments[i].columns;\n        }\n\n        var r = Matrix.zeros(rows, cols);\n        var c = 0;\n        for (i = 0; i < arguments.length; i++) {\n            var current = arguments[i];\n            for (j = 0; j < current.rows; j++) {\n                for (k = 0; k < current.columns; k++)\n                    r[c][k] = current[j][k];\n                c++;\n            }\n        }\n        return r;\n    }\n    else if (Array.isArray(arg1)) {\n        var matrix = Matrix.empty(arguments.length, arg1.length);\n        for (i = 0; i < arguments.length; i++)\n            matrix.setRow(i, arguments[i]);\n        return matrix;\n    }\n};\n\n// TODO DOC\nMatrix.expand = function expand(base, count) {\n    var expansion = [];\n    for (var i = 0; i < count.length; i++)\n        for (var j = 0; j < count[i]; j++)\n            expansion.push(base[i]);\n    return new Matrix(expansion);\n};\n\n/**\n * Check that the provided value is a Matrix and tries to instantiate one if not\n * @param value - The value to check\n * @returns {Matrix}\n * @throws {TypeError}\n */\nMatrix.checkMatrix = function checkMatrix(value) {\n    if (!value) {\n        throw new TypeError('Argument has to be a matrix');\n    }\n    if (value.klass !== 'Matrix') {\n        value = new Matrix(value);\n    }\n    return value;\n};\n\n/**\n * Returns true if the argument is a Matrix, false otherwise\n * @param value - The value to check\n * @returns {boolean}\n */\nMatrix.isMatrix = function isMatrix(value) {\n    return value ? value.klass === 'Matrix' : false;\n};\n\n/**\n * @property {string} - The name of this class.\n */\nObject.defineProperty(Matrix.prototype, 'klass', {\n    get: function klass() {\n        return 'Matrix';\n    }\n});\n\n/**\n * @property {number} - The number of elements in the matrix.\n */\nObject.defineProperty(Matrix.prototype, 'size', {\n    get: function size() {\n        return this.rows * this.columns;\n    }\n});\n\n/**\n * @private\n * Internal check that a row index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkRowIndex = function checkRowIndex(index) {\n    if (index < 0 || index > this.rows - 1)\n        throw new RangeError('Row index out of range.');\n};\n\n/**\n * @private\n * Internal check that a column index is not out of bounds\n * @param {number} index\n */\nMatrix.prototype.checkColumnIndex = function checkColumnIndex(index) {\n    if (index < 0 || index > this.columns - 1)\n        throw new RangeError('Column index out of range.');\n};\n\n/**\n * @private\n * Internal check that two matrices have the same dimensions\n * @param {Matrix} otherMatrix\n */\nMatrix.prototype.checkDimensions = function checkDimensions(otherMatrix) {\n    if ((this.rows !== otherMatrix.rows) || (this.columns !== otherMatrix.columns))\n        throw new RangeError('Matrices dimensions must be equal.');\n};\n\n/**\n * Applies a callback for each element of the matrix. The function is called in the matrix (this) context.\n * @param {function} callback - Function that will be called with two parameters : i (row) and j (column)\n * @returns {Matrix} this\n */\nMatrix.prototype.apply = function apply(callback) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            callback.call(this, i, j);\n        }\n    }\n    return this;\n};\n\n/**\n * Creates an exact and independent copy of the matrix\n * @returns {Matrix}\n */\nMatrix.prototype.clone = function clone() {\n    return new Matrix(this.to2DArray());\n};\n\n/**\n * Returns a new 1D array filled row by row with the matrix values\n * @returns {Array}\n */\nMatrix.prototype.to1DArray = function to1DArray() {\n    return Aconcat.apply([], this);\n};\n\n/**\n * Returns a 2D array containing a copy of the data\n * @returns {Array}\n */\nMatrix.prototype.to2DArray = function to2DArray() {\n    var l = this.rows, copy = new Array(l);\n    for (var i = 0; i < l; i++) {\n        copy[i] = slice(this[i]);\n    }\n    return copy;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row\n */\nMatrix.prototype.isRowVector = function isRowVector() {\n    return this.rows === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one column\n */\nMatrix.prototype.isColumnVector = function isColumnVector() {\n    return this.columns === 1;\n};\n\n/**\n * @returns {boolean} true if the matrix has one row or one column\n */\nMatrix.prototype.isVector = function isVector() {\n    return (this.rows === 1) || (this.columns === 1);\n};\n\n/**\n * @returns {boolean} true if the matrix has the same number of rows and columns\n */\nMatrix.prototype.isSquare = function isSquare() {\n    return this.rows === this.columns;\n};\n\n/**\n * @returns {boolean} true if the matrix is square and has the same values on both sides of the diagonal\n */\nMatrix.prototype.isSymmetric = function isSymmetric() {\n    if (this.isSquare()) {\n        var l = this.rows;\n        for (var i = 0; i < l; i++) {\n            for (var j = 0; j <= i; j++) {\n                if (this[i][j] !== this[j][i]) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    return false;\n};\n\n/**\n * Sets a given element of the matrix. mat.set(3,4,1) is equivalent to mat[3][4]=1\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @param {number} value - The new value for the element\n * @returns {Matrix} this\n */\nMatrix.prototype.set = function set(rowIndex, columnIndex, value) {\n    this[rowIndex][columnIndex] = value;\n    return this;\n};\n\n/**\n * Returns the given element of the matrix. mat.get(3,4) is equivalent to matrix[3][4]\n * @param {number} rowIndex - Index of the row\n * @param {number} columnIndex - Index of the column\n * @returns {number}\n */\nMatrix.prototype.get = function get(rowIndex, columnIndex) {\n    return this[rowIndex][columnIndex];\n};\n\n/**\n * Fills the matrix with a given value. All elements will be set to this value.\n * @param {number} value - New value\n * @returns {Matrix} this\n */\nMatrix.prototype.fill = function fill(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = value;\n        }\n    }\n    return this;\n};\n\n/**\n * Negates the matrix. All elements will be multiplied by (-1)\n * @returns {Matrix} this\n */\nMatrix.prototype.neg = function neg() {\n    return this.mulS(-1);\n};\n\n/**\n * Adds a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number')\n        return this.addS(value);\n    value = Matrix.checkMatrix(value);\n        return this.addM(value);\n};\n\n/**\n * Adds a scalar to each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.addS = function addS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += value;\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the value of each element of matrix to the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.addM = function addM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number')\n        return this.subS(value);\n    value = Matrix.checkMatrix(value);\n        return this.subM(value);\n};\n\n/**\n * Subtracts a scalar from each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.subS = function subS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the value of each element of matrix from the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.subM = function subM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number')\n        return this.mulS(value);\n    value = Matrix.checkMatrix(value);\n        return this.mulM(value);\n};\n\n/**\n * Multiplies a scalar with each element of the matrix\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulS = function mulS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the value of each element of matrix with the corresponding element of this\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.mulM = function mulM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides by a scalar or values from another matrix (in place)\n * @param {number|Matrix} value\n * @returns {Matrix} this\n */\nMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number')\n        return this.divS(value);\n    value = Matrix.checkMatrix(value);\n        return this.divM(value);\n};\n\n/**\n * Divides each element of the matrix by a scalar\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.divS = function divS(value) {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= value;\n        }\n    }\n    return this;\n};\n\n/**\n * Divides each element of this by the corresponding element of matrix\n * @param {Matrix} matrix\n * @returns {Matrix} this\n */\nMatrix.prototype.divM = function divM(matrix) {\n    this.checkDimensions(matrix);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= matrix[i][j];\n        }\n    }\n    return this;\n};\n\n/**\n * Returns a new array from the given row index\n * @param {number} index - Row index\n * @returns {Array}\n */\nMatrix.prototype.getRow = function getRow(index) {\n    this.checkRowIndex(index);\n    return slice(this[index]);\n};\n\n/**\n * Returns a new row vector from the given row index\n * @param {number} index - Row index\n * @returns {Matrix}\n */\nMatrix.prototype.getRowVector = function getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n};\n\n/**\n * Sets a row at the given index\n * @param {number} index - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setRow = function setRow(index, array) {\n    this.checkRowIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    this[index] = slice(array);\n    return this;\n};\n\n/**\n * Removes a row from the given index\n * @param {number} index - Row index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeRow = function removeRow(index) {\n    this.checkRowIndex(index);\n    if (this.rows === 1)\n        throw new RangeError('A matrix cannot have less than one row');\n    Asplice.call(this, index, 1);\n    this.rows -= 1;\n    return this;\n};\n\n/**\n * Adds a row at the given index\n * @param {number} [index = this.rows] - Row index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRow = function addRow(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.rows;\n    }\n    if (index < 0 || index > this.rows)\n        throw new RangeError('Row index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    if (array.length !== this.columns)\n        throw new RangeError('Invalid row size');\n    Asplice.call(this, index, 0, slice(array));\n    this.rows += 1;\n    return this;\n};\n\n/**\n * Swaps two rows\n * @param {number} row1 - First row index\n * @param {number} row2 - Second row index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapRows = function swapRows(row1, row2) {\n    this.checkRowIndex(row1);\n    this.checkRowIndex(row2);\n    var temp = this[row1];\n    this[row1] = this[row2];\n    this[row2] = temp;\n    return this;\n};\n\n/**\n * Returns a new array from the given column index\n * @param {number} index - Column index\n * @returns {Array}\n */\nMatrix.prototype.getColumn = function getColumn(index) {\n    this.checkColumnIndex(index);\n    var l = this.rows, column = new Array(l);\n    for (var i = 0; i < l; i++) {\n        column[i] = this[i][index];\n    }\n    return column;\n};\n\n/**\n * Returns a new column vector from the given column index\n * @param {number} index - Column index\n * @returns {Matrix}\n */\nMatrix.prototype.getColumnVector = function getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n};\n\n/**\n * Sets a column at the given index\n * @param {number} index - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.setColumn = function setColumn(index, array) {\n    this.checkColumnIndex(index);\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i][index] = array[i];\n    }\n    return this;\n};\n\n/**\n * Removes a column from the given index\n * @param {number} index - Column index\n * @returns {Matrix} this\n */\nMatrix.prototype.removeColumn = function removeColumn(index) {\n    this.checkColumnIndex(index);\n    if (this.columns === 1)\n        throw new RangeError('A matrix cannot have less than one column');\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].splice(index, 1);\n    }\n    this.columns -= 1;\n    return this;\n};\n\n/**\n * Adds a column at the given index\n * @param {number} [index = this.columns] - Column index\n * @param {Array|Matrix} array - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumn = function addColumn(index, array) {\n    if (typeof array === 'undefined') {\n        array = index;\n        index = this.columns;\n    }\n    if (index < 0 || index > this.columns)\n        throw new RangeError('Column index out of range.');\n    if (Matrix.isMatrix(array)) array = array.to1DArray();\n    var l = this.rows;\n    if (array.length !== l)\n        throw new RangeError('Invalid column size');\n    for (var i = 0; i < l; i++) {\n        this[i].splice(index, 0, array[i]);\n    }\n    this.columns += 1;\n    return this;\n};\n\n/**\n * Swaps two columns\n * @param {number} column1 - First column index\n * @param {number} column2 - Second column index\n * @returns {Matrix} this\n */\nMatrix.prototype.swapColumns = function swapColumns(column1, column2) {\n    this.checkRowIndex(column1);\n    this.checkRowIndex(column2);\n    var l = this.rows, temp, row;\n    for (var i = 0; i < l; i++) {\n        row = this[i];\n        temp = row[column1];\n        row[column1] = row[column2];\n        row[column2] = temp;\n    }\n    return this;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkRowVector = function checkRowVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.columns)\n        throw new RangeError('vector size must be the same as the number of columns');\n    return vector;\n};\n\n/**\n * @private\n * Internal check that the provided vector is an array with the right length\n * @param {Array|Matrix} vector\n * @returns {Array}\n * @throws {RangeError}\n */\nMatrix.prototype.checkColumnVector = function checkColumnVector(vector) {\n    if (Matrix.isMatrix(vector))\n        vector = vector.to1DArray();\n    if (vector.length !== this.rows)\n        throw new RangeError('vector size must be the same as the number of rows');\n    return vector;\n};\n\n/**\n * Adds the values of a vector to each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addRowVector = function addRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subRowVector = function subRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each row\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRowVector = function mulRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each row by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divRowVector = function divRowVector(vector) {\n    vector = this.checkRowVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[j];\n        }\n    }\n    return this;\n};\n\n/**\n * Adds the values of a vector to each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.addColumnVector = function addColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] += vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Subtracts the values of a vector from each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.subColumnVector = function subColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] -= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a vector with each column\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumnVector = function mulColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] *= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Divides the values of each column by those of a vector\n * @param {Array|Matrix} vector - Array or vector\n * @returns {Matrix} this\n */\nMatrix.prototype.divColumnVector = function divColumnVector(vector) {\n    vector = this.checkColumnVector(vector);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] /= vector[i];\n        }\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a row with a scalar\n * @param {number} index - Row index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulRow = function mulRow(index, value) {\n    this.checkRowIndex(index);\n    var i = 0, l = this.columns;\n    for (; i < l; i++) {\n        this[index][i] *= value;\n    }\n    return this;\n};\n\n/**\n * Multiplies the values of a column with a scalar\n * @param {number} index - Column index\n * @param {number} value\n * @returns {Matrix} this\n */\nMatrix.prototype.mulColumn = function mulColumn(index, value) {\n    this.checkColumnIndex(index);\n    var i = 0, l = this.rows;\n    for (; i < l; i++) {\n        this[i][index] *= value;\n    }\n};\n\n/**\n * A matrix index\n * @typedef {Object} MatrixIndex\n * @property {number} row\n * @property {number} column\n */\n\n/**\n * Returns the maximum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.max = function max() {\n    var v = -Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxIndex = function maxIndex() {\n    var v = -Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] > v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of the matrix\n * @returns {number}\n */\nMatrix.prototype.min = function min() {\n    var v = Infinity;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n            }\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minIndex = function minIndex() {\n    var v = Infinity;\n    var idx = {};\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            if (this[i][j] < v) {\n                v = this[i][j];\n                idx.row = i;\n                idx.column = j;\n            }\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.maxRow = function maxRow(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxRowIndex = function maxRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = -Infinity;\n    var idx = {\n            row: index\n        };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] > v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one row\n * @param {number} index - Row index\n * @returns {number}\n */\nMatrix.prototype.minRow = function minRow(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one row\n * @param {number} index - Row index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minRowIndex = function minRowIndex(index) {\n    this.checkRowIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: index,\n        column: 0\n    };\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        if (this[index][i] < v) {\n            v = this[index][i];\n            idx.column = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the maximum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.maxColumn = function maxColumn(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the maximum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.maxColumnIndex = function maxColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = -Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] > v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns the minimum value of one column\n * @param {number} index - Column index\n * @returns {number}\n */\nMatrix.prototype.minColumn = function minColumn(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the index of the minimum value of one column\n * @param {number} index - Column index\n * @returns {MatrixIndex}\n */\nMatrix.prototype.minColumnIndex = function minColumnIndex(index) {\n    this.checkColumnIndex(index);\n    var v = Infinity;\n    var idx = {\n        row: 0,\n        column: index\n    };\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        if (this[i][index] < v) {\n            v = this[i][index];\n            idx.row = i;\n        }\n    }\n    return idx;\n};\n\n/**\n * Returns an array containing the diagonal values of the matrix\n * @returns {Array}\n */\nMatrix.prototype.diag = function diag() {\n    if (!this.isSquare())\n        throw new TypeError('Only square matrices have a diagonal.');\n    var diag = new Array(this.rows);\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        diag[i] = this[i][i];\n    }\n    return diag;\n};\n\n/**\n * Returns the sum of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.sum = function sum() {\n    var v = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            v += this[i][j];\n        }\n    }\n    return v;\n};\n\n/**\n * Returns the mean of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.mean = function mean() {\n    return this.sum() / this.size;\n};\n\n/**\n * Returns the product of all elements of the matrix\n * @returns {number}\n */\nMatrix.prototype.prod = function prod() {\n    var prod = 1;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            prod *= this[i][j];\n        }\n    }\n    return prod;\n};\n\n/**\n * Computes the cumulative sum of the matrix elements (in place, row by row)\n * @returns {Matrix} this\n */\nMatrix.prototype.cumulativeSum = function cumulativeSum() {\n    var sum = 0;\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            sum += this[i][j];\n            this[i][j] = sum;\n        }\n    }\n    return this;\n};\n\n/**\n * Computes the dot (scalar) product between the matrix and another\n * @param {Matrix} other vector\n * @returns {number}\n */\nMatrix.prototype.dot = function dot(other) {\n    if (this.size !== other.size)\n        throw new RangeError('vectors do not have the same size');\n    var vector1 = this.to1DArray();\n    var vector2 = other.to1DArray();\n    var dot = 0, l = vector1.length;\n    for (var i = 0; i < l; i++) {\n        dot += vector1[i] * vector2[i];\n    }\n    return dot;\n};\n\n/**\n * Returns the matrix product between this and other\n * @returns {Matrix}\n */\nMatrix.prototype.mmul = function mmul(other) {\n    if (!Matrix.isMatrix(other))\n        throw new TypeError('parameter \"other\" must be a matrix');\n    if (this.columns !== other.rows)\n        console.warn('Number of columns of left matrix are not equal to number of rows of right matrix.');\n\n    var m = this.rows, n = this.columns, p = other.columns;\n    var result = new Matrix(m, p);\n\n    var Bcolj = new Array(n);\n    var i, j, k;\n    for (j = 0; j < p; j++) {\n        for (k = 0; k < n; k++)\n            Bcolj[k] = other[k][j];\n\n        for (i = 0; i < m; i++) {\n            var Arowi = this[i];\n\n            var s = 0;\n            for (k = 0; k < n; k++)\n                s += Arowi[k] * Bcolj[k];\n\n            result[i][j] = s;\n        }\n    }\n    return result;\n};\n\n/**\n * Sorts the rows (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortRows = function sortRows(compareFunction) {\n    for (var i = 0, ii = this.rows; i < ii; i++) {\n        this[i].sort(compareFunction);\n    }\n    return this;\n};\n\n/**\n * Sorts the columns (in place)\n * @param {function} compareFunction - usual Array.prototype.sort comparison function\n * @returns {Matrix} this\n */\nMatrix.prototype.sortColumns = function sortColumns(compareFunction) {\n    for (var i = 0, ii = this.columns; i < ii; i++) {\n        this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n};\n\n/**\n * Transposes the matrix and returns a new one containing the result\n * @returns {Matrix}\n */\nMatrix.prototype.transpose = function transpose() {\n    var result = new Matrix(this.columns, this.rows);\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            result[j][i] = this[i][j];\n        }\n    }\n    return result;\n};\n\n/**\n * Returns a subset of the matrix\n * @param {number} startRow - First row index\n * @param {number} endRow - Last row index\n * @param {number} startColumn - First column index\n * @param {number} endColumn - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrix = function subMatrix(startRow, endRow, startColumn, endColumn) {\n    if ((startRow > endRow) || (startColumn > endColumn) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range');\n    var newMatrix = new Matrix(endRow - startRow + 1, endColumn - startColumn + 1);\n    for (var i = startRow; i <= endRow; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            newMatrix[i - startRow][j - startColumn] = this[i][j];\n        }\n    }\n    return newMatrix;\n};\n\n/**\n * Returns a subset of the matrix based on an array of row indices\n * @param {Array} indices - Array containing the row indices\n * @param {number} [startColumn = 0] - First column index\n * @param {number} [endColumn = this.columns-1] - Last column index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixRow = function subMatrixRow(indices, startColumn, endColumn) {\n    if (typeof startColumn === 'undefined') {\n        startColumn = 0;\n        endColumn = this.columns - 1;\n    } else if (typeof endColumn === 'undefined') {\n        endColumn = this.columns - 1;\n    }\n    if ((startColumn > endColumn) || (startColumn < 0) || (startColumn >= this.columns) || (endColumn < 0) || (endColumn >= this.columns))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, rows = this.rows,\n        X = new Matrix(l, endColumn - startColumn + 1);\n    for (var i = 0; i < l; i++) {\n        for (var j = startColumn; j <= endColumn; j++) {\n            if ((indices[i] < 0) || (indices[i] >= rows))\n                throw new RangeError('Argument out of range.');\n            X[i][j - startColumn] = this[indices[i]][j];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns a subset of the matrix based on an array of column indices\n * @param {Array} indices - Array containing the column indices\n * @param {number} [startRow = 0] - First row index\n * @param {number} [endRow = this.rows-1] - Last row index\n * @returns {Matrix}\n */\nMatrix.prototype.subMatrixColumn = function subMatrixColumn(indices, startRow, endRow) {\n    if (typeof startRow === 'undefined') {\n        startRow = 0;\n        endRow = this.rows - 1;\n    } else if (typeof endRow === 'undefined') {\n        endRow = this.rows - 1;\n    }\n    if ((startRow > endRow) || (startRow < 0) || (startRow >= this.rows) || (endRow < 0) || (endRow >= this.rows))\n        throw new RangeError('Argument out of range.');\n    var l = indices.length, columns = this.columns,\n        X = new Matrix(endRow - startRow + 1, l);\n    for (var i = 0; i < l; i++) {\n        for (var j = startRow; j <= endRow; j++) {\n            if ((indices[i] < 0) || (indices[i] >= columns))\n                throw new RangeError('Argument out of range.');\n            X[j - startRow][i] = this[j][indices[i]];\n        }\n    }\n    return X;\n};\n\n/**\n * Returns the trace of the matrix (sum of the diagonal elements)\n * @returns {number}\n */\nMatrix.prototype.trace = function trace() {\n    if (!this.isSquare())\n        throw new TypeError('The matrix is not square');\n    var trace = 0, i = 0, l = this.rows;\n    for (; i < l; i++) {\n        trace += this[i][i];\n    }\n    return trace;\n};\n\n/**\n * Sets each element of the matrix to its absolute value\n * @returns {Matrix} this\n */\nMatrix.prototype.abs = function abs() {\n    var ii = this.rows, jj = this.columns;\n    for (var i = 0; i < ii; i++) {\n        for (var j = 0; j < jj; j++) {\n            this[i][j] = Math.abs(this[i][j]);\n        }\n    }\n};\n\nmodule.exports = Matrix;\n\n},{}],14:[function(require,module,exports){\n'use strict';\n\nvar LM = require('ml-curve-fitting');\nvar math = LM.Matrix.algebra;\nvar Matrix = require('ml-matrix');\n\n/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfLorentzians(t,p,c){\n    var nL = p.length/3,factor,i, j,p2, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        p2 = Math.pow(p[i+nL*2][0]/2,2);\n        factor = p[i+nL][0]*p2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=factor/(Math.pow(t[j][0]-p[i][0],2)+p2);\n        }\n    }\n    return result;\n}\n\n/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction sumOfGaussians(t,p,c){\n    var nL = p.length/3,factor,i, j, cols = t.rows;\n    var result = Matrix.zeros(t.length,1);\n\n    for(i=0;i<nL;i++){\n        factor = p[i+nL*2][0]*p[i+nL*2][0]/2;\n        for(j=0;j<cols;j++){\n            result[j][0]+=p[i+nL][0]*Math.exp(-(t[i][0]-p[i][0])*(t[i][0]-p[i][0])/factor);\n        }\n    }\n    return result;\n}\n/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleLorentzian(t,p,c){\n    var factor = p[1][0]*Math.pow(p[2][0]/2,2);\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=factor/(Math.pow(t[i][0]-p[0][0],2)+Math.pow(p[2][0]/2,2));\n    }\n    return result;\n}\n\n/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nfunction singleGaussian(t,p,c){\n    var factor2 = p[2][0]*p[2][0]/2;\n    var rows = t.rows;\n    var result = new Matrix(t.rows, t.columns);\n    for(var i=0;i<rows;i++){\n        result[i][0]=p[1][0]*Math.exp(-(t[i][0]-p[0][0])*(t[i][0]-p[0][0])/factor2);\n    }\n    return result;\n}\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleLorentzian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];\n    var dt = Math.abs(t[0][0]-t[1][0]);// optional vector of constants\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n\n    var p_fit = LM.optimize(singleLorentzian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n\n\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n\n}\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nfunction optimizeSingleGaussian(xy, peak, opts) {\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / Math.sqrt(y_data.dot(y_data))];\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    //var opts = [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ];\n    var consts = [ ];                         // optional vector of constants\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    var dx = new Matrix([[-dt/10000],[-1e-3],[-dt/10000]]);//-Math.abs(t[0][0]-t[1][0])/100;\n\n    var dx = new Matrix([[-Math.abs(t[0][0]-t[1][0])/1000],[-1e-3],[-peak.width/1000]]);\n    var p_init = new Matrix([[peak.x],[1],[peak.width]]);\n    var p_min = new Matrix([[peak.x-dt],[0.75],[peak.width/4]]);\n    var p_max = new Matrix([[peak.x+dt],[1.25],[peak.width*4]]);\n    //var p_min = new Matrix([[peak.x-peak.width/4],[0.75],[peak.width/3]]);\n    //var p_max = new Matrix([[peak.x+peak.width/4],[1.25],[peak.width*3]]);\n\n    var p_fit = LM.optimize(singleGaussian,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    return [p_fit[0],[p_fit[1][0]*maxY],p_fit[2]];\n}\n\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeLorentzianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.columns, i;\n\n    var weight = [nbPoints / math.sqrt(y_data.dot(y_data))];\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        1 ]);\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = 1;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;//-group[i].width/4;\n        p_min[i+nL][0] = 0;\n        p_min[i+2*nL][0] = group[i].width/4;\n\n        p_max[i][0] = group[i].x+dt;//+group[i].width/4;\n        p_max[i+nL][0] = 1.5;\n        p_max[i+2*nL][0] = group[i].width*4;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n\n    var dx = -Math.abs(t[0][0]-t[1][0])/10000;\n    var p_fit = LM.optimize(sumOfLorentzians, p_init, t, y_data, weight, dx, p_min, p_max, consts, opts);\n    p_fit=p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nfunction optimizeGaussianSum(xy, group, opts){\n    var xy2 = parseData(xy);\n    var t = xy2[0];\n    var y_data = xy2[1];\n    var maxY = xy2[2];\n    var nbPoints = t.rows,i;\n\n    var weight = new Matrix(nbPoints,1);//[nbPoints / math.sqrt(y_data.dot(y_data))];\n    var k = nbPoints / math.sqrt(y_data.dot(y_data));\n    for(i=0;i<nbPoints;i++){\n        weight[i][0]=k;///(y_data[i][0]);\n        //weight[i][0]=k*(2-y_data[i][0]);\n    }\n\n    var opts=Object.create(opts || [  3,    100, 1e-3, 1e-3, 1e-3, 1e-2, 1e-2,    11,    9,        2 ]);\n    //var opts=[  3,    100, 1e-5, 1e-6, 1e-6, 1e-6, 1e-6,    11,    9,        1 ];\n    var consts = [ ];// optional vector of constants\n\n    var nL = group.length;\n    var p_init = new Matrix(nL*3,1);\n    var p_min =  new Matrix(nL*3,1);\n    var p_max =  new Matrix(nL*3,1);\n    var dx = new Matrix(nL*3,1);\n    var dt = Math.abs(t[0][0]-t[1][0]);\n    for( i=0;i<nL;i++){\n        p_init[i][0] = group[i].x;\n        p_init[i+nL][0] = group[i].y/maxY;\n        p_init[i+2*nL][0] = group[i].width;\n\n        p_min[i][0] = group[i].x-dt;\n        p_min[i+nL][0] = group[i].y*0.8/maxY;\n        p_min[i+2*nL][0] = group[i].width/2;\n\n        p_max[i][0] = group[i].x+dt;\n        p_max[i+nL][0] = group[i].y*1.2/maxY;\n        p_max[i+2*nL][0] = group[i].width*2;\n\n        dx[i][0] = -dt/1000;\n        dx[i+nL][0] = -1e-3;\n        dx[i+2*nL][0] = -dt/1000;\n    }\n    //console.log(t);\n    var p_fit = LM.optimize(sumOfLorentzians,p_init,t,y_data,weight,dx,p_min,p_max,consts,opts);\n    p_fit = p_fit.p;\n    //Put back the result in the correct format\n    var result = new Array(nL);\n    for( i=0;i<nL;i++){\n        result[i]=[p_fit[i],[p_fit[i+nL][0]*maxY],p_fit[i+2*nL]];\n    }\n\n    return result;\n\n}\n/**\n *\n * Converts the given input to the required x, y column matrices. y data is normalized to max(y)=1\n * @param xy\n * @returns {*[]}\n */\nfunction parseData(xy){\n    var nbSeries = xy.length;\n    var t = null;\n    var y_data = null, x,y;\n    var maxY = 0, i,j;\n\n    if(nbSeries==2){\n        //Looks like row wise matrix [x,y]\n        var nbPoints = xy[0].length;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else{\n            t = new Matrix(nbPoints,1);\n            y_data = new Matrix(nbPoints,1);\n            x = xy[0];\n            y = xy[1];\n            if(typeof x[0] === \"number\"){\n                for(i=0;i<nbPoints;i++){\n                    t[i][0]=x[i];\n                    y_data[i][0]=y[i];\n                    if(y[i]>maxY)\n                        maxY = y[i];\n                }\n            }\n            else{\n                //It is a colum matrix\n                if(typeof x[0] === \"object\"){\n                    for(i=0;i<nbPoints;i++){\n                        t[i][0]=x[i][0];\n                        y_data[i][0]=y[i][0];\n                        if(y[i][0]>maxY)\n                            maxY = y[i][0];\n                    }\n                }\n\n            }\n\n        }\n    }\n    else{\n        //Looks like a column wise matrix [[x],[y]]\n        var nbPoints = nbSeries;\n        if(nbPoints<3)\n            throw new SizeException(nbPoints);\n        else {\n            t = new Matrix(nbPoints, 1);\n            y_data = new Matrix(nbPoints, 1);\n            for (i = 0; i < nbPoints; i++) {\n                t[i][0] = xy[i][0];\n                y_data[i][0] = xy[i][1];\n                if(y_data[i][0]>maxY)\n                    maxY = y_data[i][0];\n            }\n        }\n    }\n    for (i = 0; i < nbPoints; i++) {\n        y_data[i][0]/=maxY;\n    }\n    return [t,y_data,maxY];\n}\n\nfunction sizeException(nbPoints) {\n    return new RangeError(\"Not enough points to perform the optimization: \"+nbPoints +\"< 3\");\n}\n\nmodule.exports.optimizeSingleLorentzian = optimizeSingleLorentzian;\nmodule.exports.optimizeLorentzianSum = optimizeLorentzianSum;\nmodule.exports.optimizeSingleGaussian = optimizeSingleGaussian;\nmodule.exports.optimizeGaussianSum = optimizeGaussianSum;\nmodule.exports.singleGaussian = singleGaussian;\nmodule.exports.singleLorentzian = singleLorentzian;\n},{\"ml-curve-fitting\":4,\"ml-matrix\":12}],15:[function(require,module,exports){\n\nvar optimizePeaks = require(\"../src/optimize\");\n\nfunction gsd(x, y, options){\n    var options=Object.create(options || {});\n    if (options.minMaxRatio===undefined) options.minMaxRatio=0.00025;\n    if (options.broadRatio===undefined) options.broadRatio=0.00;\n    if (options.noiseLevel===undefined) options.noiseLevel=0;\n    if (options.maxCriteria===undefined) options.maxCriteria=true;\n    if (options.smoothY===undefined) options.smoothY=true;\n\n\n    if (options.noiseLevel>0) {\n        y=[].concat(y);\n        for (var i=0; i<y.length; i++){\n            if(Math.abs(y[i])<options.noiseLevel) {\n                y[i]=0;\n            }\n        }\n    }\n\n    // fill convolution frequency axis\n    var X = [];//x[2:(x.length-2)];\n\n    // fill Savitzky-Golay polynomes\n    var size= x.length-4;\n    var Y = new Array(size);\n    var dY = new Array(size);\n    var ddY = new Array(size);\n    //var dX = new Array(size);\n    var dx = x[1]-x[0];\n\n    for (var j = 2; j < size+2; j++) {\n        dx = x[j]-x[j-1];\n        if(options.smoothY)\n            Y[j-2]=(1/35.0)*(-3*y[j-2] + 12*y[j-1] + 17*y[j] + 12*y[j+1] - 3*y[j+2]);\n        else\n            Y[j-2]=y[j];\n        X[j-2]=x[j];\n        dY[j-2]=(1/(12*dx))*(y[j-2] - 8*y[j-1] + 8*y[j+1] - y[j+2]);\n        ddY[j-2]=(1/(7*dx*dx))*(2*y[j-2] - y[j-1] - 2*y[j] - y[j+1] + 2*y[j+2]);\n    }\n\n    var maxDdy=0;\n    var maxY = 0;\n    //console.log(Y.length);\n    for (var i = 0; i < Y.length ; i++){\n        if(Math.abs(ddY[i])>maxDdy){\n            maxDdy = Math.abs(ddY[i]);\n        }\n        if(Math.abs(Y[i])>maxY){\n            maxY = Math.abs(Y[i]);\n        }\n    }\n    //console.log(maxY+\"x\"+maxDy+\"x\"+maxDdy);\n    var minddY = [];\n    var intervals = [];\n    var lastMax = null;\n    var lastMin = null;\n    var broadMask = new Array();\n    //console.log(dx);\n    //By the intermediate value theorem We cannot find 2 consecutive maxima or minima\n    for (var i = 1; i < Y.length -1 ; i++){\n        //console.log(dY[i]);\n        if ((dY[i] < dY[i-1]) && (dY[i] <= dY[i+1])||\n            (dY[i] <= dY[i-1]) && (dY[i] < dY[i+1])) {\n            lastMin = X[i];\n            //console.log(\"min \"+lastMin);\n            if(dx>0&&lastMax!=null){\n                intervals.push( [lastMax , lastMin] );\n            }\n        }\n\n        if ((dY[i] >= dY[i-1]) && (dY[i] > dY[i+1])||\n            (dY[i] > dY[i-1]) && (dY[i] >= dY[i+1])) {\n            lastMax = X[i];\n            //console.log(\"max \"+lastMax);\n            if(dx<0&&lastMin!=null){\n                intervals.push( [lastMax , lastMin] );\n            }\n        }\n\n        if(options.maxCriteria){\n            if ((ddY[i] < ddY[i-1]) && (ddY[i] < ddY[i+1])) {\n                minddY.push( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n                if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                    broadMask.push(false);\n                }\n                else{\n                    broadMask.push(true);\n                }\n            }\n        }\n        else{\n            if ((ddY[i] > ddY[i-1]) && (ddY[i] > ddY[i+1])) {\n                minddY.push( [X[i], Y[i], i] );  // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n                if(Math.abs(ddY[i])>options.broadRatio*maxDdy){ // TODO should this be a parameter =\n                    broadMask.push(false);\n                }\n                else{\n                    broadMask.push(true);\n                }\n            }\n        }\n\n    }\n    realTopDetection(minddY,X,Y);\n    //console.log(intervals);\n    //console.log(minddY);\n    var signals = [];\n\n    for (var j = 0; j < minddY.length; j++){\n        var f = minddY[j];\n        var frequency = f[0];\n        var possible = [];\n        for (var k=0; k<intervals.length; k++){\n            var i = intervals[k];\n            if(Math.abs(frequency-(i[0]+i[1])/2)<Math.abs(i[0]-i[1])/2)\n                possible.push(i);\n        }\n        //console.log(\"possible \"+possible.length);\n        if (possible.length > 0)\n            if (possible.length == 1)\n            {\n                var inter = possible[0];\n                var linewidth = Math.abs(inter[1] - inter[0]);\n                var height = f[1];\n                //console.log(height);\n                if (Math.abs(height) > options.minMaxRatio*maxY) {\n                    signals.push({\n                        x: frequency,\n                        y: height,\n                        width: linewidth//*widthCorrection\n                    })\n                }\n            }\n            else\n            {\n                //TODO: nested peaks\n                // console.log(\"Nested \"+possible);\n            }\n    }\n    if(options.broadRatio>0){\n        var broadLines=[[Number.MAX_VALUE,0,0]];\n        //Optimize the possible broad lines\n        var max=0, maxI=0,count=0;\n        var candidates = [],broadLinesS=[];\n        var isPartOf = false;\n\n        for(var i=broadLines.length-1;i>0;i--){\n            //console.log(broadLines[i][0]+\" \"+rangeX+\" \"+Math.abs(broadLines[i-1][0]-broadLines[i][0]));\n            if(Math.abs(broadLines[i-1][0]-broadLines[i][0])<rangeX){\n\n                candidates.push(broadLines[i]);\n                if(broadLines[i][1]>max){\n                    max = broadLines[i][1];\n                    maxI = i;\n                }\n                count++;\n            }\n            else{\n                isPartOf = true;\n                if(count>30){ // TODO, an options ?\n                    isPartOf = false;\n                    //for(var j=0;j<signals.length;j++){\n                    //    if(Math.abs(broadLines[maxI][0]-signals[j][0])<rangeX)\n                    //       isPartOf = true;\n                    //    }\n                    //console.log(\"Was part of \"+isPartOf);\n                }\n                if(isPartOf){\n                    for(var j=0;j<candidates.length;j++){\n                        signals.push([candidates[j][0], candidates[j][1], dx]);\n                    }\n                }\n                else{\n                    var fitted =  optimizePeaks.optimizeSingleLorentzian(candidates);\n                    //console.log(fitted);\n                    signals.push(fitted);\n                }\n                candidates = [];\n                max = 0;\n                maxI = 0;\n                count = 0;\n            }\n        }\n    }\n\n    signals.sort(function (a, b) {\n        return a.x - b.x;\n    });\n\n\n    return signals;\n}\n\nfunction realTopDetection(peakList, x, y){\n    var listP = [];\n    var alpha, beta, gamma, p,currentPoint;\n    for(var j=0;j<peakList.length;j++){\n        currentPoint = peakList[j][2];\n        //The detected peak could be moved 1 or 2 unit to left or right.\n        if(y[currentPoint-1]>=y[currentPoint-2]\n            &&y[currentPoint-1]>=y[currentPoint]) {\n            currentPoint--;\n        }\n        else{\n            if(y[currentPoint+1]>=y[currentPoint]\n                &&y[currentPoint+1]>=y[currentPoint+2]) {\n                currentPoint++;\n            }\n            else{\n                if(y[currentPoint-2]>=y[currentPoint-3]\n                    &&y[currentPoint-2]>=y[currentPoint-1]) {\n                    currentPoint-=2;\n                }\n                else{\n                    if(y[currentPoint+2]>=y[currentPoint+1]\n                        &&y[currentPoint+2]>=y[currentPoint+3]) {\n                        currentPoint+=2;\n                    }\n                }\n            }\n        }\n        if(y[currentPoint-1]>0&&y[currentPoint+1]>0\n            &&y[currentPoint]>=y[currentPoint-1]\n            &&y[currentPoint]>=y[currentPoint+1]) {\n            alpha = 20 * Math.log10(y[currentPoint - 1]);\n            beta = 20 * Math.log10(y[currentPoint]);\n            gamma = 20 * Math.log10(y[currentPoint + 1]);\n            p = 0.5 * (alpha - gamma) / (alpha - 2 * beta + gamma);\n\n            peakList[j][0] = x[currentPoint] + (x[currentPoint]-x[currentPoint-1])*p;\n            peakList[j][1] = y[currentPoint] - 0.25 * (y[currentPoint - 1]\n                - [currentPoint + 1]) * p;//signal.peaks[j].intensity);\n        }\n    }\n}\n\nmodule.exports=gsd;\n\n},{\"../src/optimize\":16}],16:[function(require,module,exports){\n/**\n * Created by acastillo on 9/6/15.\n */\nvar Opt = require(\"ml-optimize-lorentzian\");\n\nfunction sampleFunction(from, to, x, y, lastIndex){\n    //console.log(from+\" \"+to);\n    //console.log(lastIndex+\" \"+x[lastIndex[0]]);\n    var nbPoints = x.length;\n    var sampleX = [];\n    var sampleY = [];\n    var direction = Math.sign(x[1]-x[0]);//Direction of the derivative\n    var delta = (to-from)/2;\n    var mid = (from+to)/2;\n    var stop = false;\n    var index = lastIndex[0];\n    while(!stop&&index<nbPoints){\n        if(Math.abs(x[index]-mid)<=delta){\n            sampleX.push(x[index]);\n            sampleY.push(y[index]);\n            index++;\n\n        }\n        //It is outside the range.\n        else{\n\n            if(Math.sign(mid-x[index])==direction){\n                //We'll reach the mid going in the current direction\n                index++;\n            }\n            else{\n                //There is not more peaks in the current range\n                stop=true;\n            }\n        }\n        //console.log(sampleX);\n    }\n    lastIndex[0]=index;\n    return [sampleX, sampleY];\n}\n\nfunction optimizePeaks(peakList,x,y,n, fnType){\n    var i, j, lastIndex=[0];\n    var groups = groupPeaks(peakList,n);\n    var result = [];\n    //console.log(x[0]+\" \"+x[1]);\n    for(i=0;i<groups.length;i++){\n        //console.log(peakList[i]);\n        var peaks = groups[i].group;\n        if(peaks.length>1){\n            //Multiple peaks\n            //console.log(\"Pending group of overlaped peaks \"+peaks.length);\n            //console.log(groups[i].limits);\n            var sampling = sampleFunction(groups[i].limits[0]-groups[i].limits[1],groups[i].limits[0]+groups[i].limits[1],x,y,lastIndex);\n            //console.log(sampling);\n            if(sampling[0].length>5){\n                var error = peaks[0].width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                var optPeaks = [];\n                if(fnType==\"gaussian\")\n                    optPeaks = Opt.optimizeGaussianSum(sampling, peaks, opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        optPeaks = Opt.optimizeLorentzianSum(sampling, peaks, opts);\n                    }\n                }\n                for(j=0;j<optPeaks.length;j++){\n                    result.push({x:optPeaks[j][0],y:optPeaks[j][1],width:optPeaks[j][2]});\n                }\n            }\n        }\n        else{\n            //Single peak\n            peaks = peaks[0];\n            var sampling = sampleFunction(peaks.x-n*peaks.width,\n                peaks.x+n*peaks.width,x,y,lastIndex);\n            //console.log(sampling);\n            if(sampling[0].length>5){\n                var error = peaks.width/1000;\n                var opts = [  3,    100, error, error, error, error*10, error*10,    11,    9,        1 ];\n                //var gauss = Opt.optimizeSingleGaussian(sampling[0], sampling[1], opts, peaks);\n                //var gauss = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks, opts);\n                var optPeak = [];\n                if(fnType==\"gaussian\")\n                    var optPeak = Opt.optimizeSingleGaussian([sampling[0],sampling[1]], peaks,  opts);\n                else{\n                    if(fnType==\"lorentzian\"){\n                        var optPeak = Opt.optimizeSingleLorentzian([sampling[0],sampling[1]], peaks,  opts);\n                    }\n                }\n                result.push({x:optPeak[0],y:optPeak[1],width:optPeak[2]}); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n            }\n        }\n\n    }\n    return result;\n}\n\nfunction groupPeaks(peakList,nL){\n    var group = [];\n    var groups = [];\n    var i, j;\n    var limits = [peakList[0].x,nL*peakList[0].width];\n    var upperLimit, lowerLimit;\n    //Merge forward\n    for(i=0;i<peakList.length;i++){\n        //If the 2 things overlaps\n        if(Math.abs(peakList[i].x-limits[0])<(nL*peakList[i].width+limits[1])){\n            //Add the peak to the group\n            group.push(peakList[i]);\n            //Update the group limits\n            upperLimit = limits[0]+limits[1];\n            if(peakList[i].x+nL*peakList[i].width>upperLimit){\n                upperLimit = peakList[i].x+nL*peakList[i].width;\n            }\n            lowerLimit = limits[0]-limits[1];\n            if(peakList[i].x-nL*peakList[i].width<lowerLimit){\n                lowerLimit = peakList[i].x-nL*peakList[i].width;\n            }\n            limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n        }\n        else{\n            groups.push({limits:limits,group:group});\n            //var optmimalPeak = fitSpectrum(group,limits,spectrum);\n            group=[peakList[i]];\n            limits = [peakList[i].x,nL*peakList[i].width];\n        }\n    }\n    groups.push({limits:limits,group:group});\n    //Merge backward\n    for(i =groups.length-2;i>=0;i--){\n        //The groups overlaps\n        if(Math.abs(groups[i].limits[0]-groups[i+1].limits[0])<\n            (groups[i].limits[1]+groups[i+1].limits[1])/2){\n            for(j=0;j<groups[i+1].group.length;j++){\n                groups[i].group.push(groups[i+1].group[j]);\n            }\n            upperLimit = groups[i].limits[0]+groups[i].limits[1];\n            if(groups[i+1].limits[0]+groups[i+1].limits[1]>upperLimit){\n                upperLimit = groups[i+1].limits[0]+groups[i+1].limits[1];\n            }\n            lowerLimit = groups[i].limits[0]-groups[i].limits[1];\n            if(groups[i+1].limits[0]-groups[i+1].limits[1]<lowerLimit){\n                lowerLimit = groups[i+1].limits[0]-groups[i+1].limits[1];\n            }\n            //console.log(limits);\n            groups[i].limits = [(upperLimit+lowerLimit)/2,Math.abs(upperLimit-lowerLimit)/2];\n\n            groups.splice(i+1,1);\n        }\n    }\n    return groups;\n}\n\nmodule.exports=optimizePeaks;\n\n\n},{\"ml-optimize-lorentzian\":14}]},{},[1])(1)\n});"],"sourceRoot":"/source/"}