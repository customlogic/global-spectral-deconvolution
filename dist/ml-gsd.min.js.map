{"version":3,"file":"ml-gsd.min.js","sources":["../node_modules/ml-savitzky-golay-generalized/src/index.js","../src/gsd.js","../node_modules/is-any-array/src/index.js","../node_modules/ml-levenberg-marquardt/src/errorCalculation.js","../node_modules/ml-array-rescale/node_modules/is-any-array/src/index.js","../node_modules/ml-array-max/node_modules/is-any-array/src/index.js","../node_modules/ml-array-min/node_modules/is-any-array/src/index.js","../node_modules/ml-array-rescale/lib-es6/index.js","../node_modules/ml-array-min/lib-es6/index.js","../node_modules/ml-array-max/lib-es6/index.js","../node_modules/ml-matrix/src/inspect.js","../node_modules/ml-matrix/src/util.js","../node_modules/ml-matrix/src/matrix.js","../node_modules/ml-matrix/src/stat.js","../node_modules/ml-matrix/src/mathOperations.js","../node_modules/ml-matrix/src/wrap/WrapperMatrix2D.js","../node_modules/ml-matrix/src/dc/lu.js","../node_modules/ml-matrix/src/dc/util.js","../node_modules/ml-matrix/src/dc/qr.js","../node_modules/ml-matrix/src/dc/svd.js","../node_modules/ml-matrix/src/decompositions.js","../node_modules/ml-levenberg-marquardt/src/step.js","../node_modules/ml-levenberg-marquardt/src/index.js","../node_modules/ml-optimize-lorentzian/src/sumOfGaussians.js","../node_modules/ml-optimize-lorentzian/src/optimizeGaussianSum.js","../node_modules/ml-optimize-lorentzian/src/singleGaussian.js","../node_modules/ml-optimize-lorentzian/src/optimizeSingleGaussian.js","../node_modules/ml-optimize-lorentzian/src/sumOfLorentzians.js","../node_modules/ml-optimize-lorentzian/src/optimizeLorentzianSum.js","../node_modules/ml-optimize-lorentzian/src/singleLorentzian.js","../node_modules/ml-optimize-lorentzian/src/optimizeSingleLorentzian.js","../src/post/optimizePeaks.js","../src/post/broadenPeaks.js","../src/post/joinBroadPeaks.js"],"sourcesContent":["export default function SavitzkyGolay(data, h, options = {}) {\n  let { windowSize = 9, derivative = 0, polynomial = 3 } = options;\n\n  if (windowSize % 2 === 0 || windowSize < 5 || !Number.isInteger(windowSize)) {\n    throw new RangeError(\n      'Invalid window size (should be odd and at least 5 integer number)',\n    );\n  }\n  if (windowSize > data.length) {\n    throw new RangeError(\n      `Window size is higher than the data length ${windowSize}>${data.length}`,\n    );\n  }\n  if (derivative < 0 || !Number.isInteger(derivative)) {\n    throw new RangeError('Derivative should be a positive integer');\n  }\n  if (polynomial < 1 || !Number.isInteger(polynomial)) {\n    throw new RangeError('Polynomial should be a positive integer');\n  }\n  if (polynomial >= 6) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'You should not use polynomial grade higher than 5 if you are' +\n        ' not sure that your data arises from such a model. Possible polynomial oscillation problems',\n    );\n  }\n\n  let half = Math.floor(windowSize / 2);\n  let np = data.length;\n  let ans = new Array(np);\n  let weights = fullWeights(windowSize, polynomial, derivative);\n  let hs = 0;\n  let constantH = true;\n  if (Array.isArray(h)) {\n    constantH = false;\n  } else {\n    hs = Math.pow(h, derivative);\n  }\n\n  //For the borders\n  for (let i = 0; i < half; i++) {\n    let wg1 = weights[half - i - 1];\n    let wg2 = weights[half + i + 1];\n    let d1 = 0;\n    let d2 = 0;\n    for (let l = 0; l < windowSize; l++) {\n      d1 += wg1[l] * data[l];\n      d2 += wg2[l] * data[np - windowSize + l];\n    }\n    if (constantH) {\n      ans[half - i - 1] = d1 / hs;\n      ans[np - half + i] = d2 / hs;\n    } else {\n      hs = getHs(h, half - i - 1, half, derivative);\n      ans[half - i - 1] = d1 / hs;\n      hs = getHs(h, np - half + i, half, derivative);\n      ans[np - half + i] = d2 / hs;\n    }\n  }\n\n  //For the internal points\n  let wg = weights[half];\n  for (let i = windowSize; i <= np; i++) {\n    let d = 0;\n    for (let l = 0; l < windowSize; l++) d += wg[l] * data[l + i - windowSize];\n    if (!constantH) hs = getHs(h, i - half - 1, half, derivative);\n    ans[i - half - 1] = d / hs;\n  }\n  return ans;\n}\n\nfunction getHs(h, center, half, derivative) {\n  let hs = 0;\n  let count = 0;\n  for (let i = center - half; i < center + half; i++) {\n    if (i >= 0 && i < h.length - 1) {\n      hs += h[i + 1] - h[i];\n      count++;\n    }\n  }\n  return Math.pow(hs / count, derivative);\n}\n\nfunction GramPoly(i, m, k, s) {\n  let Grampoly = 0;\n  if (k > 0) {\n    Grampoly =\n      ((4 * k - 2) / (k * (2 * m - k + 1))) *\n        (i * GramPoly(i, m, k - 1, s) + s * GramPoly(i, m, k - 1, s - 1)) -\n      (((k - 1) * (2 * m + k)) / (k * (2 * m - k + 1))) *\n        GramPoly(i, m, k - 2, s);\n  } else {\n    if (k === 0 && s === 0) {\n      Grampoly = 1;\n    } else {\n      Grampoly = 0;\n    }\n  }\n  return Grampoly;\n}\n\nfunction GenFact(a, b) {\n  let gf = 1;\n  if (a >= b) {\n    for (let j = a - b + 1; j <= a; j++) {\n      gf *= j;\n    }\n  }\n  return gf;\n}\n\nfunction Weight(i, t, m, n, s) {\n  let sum = 0;\n  for (let k = 0; k <= n; k++) {\n    //console.log(k);\n    sum +=\n      (2 * k + 1) *\n      (GenFact(2 * m, k) / GenFact(2 * m + k + 1, k + 1)) *\n      GramPoly(i, m, k, 0) *\n      GramPoly(t, m, k, s);\n  }\n  return sum;\n}\n\n/**\n *\n * @param m  Number of points\n * @param n  Polynomial grade\n * @param s  Derivative\n */\nfunction fullWeights(m, n, s) {\n  let weights = new Array(m);\n  let np = Math.floor(m / 2);\n  for (let t = -np; t <= np; t++) {\n    weights[t + np] = new Array(m);\n    for (let j = -np; j <= np; j++) {\n      weights[t + np][j + np] = Weight(j, t, np, n, s);\n    }\n  }\n  return weights;\n}\n\n/*function entropy(data,h,options){\n    var trend = SavitzkyGolay(data,h,trendOptions);\n    var copy = new Array(data.length);\n    var sum = 0;\n    var max = 0;\n    for(var i=0;i<data.length;i++){\n        copy[i] = data[i]-trend[i];\n    }\n\n    sum/=data.length;\n    console.log(sum+\" \"+max);\n    console.log(stat.array.standardDeviation(copy));\n    console.log(Math.abs(stat.array.mean(copy))/stat.array.standardDeviation(copy));\n    return sum;\n\n}\n\n\n\nfunction guessWindowSize(data, h){\n    console.log(\"entropy \"+entropy(data,h,trendOptions));\n    return 5;\n}\n*/\n","import SG from 'ml-savitzky-golay-generalized';\n\n/**\n * Global spectra deconvolution\n * @param {Array<number>} x - Independent variable\n * @param {Array<number>} yIn - Dependent variable\n * @param {object} [options] - Options object\n * @param {object} [options.sgOptions] - Options object for Savitzky-Golay filter. See https://github.com/mljs/savitzky-golay-generalized#options\n * @param {number} [options.sgOptions.windowSize = 9] - points to use in the approximations\n * @param {number} [options.sgOptions.polynomial = 3] - degree of the polynomial to use in the approximations\n * @param {number} [options.minMaxRatio = 0.00025] - Threshold to determine if a given peak should be considered as a noise\n * @param {number} [options.broadRatio = 0.00] - If `broadRatio` is higher than 0, then all the peaks which second derivative\n * smaller than `broadRatio * maxAbsSecondDerivative` will be marked with the soft mask equal to true.\n * @param {number} [options.noiseLevel = 0] - Noise threshold in spectrum units\n * @param {boolean} [options.maxCriteria = true] - Peaks are local maximum(true) or minimum(false)\n * @param {boolean} [options.smoothY = true] - Select the peak intensities from a smoothed version of the independent variables\n * @param {boolean} [options.realTopDetection = false] - Use a quadratic optimizations with the peak and its 3 closest neighbors\n * to determine the true x,y values of the peak?\n * @param {number} [options.heightFactor = 0] - Factor to multiply the calculated height (usually 2)\n * @param {number} [options.derivativeThreshold = -1] - Filters based on the amplitude of the first derivative\n * @return {Array<object>}\n */\nexport function gsd(x, yIn, options = {}) {\n  let {\n    noiseLevel,\n    sgOptions = {\n      windowSize: 9,\n      polynomial: 3,\n    },\n    smoothY = true,\n    heightFactor = 0,\n    broadRatio = 0.0,\n    maxCriteria = true,\n    minMaxRatio = 0.00025,\n    derivativeThreshold = -1,\n    realTopDetection = false,\n  } = options;\n\n  const y = yIn.slice();\n  let equalSpaced = isEqualSpaced(x);\n\n  if (noiseLevel === undefined) {\n    noiseLevel = equalSpaced ? getNoiseLevel(y) : 0;\n  }\n\n  const yCorrection = { m: 1, b: noiseLevel };\n\n  if (!maxCriteria) {\n    yCorrection.m = -1;\n    yCorrection.b *= -1;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    y[i] = yCorrection.m * y[i] - yCorrection.b;\n  }\n\n  for (let i = 0; i < y.length; i++) {\n    if (y[i] < 0) {\n      y[i] = 0;\n    }\n  }\n  // If the max difference between delta x is less than 5%, then,\n  // we can assume it to be equally spaced variable\n  let yData = y;\n  let dY, ddY;\n  const { windowSize, polynomial } = sgOptions;\n\n  if (equalSpaced) {\n    if (smoothY) {\n      yData = SG(y, x[1] - x[0], {\n        windowSize,\n        polynomial,\n        derivative: 0,\n      });\n    }\n    dY = SG(y, x[1] - x[0], {\n      windowSize,\n      polynomial,\n      derivative: 1,\n    });\n    ddY = SG(y, x[1] - x[0], {\n      windowSize,\n      polynomial,\n      derivative: 2,\n    });\n  } else {\n    if (smoothY) {\n      yData = SG(y, x, {\n        windowSize,\n        polynomial,\n        derivative: 0,\n      });\n    }\n    dY = SG(y, x, {\n      windowSize,\n      polynomial,\n      derivative: 1,\n    });\n    ddY = SG(y, x, {\n      windowSize,\n      polynomial,\n      derivative: 2,\n    });\n  }\n\n  const xData = x;\n  const dX = x[1] - x[0];\n  let maxDdy = 0;\n  let maxY = 0;\n  for (let i = 0; i < yData.length; i++) {\n    if (Math.abs(ddY[i]) > maxDdy) {\n      maxDdy = Math.abs(ddY[i]);\n    }\n    if (Math.abs(yData[i]) > maxY) {\n      maxY = Math.abs(yData[i]);\n    }\n  }\n\n  let lastMax = null;\n  let lastMin = null;\n  let minddY = new Array(yData.length - 2);\n  let intervalL = new Array(yData.length);\n  let intervalR = new Array(yData.length);\n  let broadMask = new Array(yData.length - 2);\n  let minddYLen = 0;\n  let intervalLLen = 0;\n  let intervalRLen = 0;\n  let broadMaskLen = 0;\n  // By the intermediate value theorem We cannot find 2 consecutive maximum or minimum\n  for (let i = 1; i < yData.length - 1; ++i) {\n    // filter based on derivativeThreshold\n    // console.log('pasa', y[i], dY[i], ddY[i]);\n    if (Math.abs(dY[i]) > derivativeThreshold) {\n      // Minimum in first derivative\n      if (\n        (dY[i] < dY[i - 1] && dY[i] <= dY[i + 1]) ||\n        (dY[i] <= dY[i - 1] && dY[i] < dY[i + 1])\n      ) {\n        lastMin = {\n          x: xData[i],\n          index: i,\n        };\n        if (dX > 0 && lastMax !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n\n      // Maximum in first derivative\n      if (\n        (dY[i] >= dY[i - 1] && dY[i] > dY[i + 1]) ||\n        (dY[i] > dY[i - 1] && dY[i] >= dY[i + 1])\n      ) {\n        lastMax = {\n          x: xData[i],\n          index: i,\n        };\n        if (dX < 0 && lastMin !== null) {\n          intervalL[intervalLLen++] = lastMax;\n          intervalR[intervalRLen++] = lastMin;\n        }\n      }\n    }\n\n    // Minimum in second derivative\n    if (ddY[i] < ddY[i - 1] && ddY[i] < ddY[i + 1]) {\n      // TODO should we change this to have 3 arrays ? Huge overhead creating arrays\n      minddY[minddYLen++] = i; // ( [xData[i], yData[i], i] );\n      broadMask[broadMaskLen++] = Math.abs(ddY[i]) <= broadRatio * maxDdy;\n    }\n  }\n  minddY.length = minddYLen;\n  intervalL.length = intervalLLen;\n  intervalR.length = intervalRLen;\n  broadMask.length = broadMaskLen;\n\n  let signals = new Array(minddY.length);\n  let signalsLen = 0;\n  let lastK = -1;\n  let possible, frequency, distanceJ, minDistance, gettingCloser;\n  for (let j = 0; j < minddY.length; ++j) {\n    frequency = xData[minddY[j]];\n    possible = -1;\n    let k = lastK + 1;\n    minDistance = Number.MAX_VALUE;\n    distanceJ = 0;\n    gettingCloser = true;\n    while (possible === -1 && k < intervalL.length && gettingCloser) {\n      distanceJ = Math.abs(frequency - (intervalL[k].x + intervalR[k].x) / 2);\n\n      // Still getting closer?\n      if (distanceJ < minDistance) {\n        minDistance = distanceJ;\n      } else {\n        gettingCloser = false;\n      }\n      if (distanceJ < Math.abs(intervalL[k].x - intervalR[k].x) / 2) {\n        possible = k;\n        lastK = k;\n      }\n      ++k;\n    }\n\n    if (possible !== -1) {\n      if (Math.abs(yData[minddY[j]]) > minMaxRatio * maxY) {\n        signals[signalsLen++] = {\n          index: minddY[j],\n          x: frequency,\n          y: (yData[minddY[j]] + yCorrection.b) / yCorrection.m,\n          width: Math.abs(intervalR[possible].x - intervalL[possible].x), // widthCorrection\n          soft: broadMask[j],\n        };\n\n        signals[signalsLen - 1].left = intervalL[possible];\n        signals[signalsLen - 1].right = intervalR[possible];\n\n        if (heightFactor) {\n          let yLeft = yData[intervalL[possible].index];\n          let yRight = yData[intervalR[possible].index];\n          signals[signalsLen - 1].height =\n            heightFactor * (signals[signalsLen - 1].y - (yLeft + yRight) / 2);\n        }\n      }\n    }\n  }\n  signals.length = signalsLen;\n\n  if (realTopDetection) {\n    determineRealTop(signals, xData, yData);\n  }\n\n  // Correct the values to fit the original spectra data\n  for (let j = 0; j < signals.length; j++) {\n    signals[j].base = noiseLevel;\n  }\n\n  signals.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return signals;\n}\n\nconst isEqualSpaced = (x) => {\n  let tmp;\n  let maxDx = 0;\n  let minDx = Number.MAX_SAFE_INTEGER;\n  for (let i = 0; i < x.length - 1; ++i) {\n    tmp = Math.abs(x[i + 1] - x[i]);\n    if (tmp < minDx) {\n      minDx = tmp;\n    }\n    if (tmp > maxDx) {\n      maxDx = tmp;\n    }\n  }\n  return (maxDx - minDx) / maxDx < 0.05;\n};\n\nconst getNoiseLevel = (y) => {\n  let mean = 0;\n\n  let stddev = 0;\n  let length = y.length;\n  for (let i = 0; i < length; ++i) {\n    mean += y[i];\n  }\n  mean /= length;\n  let averageDeviations = new Array(length);\n  for (let i = 0; i < length; ++i) {\n    averageDeviations[i] = Math.abs(y[i] - mean);\n  }\n  averageDeviations.sort((a, b) => a - b);\n  if (length % 2 === 1) {\n    stddev = averageDeviations[(length - 1) / 2] / 0.6745;\n  } else {\n    stddev =\n      (0.5 *\n        (averageDeviations[length / 2] + averageDeviations[length / 2 - 1])) /\n      0.6745;\n  }\n\n  return stddev;\n};\n\nconst determineRealTop = (peakList, x, y) => {\n  let alpha, beta, gamma, p, currentPoint;\n  for (let j = 0; j < peakList.length; j++) {\n    currentPoint = peakList[j].index; // peakList[j][2];\n    // The detected peak could be moved 1 or 2 units to left or right.\n    if (\n      y[currentPoint - 1] >= y[currentPoint - 2] &&\n      y[currentPoint - 1] >= y[currentPoint]\n    ) {\n      currentPoint--;\n    } else {\n      if (\n        y[currentPoint + 1] >= y[currentPoint] &&\n        y[currentPoint + 1] >= y[currentPoint + 2]\n      ) {\n        currentPoint++;\n      } else {\n        if (\n          y[currentPoint - 2] >= y[currentPoint - 3] &&\n          y[currentPoint - 2] >= y[currentPoint - 1]\n        ) {\n          currentPoint -= 2;\n        } else {\n          if (\n            y[currentPoint + 2] >= y[currentPoint + 1] &&\n            y[currentPoint + 2] >= y[currentPoint + 3]\n          ) {\n            currentPoint += 2;\n          }\n        }\n      }\n    }\n    // interpolation to a sin() function\n    if (\n      y[currentPoint - 1] > 0 &&\n      y[currentPoint + 1] > 0 &&\n      y[currentPoint] >= y[currentPoint - 1] &&\n      y[currentPoint] >= y[currentPoint + 1] &&\n      (y[currentPoint] !== y[currentPoint - 1] ||\n        y[currentPoint] !== y[currentPoint + 1])\n    ) {\n      alpha = 20 * Math.log10(y[currentPoint - 1]);\n      beta = 20 * Math.log10(y[currentPoint]);\n      gamma = 20 * Math.log10(y[currentPoint + 1]);\n      p = (0.5 * (alpha - gamma)) / (alpha - 2 * beta + gamma);\n      // console.log(alpha, beta, gamma, `p: ${p}`);\n      // console.log(x[currentPoint]+\" \"+tmp+\" \"+currentPoint);\n      peakList[j].x =\n        x[currentPoint] + (x[currentPoint] - x[currentPoint - 1]) * p;\n      peakList[j].y =\n        y[currentPoint] -\n        0.25 * (y[currentPoint - 1] - y[currentPoint + 1]) * p;\n    }\n  }\n};\n","const toString = Object.prototype.toString;\n\nexport default function isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n","/**\n * Calculate current error\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} parameters - Array of current parameter values\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {number}\n */\nexport default function errorCalculation(\n  data,\n  parameters,\n  parameterizedFunction,\n) {\n  let error = 0;\n  const func = parameterizedFunction(parameters);\n\n  for (let i = 0; i < data.x.length; i++) {\n    error += Math.abs(data.y[i] - func(data.x[i]));\n  }\n\n  return error;\n}\n","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","'use strict';\n\nconst toString = Object.prototype.toString;\n\nfunction isAnyArray(object) {\n  return toString.call(object).endsWith('Array]');\n}\n\nmodule.exports = isAnyArray;\n","import isArray from 'is-any-array';\nimport max from 'ml-array-max';\nimport min from 'ml-array-min';\n\n/**\n *\n * @param {Array} input\n * @param {object} [options={}]\n * @param {Array} [options.output=[]] specify the output array, can be the input array for in place modification\n */\n\nfunction rescale(input) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  } else if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var output;\n\n  if (options.output !== undefined) {\n    if (!isArray(options.output)) {\n      throw new TypeError('output option must be an array if specified');\n    }\n\n    output = options.output;\n  } else {\n    output = new Array(input.length);\n  }\n\n  var currentMin = min(input);\n  var currentMax = max(input);\n\n  if (currentMin === currentMax) {\n    throw new RangeError('minimum and maximum input values are equal. Cannot rescale a constant array');\n  }\n\n  var _options$min = options.min,\n      minValue = _options$min === void 0 ? options.autoMinMax ? currentMin : 0 : _options$min,\n      _options$max = options.max,\n      maxValue = _options$max === void 0 ? options.autoMinMax ? currentMax : 1 : _options$max;\n\n  if (minValue >= maxValue) {\n    throw new RangeError('min option must be smaller than max option');\n  }\n\n  var factor = (maxValue - minValue) / (currentMax - currentMin);\n\n  for (var i = 0; i < input.length; i++) {\n    output[i] = (input[i] - currentMin) * factor + minValue;\n  }\n\n  return output;\n}\n\nexport default rescale;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the minimum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction min(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var minValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] < minValue) minValue = input[i];\n  }\n\n  return minValue;\n}\n\nexport default min;\n","import isArray from 'is-any-array';\n\n/**\n * Computes the maximum of the given values\n * @param {Array<number>} input\n * @return {number}\n */\n\nfunction max(input) {\n  if (!isArray(input)) {\n    throw new TypeError('input must be an array');\n  }\n\n  if (input.length === 0) {\n    throw new TypeError('input must not be empty');\n  }\n\n  var maxValue = input[0];\n\n  for (var i = 1; i < input.length; i++) {\n    if (input[i] > maxValue) maxValue = input[i];\n  }\n\n  return maxValue;\n}\n\nexport default max;\n","const indent = ' '.repeat(2);\nconst indentData = ' '.repeat(4);\n\nexport function inspectMatrix() {\n  return inspectMatrixWithOptions(this);\n}\n\nexport function inspectMatrixWithOptions(matrix, options = {}) {\n  const { maxRows = 15, maxColumns = 10, maxNumSize = 8 } = options;\n  return `${matrix.constructor.name} {\n${indent}[\n${indentData}${inspectData(matrix, maxRows, maxColumns, maxNumSize)}\n${indent}]\n${indent}rows: ${matrix.rows}\n${indent}columns: ${matrix.columns}\n}`;\n}\n\nfunction inspectData(matrix, maxRows, maxColumns, maxNumSize) {\n  const { rows, columns } = matrix;\n  const maxI = Math.min(rows, maxRows);\n  const maxJ = Math.min(columns, maxColumns);\n  const result = [];\n  for (let i = 0; i < maxI; i++) {\n    let line = [];\n    for (let j = 0; j < maxJ; j++) {\n      line.push(formatNumber(matrix.get(i, j), maxNumSize));\n    }\n    result.push(`${line.join(' ')}`);\n  }\n  if (maxJ !== columns) {\n    result[result.length - 1] += ` ... ${columns - maxColumns} more columns`;\n  }\n  if (maxI !== rows) {\n    result.push(`... ${rows - maxRows} more rows`);\n  }\n  return result.join(`\\n${indentData}`);\n}\n\nfunction formatNumber(num, maxNumSize) {\n  const numStr = String(num);\n  if (numStr.length <= maxNumSize) {\n    return numStr.padEnd(maxNumSize, ' ');\n  }\n  const precise = num.toPrecision(maxNumSize - 2);\n  if (precise.length <= maxNumSize) {\n    return precise;\n  }\n  const exponential = num.toExponential(maxNumSize - 2);\n  const eIndex = exponential.indexOf('e');\n  const e = exponential.slice(eIndex);\n  return exponential.slice(0, maxNumSize - e.length) + e;\n}\n","/**\n * @private\n * Check that a row index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkRowIndex(matrix, index, outer) {\n  let max = outer ? matrix.rows : matrix.rows - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Row index out of range');\n  }\n}\n\n/**\n * @private\n * Check that a column index is not out of bounds\n * @param {Matrix} matrix\n * @param {number} index\n * @param {boolean} [outer]\n */\nexport function checkColumnIndex(matrix, index, outer) {\n  let max = outer ? matrix.columns : matrix.columns - 1;\n  if (index < 0 || index > max) {\n    throw new RangeError('Column index out of range');\n  }\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkRowVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.columns) {\n    throw new RangeError(\n      'vector size must be the same as the number of columns',\n    );\n  }\n  return vector;\n}\n\n/**\n * @private\n * Check that the provided vector is an array with the right length\n * @param {Matrix} matrix\n * @param {Array|Matrix} vector\n * @return {Array}\n * @throws {RangeError}\n */\nexport function checkColumnVector(matrix, vector) {\n  if (vector.to1DArray) {\n    vector = vector.to1DArray();\n  }\n  if (vector.length !== matrix.rows) {\n    throw new RangeError('vector size must be the same as the number of rows');\n  }\n  return vector;\n}\n\nexport function checkIndices(matrix, rowIndices, columnIndices) {\n  return {\n    row: checkRowIndices(matrix, rowIndices),\n    column: checkColumnIndices(matrix, columnIndices),\n  };\n}\n\nexport function checkRowIndices(matrix, rowIndices) {\n  if (typeof rowIndices !== 'object') {\n    throw new TypeError('unexpected type for row indices');\n  }\n\n  let rowOut = rowIndices.some((r) => {\n    return r < 0 || r >= matrix.rows;\n  });\n\n  if (rowOut) {\n    throw new RangeError('row indices are out of range');\n  }\n\n  if (!Array.isArray(rowIndices)) rowIndices = Array.from(rowIndices);\n\n  return rowIndices;\n}\n\nexport function checkColumnIndices(matrix, columnIndices) {\n  if (typeof columnIndices !== 'object') {\n    throw new TypeError('unexpected type for column indices');\n  }\n\n  let columnOut = columnIndices.some((c) => {\n    return c < 0 || c >= matrix.columns;\n  });\n\n  if (columnOut) {\n    throw new RangeError('column indices are out of range');\n  }\n  if (!Array.isArray(columnIndices)) columnIndices = Array.from(columnIndices);\n\n  return columnIndices;\n}\n\nexport function checkRange(matrix, startRow, endRow, startColumn, endColumn) {\n  if (arguments.length !== 5) {\n    throw new RangeError('expected 4 arguments');\n  }\n  checkNumber('startRow', startRow);\n  checkNumber('endRow', endRow);\n  checkNumber('startColumn', startColumn);\n  checkNumber('endColumn', endColumn);\n  if (\n    startRow > endRow ||\n    startColumn > endColumn ||\n    startRow < 0 ||\n    startRow >= matrix.rows ||\n    endRow < 0 ||\n    endRow >= matrix.rows ||\n    startColumn < 0 ||\n    startColumn >= matrix.columns ||\n    endColumn < 0 ||\n    endColumn >= matrix.columns\n  ) {\n    throw new RangeError('Submatrix indices are out of range');\n  }\n}\n\nexport function newArray(length, value = 0) {\n  let array = [];\n  for (let i = 0; i < length; i++) {\n    array.push(value);\n  }\n  return array;\n}\n\nfunction checkNumber(name, value) {\n  if (typeof value !== 'number') {\n    throw new TypeError(`${name} must be a number`);\n  }\n}\n","import rescale from 'ml-array-rescale';\n\nimport { inspectMatrix, inspectMatrixWithOptions } from './inspect';\nimport { installMathOperations } from './mathOperations';\nimport {\n  sumByRow,\n  sumByColumn,\n  sumAll,\n  productByRow,\n  productByColumn,\n  productAll,\n  varianceByRow,\n  varianceByColumn,\n  varianceAll,\n  centerByRow,\n  centerByColumn,\n  centerAll,\n  scaleByRow,\n  scaleByColumn,\n  scaleAll,\n  getScaleByRow,\n  getScaleByColumn,\n  getScaleAll,\n} from './stat';\nimport {\n  checkRowVector,\n  checkRowIndex,\n  checkColumnIndex,\n  checkColumnVector,\n  checkRange,\n  checkIndices,\n} from './util';\n\nexport class AbstractMatrix {\n  static from1DArray(newRows, newColumns, newData) {\n    let length = newRows * newColumns;\n    if (length !== newData.length) {\n      throw new RangeError('data length does not match given dimensions');\n    }\n    let newMatrix = new Matrix(newRows, newColumns);\n    for (let row = 0; row < newRows; row++) {\n      for (let column = 0; column < newColumns; column++) {\n        newMatrix.set(row, column, newData[row * newColumns + column]);\n      }\n    }\n    return newMatrix;\n  }\n\n  static rowVector(newData) {\n    let vector = new Matrix(1, newData.length);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(0, i, newData[i]);\n    }\n    return vector;\n  }\n\n  static columnVector(newData) {\n    let vector = new Matrix(newData.length, 1);\n    for (let i = 0; i < newData.length; i++) {\n      vector.set(i, 0, newData[i]);\n    }\n    return vector;\n  }\n\n  static zeros(rows, columns) {\n    return new Matrix(rows, columns);\n  }\n\n  static ones(rows, columns) {\n    return new Matrix(rows, columns).fill(1);\n  }\n\n  static rand(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { random = Math.random } = options;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.set(i, j, random());\n      }\n    }\n    return matrix;\n  }\n\n  static randInt(rows, columns, options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1000, random = Math.random } = options;\n    if (!Number.isInteger(min)) throw new TypeError('min must be an integer');\n    if (!Number.isInteger(max)) throw new TypeError('max must be an integer');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let interval = max - min;\n    let matrix = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        let value = min + Math.round(random() * interval);\n        matrix.set(i, j, value);\n      }\n    }\n    return matrix;\n  }\n\n  static eye(rows, columns, value) {\n    if (columns === undefined) columns = rows;\n    if (value === undefined) value = 1;\n    let min = Math.min(rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, value);\n    }\n    return matrix;\n  }\n\n  static diag(data, rows, columns) {\n    let l = data.length;\n    if (rows === undefined) rows = l;\n    if (columns === undefined) columns = rows;\n    let min = Math.min(l, rows, columns);\n    let matrix = this.zeros(rows, columns);\n    for (let i = 0; i < min; i++) {\n      matrix.set(i, i, data[i]);\n    }\n    return matrix;\n  }\n\n  static min(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.min(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static max(matrix1, matrix2) {\n    matrix1 = this.checkMatrix(matrix1);\n    matrix2 = this.checkMatrix(matrix2);\n    let rows = matrix1.rows;\n    let columns = matrix1.columns;\n    let result = new this(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        result.set(i, j, Math.max(matrix1.get(i, j), matrix2.get(i, j)));\n      }\n    }\n    return result;\n  }\n\n  static checkMatrix(value) {\n    return AbstractMatrix.isMatrix(value) ? value : new Matrix(value);\n  }\n\n  static isMatrix(value) {\n    return value != null && value.klass === 'Matrix';\n  }\n\n  get size() {\n    return this.rows * this.columns;\n  }\n\n  apply(callback) {\n    if (typeof callback !== 'function') {\n      throw new TypeError('callback must be a function');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        callback.call(this, i, j);\n      }\n    }\n    return this;\n  }\n\n  to1DArray() {\n    let array = [];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        array.push(this.get(i, j));\n      }\n    }\n    return array;\n  }\n\n  to2DArray() {\n    let copy = [];\n    for (let i = 0; i < this.rows; i++) {\n      copy.push([]);\n      for (let j = 0; j < this.columns; j++) {\n        copy[i].push(this.get(i, j));\n      }\n    }\n    return copy;\n  }\n\n  toJSON() {\n    return this.to2DArray();\n  }\n\n  isRowVector() {\n    return this.rows === 1;\n  }\n\n  isColumnVector() {\n    return this.columns === 1;\n  }\n\n  isVector() {\n    return this.rows === 1 || this.columns === 1;\n  }\n\n  isSquare() {\n    return this.rows === this.columns;\n  }\n\n  isSymmetric() {\n    if (this.isSquare()) {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j <= i; j++) {\n          if (this.get(i, j) !== this.get(j, i)) {\n            return false;\n          }\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  isEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isEchelonForm = false;\n          checked = true;\n        }\n      }\n      i++;\n    }\n    return isEchelonForm;\n  }\n\n  isReducedEchelonForm() {\n    let i = 0;\n    let j = 0;\n    let previousColumn = -1;\n    let isReducedEchelonForm = true;\n    let checked = false;\n    while (i < this.rows && isReducedEchelonForm) {\n      j = 0;\n      checked = false;\n      while (j < this.columns && checked === false) {\n        if (this.get(i, j) === 0) {\n          j++;\n        } else if (this.get(i, j) === 1 && j > previousColumn) {\n          checked = true;\n          previousColumn = j;\n        } else {\n          isReducedEchelonForm = false;\n          checked = true;\n        }\n      }\n      for (let k = j + 1; k < this.rows; k++) {\n        if (this.get(i, k) !== 0) {\n          isReducedEchelonForm = false;\n        }\n      }\n      i++;\n    }\n    return isReducedEchelonForm;\n  }\n\n  echelonForm() {\n    let result = this.clone();\n    let h = 0;\n    let k = 0;\n    while (h < result.rows && k < result.columns) {\n      let iMax = h;\n      for (let i = h; i < result.rows; i++) {\n        if (result.get(i, k) > result.get(iMax, k)) {\n          iMax = i;\n        }\n      }\n      if (result.get(iMax, k) === 0) {\n        k++;\n      } else {\n        result.swapRows(h, iMax);\n        let tmp = result.get(h, k);\n        for (let j = k; j < result.columns; j++) {\n          result.set(h, j, result.get(h, j) / tmp);\n        }\n        for (let i = h + 1; i < result.rows; i++) {\n          let factor = result.get(i, k) / result.get(h, k);\n          result.set(i, k, 0);\n          for (let j = k + 1; j < result.columns; j++) {\n            result.set(i, j, result.get(i, j) - result.get(h, j) * factor);\n          }\n        }\n        h++;\n        k++;\n      }\n    }\n    return result;\n  }\n\n  reducedEchelonForm() {\n    let result = this.echelonForm();\n    let m = result.columns;\n    let n = result.rows;\n    let h = n - 1;\n    while (h >= 0) {\n      if (result.maxRow(h) === 0) {\n        h--;\n      } else {\n        let p = 0;\n        let pivot = false;\n        while (p < n && pivot === false) {\n          if (result.get(h, p) === 1) {\n            pivot = true;\n          } else {\n            p++;\n          }\n        }\n        for (let i = 0; i < h; i++) {\n          let factor = result.get(i, p);\n          for (let j = p; j < m; j++) {\n            let tmp = result.get(i, j) - factor * result.get(h, j);\n            result.set(i, j, tmp);\n          }\n        }\n        h--;\n      }\n    }\n    return result;\n  }\n\n  set() {\n    throw new Error('set method is unimplemented');\n  }\n\n  get() {\n    throw new Error('get method is unimplemented');\n  }\n\n  repeat(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { rows = 1, columns = 1 } = options;\n    if (!Number.isInteger(rows) || rows <= 0) {\n      throw new TypeError('rows must be a positive integer');\n    }\n    if (!Number.isInteger(columns) || columns <= 0) {\n      throw new TypeError('columns must be a positive integer');\n    }\n    let matrix = new Matrix(this.rows * rows, this.columns * columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        matrix.setSubMatrix(this, this.rows * i, this.columns * j);\n      }\n    }\n    return matrix;\n  }\n\n  fill(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, value);\n      }\n    }\n    return this;\n  }\n\n  neg() {\n    return this.mulS(-1);\n  }\n\n  getRow(index) {\n    checkRowIndex(this, index);\n    let row = [];\n    for (let i = 0; i < this.columns; i++) {\n      row.push(this.get(index, i));\n    }\n    return row;\n  }\n\n  getRowVector(index) {\n    return Matrix.rowVector(this.getRow(index));\n  }\n\n  setRow(index, array) {\n    checkRowIndex(this, index);\n    array = checkRowVector(this, array);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, array[i]);\n    }\n    return this;\n  }\n\n  swapRows(row1, row2) {\n    checkRowIndex(this, row1);\n    checkRowIndex(this, row2);\n    for (let i = 0; i < this.columns; i++) {\n      let temp = this.get(row1, i);\n      this.set(row1, i, this.get(row2, i));\n      this.set(row2, i, temp);\n    }\n    return this;\n  }\n\n  getColumn(index) {\n    checkColumnIndex(this, index);\n    let column = [];\n    for (let i = 0; i < this.rows; i++) {\n      column.push(this.get(i, index));\n    }\n    return column;\n  }\n\n  getColumnVector(index) {\n    return Matrix.columnVector(this.getColumn(index));\n  }\n\n  setColumn(index, array) {\n    checkColumnIndex(this, index);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, array[i]);\n    }\n    return this;\n  }\n\n  swapColumns(column1, column2) {\n    checkColumnIndex(this, column1);\n    checkColumnIndex(this, column2);\n    for (let i = 0; i < this.rows; i++) {\n      let temp = this.get(i, column1);\n      this.set(i, column1, this.get(i, column2));\n      this.set(i, column2, temp);\n    }\n    return this;\n  }\n\n  addRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[j]);\n      }\n    }\n    return this;\n  }\n\n  subRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[j]);\n      }\n    }\n    return this;\n  }\n\n  mulRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[j]);\n      }\n    }\n    return this;\n  }\n\n  divRowVector(vector) {\n    vector = checkRowVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[j]);\n      }\n    }\n    return this;\n  }\n\n  addColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + vector[i]);\n      }\n    }\n    return this;\n  }\n\n  subColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * vector[i]);\n      }\n    }\n    return this;\n  }\n\n  divColumnVector(vector) {\n    vector = checkColumnVector(this, vector);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / vector[i]);\n      }\n    }\n    return this;\n  }\n\n  mulRow(index, value) {\n    checkRowIndex(this, index);\n    for (let i = 0; i < this.columns; i++) {\n      this.set(index, i, this.get(index, i) * value);\n    }\n    return this;\n  }\n\n  mulColumn(index, value) {\n    checkColumnIndex(this, index);\n    for (let i = 0; i < this.rows; i++) {\n      this.set(i, index, this.get(i, index) * value);\n    }\n    return this;\n  }\n\n  max() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  maxIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) > v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  min() {\n    let v = this.get(0, 0);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n        }\n      }\n    }\n    return v;\n  }\n\n  minIndex() {\n    let v = this.get(0, 0);\n    let idx = [0, 0];\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        if (this.get(i, j) < v) {\n          v = this.get(i, j);\n          idx[0] = i;\n          idx[1] = j;\n        }\n      }\n    }\n    return idx;\n  }\n\n  maxRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  maxRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) > v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  minRow(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n      }\n    }\n    return v;\n  }\n\n  minRowIndex(row) {\n    checkRowIndex(this, row);\n    let v = this.get(row, 0);\n    let idx = [row, 0];\n    for (let i = 1; i < this.columns; i++) {\n      if (this.get(row, i) < v) {\n        v = this.get(row, i);\n        idx[1] = i;\n      }\n    }\n    return idx;\n  }\n\n  maxColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  maxColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) > v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  minColumn(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n      }\n    }\n    return v;\n  }\n\n  minColumnIndex(column) {\n    checkColumnIndex(this, column);\n    let v = this.get(0, column);\n    let idx = [0, column];\n    for (let i = 1; i < this.rows; i++) {\n      if (this.get(i, column) < v) {\n        v = this.get(i, column);\n        idx[0] = i;\n      }\n    }\n    return idx;\n  }\n\n  diag() {\n    let min = Math.min(this.rows, this.columns);\n    let diag = [];\n    for (let i = 0; i < min; i++) {\n      diag.push(this.get(i, i));\n    }\n    return diag;\n  }\n\n  norm(type = 'frobenius') {\n    let result = 0;\n    if (type === 'max') {\n      return this.max();\n    } else if (type === 'frobenius') {\n      for (let i = 0; i < this.rows; i++) {\n        for (let j = 0; j < this.columns; j++) {\n          result = result + this.get(i, j) * this.get(i, j);\n        }\n      }\n      return Math.sqrt(result);\n    } else {\n      throw new RangeError(`unknown norm type: ${type}`);\n    }\n  }\n\n  cumulativeSum() {\n    let sum = 0;\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        sum += this.get(i, j);\n        this.set(i, j, sum);\n      }\n    }\n    return this;\n  }\n\n  dot(vector2) {\n    if (AbstractMatrix.isMatrix(vector2)) vector2 = vector2.to1DArray();\n    let vector1 = this.to1DArray();\n    if (vector1.length !== vector2.length) {\n      throw new RangeError('vectors do not have the same size');\n    }\n    let dot = 0;\n    for (let i = 0; i < vector1.length; i++) {\n      dot += vector1[i] * vector2[i];\n    }\n    return dot;\n  }\n\n  mmul(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.columns;\n\n    let result = new Matrix(m, p);\n\n    let Bcolj = new Float64Array(n);\n    for (let j = 0; j < p; j++) {\n      for (let k = 0; k < n; k++) {\n        Bcolj[k] = other.get(k, j);\n      }\n\n      for (let i = 0; i < m; i++) {\n        let s = 0;\n        for (let k = 0; k < n; k++) {\n          s += this.get(i, k) * Bcolj[k];\n        }\n\n        result.set(i, j, s);\n      }\n    }\n    return result;\n  }\n\n  strassen2x2(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(2, 2);\n    const a11 = this.get(0, 0);\n    const b11 = other.get(0, 0);\n    const a12 = this.get(0, 1);\n    const b12 = other.get(0, 1);\n    const a21 = this.get(1, 0);\n    const b21 = other.get(1, 0);\n    const a22 = this.get(1, 1);\n    const b22 = other.get(1, 1);\n\n    // Compute intermediate values.\n    const m1 = (a11 + a22) * (b11 + b22);\n    const m2 = (a21 + a22) * b11;\n    const m3 = a11 * (b12 - b22);\n    const m4 = a22 * (b21 - b11);\n    const m5 = (a11 + a12) * b22;\n    const m6 = (a21 - a11) * (b11 + b12);\n    const m7 = (a12 - a22) * (b21 + b22);\n\n    // Combine intermediate values into the output.\n    const c00 = m1 + m4 - m5 + m7;\n    const c01 = m3 + m5;\n    const c10 = m2 + m4;\n    const c11 = m1 - m2 + m3 + m6;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    return result;\n  }\n\n  strassen3x3(other) {\n    other = Matrix.checkMatrix(other);\n    let result = new Matrix(3, 3);\n\n    const a00 = this.get(0, 0);\n    const a01 = this.get(0, 1);\n    const a02 = this.get(0, 2);\n    const a10 = this.get(1, 0);\n    const a11 = this.get(1, 1);\n    const a12 = this.get(1, 2);\n    const a20 = this.get(2, 0);\n    const a21 = this.get(2, 1);\n    const a22 = this.get(2, 2);\n\n    const b00 = other.get(0, 0);\n    const b01 = other.get(0, 1);\n    const b02 = other.get(0, 2);\n    const b10 = other.get(1, 0);\n    const b11 = other.get(1, 1);\n    const b12 = other.get(1, 2);\n    const b20 = other.get(2, 0);\n    const b21 = other.get(2, 1);\n    const b22 = other.get(2, 2);\n\n    const m1 = (a00 + a01 + a02 - a10 - a11 - a21 - a22) * b11;\n    const m2 = (a00 - a10) * (-b01 + b11);\n    const m3 = a11 * (-b00 + b01 + b10 - b11 - b12 - b20 + b22);\n    const m4 = (-a00 + a10 + a11) * (b00 - b01 + b11);\n    const m5 = (a10 + a11) * (-b00 + b01);\n    const m6 = a00 * b00;\n    const m7 = (-a00 + a20 + a21) * (b00 - b02 + b12);\n    const m8 = (-a00 + a20) * (b02 - b12);\n    const m9 = (a20 + a21) * (-b00 + b02);\n    const m10 = (a00 + a01 + a02 - a11 - a12 - a20 - a21) * b12;\n    const m11 = a21 * (-b00 + b02 + b10 - b11 - b12 - b20 + b21);\n    const m12 = (-a02 + a21 + a22) * (b11 + b20 - b21);\n    const m13 = (a02 - a22) * (b11 - b21);\n    const m14 = a02 * b20;\n    const m15 = (a21 + a22) * (-b20 + b21);\n    const m16 = (-a02 + a11 + a12) * (b12 + b20 - b22);\n    const m17 = (a02 - a12) * (b12 - b22);\n    const m18 = (a11 + a12) * (-b20 + b22);\n    const m19 = a01 * b10;\n    const m20 = a12 * b21;\n    const m21 = a10 * b02;\n    const m22 = a20 * b01;\n    const m23 = a22 * b22;\n\n    const c00 = m6 + m14 + m19;\n    const c01 = m1 + m4 + m5 + m6 + m12 + m14 + m15;\n    const c02 = m6 + m7 + m9 + m10 + m14 + m16 + m18;\n    const c10 = m2 + m3 + m4 + m6 + m14 + m16 + m17;\n    const c11 = m2 + m4 + m5 + m6 + m20;\n    const c12 = m14 + m16 + m17 + m18 + m21;\n    const c20 = m6 + m7 + m8 + m11 + m12 + m13 + m14;\n    const c21 = m12 + m13 + m14 + m15 + m22;\n    const c22 = m6 + m7 + m8 + m9 + m23;\n\n    result.set(0, 0, c00);\n    result.set(0, 1, c01);\n    result.set(0, 2, c02);\n    result.set(1, 0, c10);\n    result.set(1, 1, c11);\n    result.set(1, 2, c12);\n    result.set(2, 0, c20);\n    result.set(2, 1, c21);\n    result.set(2, 2, c22);\n    return result;\n  }\n\n  mmulStrassen(y) {\n    y = Matrix.checkMatrix(y);\n    let x = this.clone();\n    let r1 = x.rows;\n    let c1 = x.columns;\n    let r2 = y.rows;\n    let c2 = y.columns;\n    if (c1 !== r2) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Multiplying ${r1} x ${c1} and ${r2} x ${c2} matrix: dimensions do not match.`,\n      );\n    }\n\n    // Put a matrix into the top left of a matrix of zeros.\n    // `rows` and `cols` are the dimensions of the output matrix.\n    function embed(mat, rows, cols) {\n      let r = mat.rows;\n      let c = mat.columns;\n      if (r === rows && c === cols) {\n        return mat;\n      } else {\n        let resultat = AbstractMatrix.zeros(rows, cols);\n        resultat = resultat.setSubMatrix(mat, 0, 0);\n        return resultat;\n      }\n    }\n\n    // Make sure both matrices are the same size.\n    // This is exclusively for simplicity:\n    // this algorithm can be implemented with matrices of different sizes.\n\n    let r = Math.max(r1, r2);\n    let c = Math.max(c1, c2);\n    x = embed(x, r, c);\n    y = embed(y, r, c);\n\n    // Our recursive multiplication function.\n    function blockMult(a, b, rows, cols) {\n      // For small matrices, resort to naive multiplication.\n      if (rows <= 512 || cols <= 512) {\n        return a.mmul(b); // a is equivalent to this\n      }\n\n      // Apply dynamic padding.\n      if (rows % 2 === 1 && cols % 2 === 1) {\n        a = embed(a, rows + 1, cols + 1);\n        b = embed(b, rows + 1, cols + 1);\n      } else if (rows % 2 === 1) {\n        a = embed(a, rows + 1, cols);\n        b = embed(b, rows + 1, cols);\n      } else if (cols % 2 === 1) {\n        a = embed(a, rows, cols + 1);\n        b = embed(b, rows, cols + 1);\n      }\n\n      let halfRows = parseInt(a.rows / 2, 10);\n      let halfCols = parseInt(a.columns / 2, 10);\n      // Subdivide input matrices.\n      let a11 = a.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n      let b11 = b.subMatrix(0, halfRows - 1, 0, halfCols - 1);\n\n      let a12 = a.subMatrix(0, halfRows - 1, halfCols, a.columns - 1);\n      let b12 = b.subMatrix(0, halfRows - 1, halfCols, b.columns - 1);\n\n      let a21 = a.subMatrix(halfRows, a.rows - 1, 0, halfCols - 1);\n      let b21 = b.subMatrix(halfRows, b.rows - 1, 0, halfCols - 1);\n\n      let a22 = a.subMatrix(halfRows, a.rows - 1, halfCols, a.columns - 1);\n      let b22 = b.subMatrix(halfRows, b.rows - 1, halfCols, b.columns - 1);\n\n      // Compute intermediate values.\n      let m1 = blockMult(\n        AbstractMatrix.add(a11, a22),\n        AbstractMatrix.add(b11, b22),\n        halfRows,\n        halfCols,\n      );\n      let m2 = blockMult(AbstractMatrix.add(a21, a22), b11, halfRows, halfCols);\n      let m3 = blockMult(a11, AbstractMatrix.sub(b12, b22), halfRows, halfCols);\n      let m4 = blockMult(a22, AbstractMatrix.sub(b21, b11), halfRows, halfCols);\n      let m5 = blockMult(AbstractMatrix.add(a11, a12), b22, halfRows, halfCols);\n      let m6 = blockMult(\n        AbstractMatrix.sub(a21, a11),\n        AbstractMatrix.add(b11, b12),\n        halfRows,\n        halfCols,\n      );\n      let m7 = blockMult(\n        AbstractMatrix.sub(a12, a22),\n        AbstractMatrix.add(b21, b22),\n        halfRows,\n        halfCols,\n      );\n\n      // Combine intermediate values into the output.\n      let c11 = AbstractMatrix.add(m1, m4);\n      c11.sub(m5);\n      c11.add(m7);\n      let c12 = AbstractMatrix.add(m3, m5);\n      let c21 = AbstractMatrix.add(m2, m4);\n      let c22 = AbstractMatrix.sub(m1, m2);\n      c22.add(m3);\n      c22.add(m6);\n\n      // Crop output to the desired size (undo dynamic padding).\n      let resultat = AbstractMatrix.zeros(2 * c11.rows, 2 * c11.columns);\n      resultat = resultat.setSubMatrix(c11, 0, 0);\n      resultat = resultat.setSubMatrix(c12, c11.rows, 0);\n      resultat = resultat.setSubMatrix(c21, 0, c11.columns);\n      resultat = resultat.setSubMatrix(c22, c11.rows, c11.columns);\n      return resultat.subMatrix(0, rows - 1, 0, cols - 1);\n    }\n    return blockMult(x, y, r, c);\n  }\n\n  scaleRows(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.rows; i++) {\n      const row = this.getRow(i);\n      rescale(row, { min, max, output: row });\n      newMatrix.setRow(i, row);\n    }\n    return newMatrix;\n  }\n\n  scaleColumns(options = {}) {\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { min = 0, max = 1 } = options;\n    if (!Number.isFinite(min)) throw new TypeError('min must be a number');\n    if (!Number.isFinite(max)) throw new TypeError('max must be a number');\n    if (min >= max) throw new RangeError('min must be smaller than max');\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let i = 0; i < this.columns; i++) {\n      const column = this.getColumn(i);\n      rescale(column, {\n        min: min,\n        max: max,\n        output: column,\n      });\n      newMatrix.setColumn(i, column);\n    }\n    return newMatrix;\n  }\n\n  flipRows() {\n    const middle = Math.ceil(this.columns / 2);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < middle; j++) {\n        let first = this.get(i, j);\n        let last = this.get(i, this.columns - 1 - j);\n        this.set(i, j, last);\n        this.set(i, this.columns - 1 - j, first);\n      }\n    }\n    return this;\n  }\n\n  flipColumns() {\n    const middle = Math.ceil(this.rows / 2);\n    for (let j = 0; j < this.columns; j++) {\n      for (let i = 0; i < middle; i++) {\n        let first = this.get(i, j);\n        let last = this.get(this.rows - 1 - i, j);\n        this.set(i, j, last);\n        this.set(this.rows - 1 - i, j, first);\n      }\n    }\n    return this;\n  }\n\n  kroneckerProduct(other) {\n    other = Matrix.checkMatrix(other);\n\n    let m = this.rows;\n    let n = this.columns;\n    let p = other.rows;\n    let q = other.columns;\n\n    let result = new Matrix(m * p, n * q);\n    for (let i = 0; i < m; i++) {\n      for (let j = 0; j < n; j++) {\n        for (let k = 0; k < p; k++) {\n          for (let l = 0; l < q; l++) {\n            result.set(p * i + k, q * j + l, this.get(i, j) * other.get(k, l));\n          }\n        }\n      }\n    }\n    return result;\n  }\n\n  transpose() {\n    let result = new Matrix(this.columns, this.rows);\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        result.set(j, i, this.get(i, j));\n      }\n    }\n    return result;\n  }\n\n  sortRows(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.rows; i++) {\n      this.setRow(i, this.getRow(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  sortColumns(compareFunction = compareNumbers) {\n    for (let i = 0; i < this.columns; i++) {\n      this.setColumn(i, this.getColumn(i).sort(compareFunction));\n    }\n    return this;\n  }\n\n  subMatrix(startRow, endRow, startColumn, endColumn) {\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    let newMatrix = new Matrix(\n      endRow - startRow + 1,\n      endColumn - startColumn + 1,\n    );\n    for (let i = startRow; i <= endRow; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        newMatrix.set(i - startRow, j - startColumn, this.get(i, j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixRow(indices, startColumn, endColumn) {\n    if (startColumn === undefined) startColumn = 0;\n    if (endColumn === undefined) endColumn = this.columns - 1;\n    if (\n      startColumn > endColumn ||\n      startColumn < 0 ||\n      startColumn >= this.columns ||\n      endColumn < 0 ||\n      endColumn >= this.columns\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(indices.length, endColumn - startColumn + 1);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startColumn; j <= endColumn; j++) {\n        if (indices[i] < 0 || indices[i] >= this.rows) {\n          throw new RangeError(`Row index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(i, j - startColumn, this.get(indices[i], j));\n      }\n    }\n    return newMatrix;\n  }\n\n  subMatrixColumn(indices, startRow, endRow) {\n    if (startRow === undefined) startRow = 0;\n    if (endRow === undefined) endRow = this.rows - 1;\n    if (\n      startRow > endRow ||\n      startRow < 0 ||\n      startRow >= this.rows ||\n      endRow < 0 ||\n      endRow >= this.rows\n    ) {\n      throw new RangeError('Argument out of range');\n    }\n\n    let newMatrix = new Matrix(endRow - startRow + 1, indices.length);\n    for (let i = 0; i < indices.length; i++) {\n      for (let j = startRow; j <= endRow; j++) {\n        if (indices[i] < 0 || indices[i] >= this.columns) {\n          throw new RangeError(`Column index out of range: ${indices[i]}`);\n        }\n        newMatrix.set(j - startRow, i, this.get(j, indices[i]));\n      }\n    }\n    return newMatrix;\n  }\n\n  setSubMatrix(matrix, startRow, startColumn) {\n    matrix = Matrix.checkMatrix(matrix);\n    let endRow = startRow + matrix.rows - 1;\n    let endColumn = startColumn + matrix.columns - 1;\n    checkRange(this, startRow, endRow, startColumn, endColumn);\n    for (let i = 0; i < matrix.rows; i++) {\n      for (let j = 0; j < matrix.columns; j++) {\n        this.set(startRow + i, startColumn + j, matrix.get(i, j));\n      }\n    }\n    return this;\n  }\n\n  selection(rowIndices, columnIndices) {\n    let indices = checkIndices(this, rowIndices, columnIndices);\n    let newMatrix = new Matrix(rowIndices.length, columnIndices.length);\n    for (let i = 0; i < indices.row.length; i++) {\n      let rowIndex = indices.row[i];\n      for (let j = 0; j < indices.column.length; j++) {\n        let columnIndex = indices.column[j];\n        newMatrix.set(i, j, this.get(rowIndex, columnIndex));\n      }\n    }\n    return newMatrix;\n  }\n\n  trace() {\n    let min = Math.min(this.rows, this.columns);\n    let trace = 0;\n    for (let i = 0; i < min; i++) {\n      trace += this.get(i, i);\n    }\n    return trace;\n  }\n\n  clone() {\n    let newMatrix = new Matrix(this.rows, this.columns);\n    for (let row = 0; row < this.rows; row++) {\n      for (let column = 0; column < this.columns; column++) {\n        newMatrix.set(row, column, this.get(row, column));\n      }\n    }\n    return newMatrix;\n  }\n\n  sum(by) {\n    switch (by) {\n      case 'row':\n        return sumByRow(this);\n      case 'column':\n        return sumByColumn(this);\n      case undefined:\n        return sumAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  product(by) {\n    switch (by) {\n      case 'row':\n        return productByRow(this);\n      case 'column':\n        return productByColumn(this);\n      case undefined:\n        return productAll(this);\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  mean(by) {\n    const sum = this.sum(by);\n    switch (by) {\n      case 'row': {\n        for (let i = 0; i < this.rows; i++) {\n          sum[i] /= this.columns;\n        }\n        return sum;\n      }\n      case 'column': {\n        for (let i = 0; i < this.columns; i++) {\n          sum[i] /= this.rows;\n        }\n        return sum;\n      }\n      case undefined:\n        return sum / this.size;\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  variance(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { unbiased = true, mean = this.mean(by) } = options;\n    if (typeof unbiased !== 'boolean') {\n      throw new TypeError('unbiased must be a boolean');\n    }\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByRow(this, unbiased, mean);\n      }\n      case 'column': {\n        if (!Array.isArray(mean)) {\n          throw new TypeError('mean must be an array');\n        }\n        return varianceByColumn(this, unbiased, mean);\n      }\n      case undefined: {\n        if (typeof mean !== 'number') {\n          throw new TypeError('mean must be a number');\n        }\n        return varianceAll(this, unbiased, mean);\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  standardDeviation(by, options) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    const variance = this.variance(by, options);\n    if (by === undefined) {\n      return Math.sqrt(variance);\n    } else {\n      for (let i = 0; i < variance.length; i++) {\n        variance[i] = Math.sqrt(variance[i]);\n      }\n      return variance;\n    }\n  }\n\n  center(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    const { center = this.mean(by) } = options;\n    switch (by) {\n      case 'row': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByRow(this, center);\n        return this;\n      }\n      case 'column': {\n        if (!Array.isArray(center)) {\n          throw new TypeError('center must be an array');\n        }\n        centerByColumn(this, center);\n        return this;\n      }\n      case undefined: {\n        if (typeof center !== 'number') {\n          throw new TypeError('center must be a number');\n        }\n        centerAll(this, center);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  scale(by, options = {}) {\n    if (typeof by === 'object') {\n      options = by;\n      by = undefined;\n    }\n    if (typeof options !== 'object') {\n      throw new TypeError('options must be an object');\n    }\n    let scale = options.scale;\n    switch (by) {\n      case 'row': {\n        if (scale === undefined) {\n          scale = getScaleByRow(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByRow(this, scale);\n        return this;\n      }\n      case 'column': {\n        if (scale === undefined) {\n          scale = getScaleByColumn(this);\n        } else if (!Array.isArray(scale)) {\n          throw new TypeError('scale must be an array');\n        }\n        scaleByColumn(this, scale);\n        return this;\n      }\n      case undefined: {\n        if (scale === undefined) {\n          scale = getScaleAll(this);\n        } else if (typeof scale !== 'number') {\n          throw new TypeError('scale must be a number');\n        }\n        scaleAll(this, scale);\n        return this;\n      }\n      default:\n        throw new Error(`invalid option: ${by}`);\n    }\n  }\n\n  toString(options) {\n    return inspectMatrixWithOptions(this, options);\n  }\n}\n\nAbstractMatrix.prototype.klass = 'Matrix';\nif (typeof Symbol !== 'undefined') {\n  AbstractMatrix.prototype[\n    Symbol.for('nodejs.util.inspect.custom')\n  ] = inspectMatrix;\n}\n\nfunction compareNumbers(a, b) {\n  return a - b;\n}\n\n// Synonyms\nAbstractMatrix.random = AbstractMatrix.rand;\nAbstractMatrix.randomInt = AbstractMatrix.randInt;\nAbstractMatrix.diagonal = AbstractMatrix.diag;\nAbstractMatrix.prototype.diagonal = AbstractMatrix.prototype.diag;\nAbstractMatrix.identity = AbstractMatrix.eye;\nAbstractMatrix.prototype.negate = AbstractMatrix.prototype.neg;\nAbstractMatrix.prototype.tensorProduct =\n  AbstractMatrix.prototype.kroneckerProduct;\n\nexport default class Matrix extends AbstractMatrix {\n  constructor(nRows, nColumns) {\n    super();\n    if (Matrix.isMatrix(nRows)) {\n      return nRows.clone();\n    } else if (Number.isInteger(nRows) && nRows > 0) {\n      // Create an empty matrix\n      this.data = [];\n      if (Number.isInteger(nColumns) && nColumns > 0) {\n        for (let i = 0; i < nRows; i++) {\n          this.data.push(new Float64Array(nColumns));\n        }\n      } else {\n        throw new TypeError('nColumns must be a positive integer');\n      }\n    } else if (Array.isArray(nRows)) {\n      // Copy the values from the 2D array\n      const arrayData = nRows;\n      nRows = arrayData.length;\n      nColumns = arrayData[0].length;\n      if (typeof nColumns !== 'number' || nColumns === 0) {\n        throw new TypeError(\n          'Data must be a 2D array with at least one element',\n        );\n      }\n      this.data = [];\n      for (let i = 0; i < nRows; i++) {\n        if (arrayData[i].length !== nColumns) {\n          throw new RangeError('Inconsistent array dimensions');\n        }\n        this.data.push(Float64Array.from(arrayData[i]));\n      }\n    } else {\n      throw new TypeError(\n        'First argument must be a positive number or an array',\n      );\n    }\n    this.rows = nRows;\n    this.columns = nColumns;\n    return this;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n\n  removeRow(index) {\n    checkRowIndex(this, index);\n    if (this.rows === 1) {\n      throw new RangeError('A matrix cannot have less than one row');\n    }\n    this.data.splice(index, 1);\n    this.rows -= 1;\n    return this;\n  }\n\n  addRow(index, array) {\n    if (array === undefined) {\n      array = index;\n      index = this.rows;\n    }\n    checkRowIndex(this, index, true);\n    array = Float64Array.from(checkRowVector(this, array, true));\n    this.data.splice(index, 0, array);\n    this.rows += 1;\n    return this;\n  }\n\n  removeColumn(index) {\n    checkColumnIndex(this, index);\n    if (this.columns === 1) {\n      throw new RangeError('A matrix cannot have less than one column');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns - 1);\n      for (let j = 0; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      for (let j = index + 1; j < this.columns; j++) {\n        newRow[j - 1] = this.data[i][j];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns -= 1;\n    return this;\n  }\n\n  addColumn(index, array) {\n    if (typeof array === 'undefined') {\n      array = index;\n      index = this.columns;\n    }\n    checkColumnIndex(this, index, true);\n    array = checkColumnVector(this, array);\n    for (let i = 0; i < this.rows; i++) {\n      const newRow = new Float64Array(this.columns + 1);\n      let j = 0;\n      for (; j < index; j++) {\n        newRow[j] = this.data[i][j];\n      }\n      newRow[j++] = array[i];\n      for (; j < this.columns + 1; j++) {\n        newRow[j] = this.data[i][j - 1];\n      }\n      this.data[i] = newRow;\n    }\n    this.columns += 1;\n    return this;\n  }\n}\n\ninstallMathOperations(AbstractMatrix, Matrix);\n","import { newArray } from './util';\n\nexport function sumByRow(matrix) {\n  let sum = newArray(matrix.rows);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumByColumn(matrix) {\n  let sum = newArray(matrix.columns);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] += matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function sumAll(matrix) {\n  let v = 0;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v += matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function productByRow(matrix) {\n  let sum = newArray(matrix.rows, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[i] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productByColumn(matrix) {\n  let sum = newArray(matrix.columns, 1);\n  for (let i = 0; i < matrix.rows; ++i) {\n    for (let j = 0; j < matrix.columns; ++j) {\n      sum[j] *= matrix.get(i, j);\n    }\n  }\n  return sum;\n}\n\nexport function productAll(matrix) {\n  let v = 1;\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      v *= matrix.get(i, j);\n    }\n  }\n  return v;\n}\n\nexport function varianceByRow(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let i = 0; i < rows; i++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean[i];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / cols) / (cols - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / cols) / cols);\n    }\n  }\n  return variance;\n}\n\nexport function varianceByColumn(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const variance = [];\n\n  for (let j = 0; j < cols; j++) {\n    let sum1 = 0;\n    let sum2 = 0;\n    let x = 0;\n    for (let i = 0; i < rows; i++) {\n      x = matrix.get(i, j) - mean[j];\n      sum1 += x;\n      sum2 += x * x;\n    }\n    if (unbiased) {\n      variance.push((sum2 - (sum1 * sum1) / rows) / (rows - 1));\n    } else {\n      variance.push((sum2 - (sum1 * sum1) / rows) / rows);\n    }\n  }\n  return variance;\n}\n\nexport function varianceAll(matrix, unbiased, mean) {\n  const rows = matrix.rows;\n  const cols = matrix.columns;\n  const size = rows * cols;\n\n  let sum1 = 0;\n  let sum2 = 0;\n  let x = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      x = matrix.get(i, j) - mean;\n      sum1 += x;\n      sum2 += x * x;\n    }\n  }\n  if (unbiased) {\n    return (sum2 - (sum1 * sum1) / size) / (size - 1);\n  } else {\n    return (sum2 - (sum1 * sum1) / size) / size;\n  }\n}\n\nexport function centerByRow(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[i]);\n    }\n  }\n}\n\nexport function centerByColumn(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean[j]);\n    }\n  }\n}\n\nexport function centerAll(matrix, mean) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) - mean);\n    }\n  }\n}\n\nexport function getScaleByRow(matrix) {\n  const scale = [];\n  for (let i = 0; i < matrix.rows; i++) {\n    let sum = 0;\n    for (let j = 0; j < matrix.columns; j++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.columns - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByRow(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[i]);\n    }\n  }\n}\n\nexport function getScaleByColumn(matrix) {\n  const scale = [];\n  for (let j = 0; j < matrix.columns; j++) {\n    let sum = 0;\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / (matrix.rows - 1);\n    }\n    scale.push(Math.sqrt(sum));\n  }\n  return scale;\n}\n\nexport function scaleByColumn(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale[j]);\n    }\n  }\n}\n\nexport function getScaleAll(matrix) {\n  const divider = matrix.size - 1;\n  let sum = 0;\n  for (let j = 0; j < matrix.columns; j++) {\n    for (let i = 0; i < matrix.rows; i++) {\n      sum += Math.pow(matrix.get(i, j), 2) / divider;\n    }\n  }\n  return Math.sqrt(sum);\n}\n\nexport function scaleAll(matrix, scale) {\n  for (let i = 0; i < matrix.rows; i++) {\n    for (let j = 0; j < matrix.columns; j++) {\n      matrix.set(i, j, matrix.get(i, j) / scale);\n    }\n  }\n}\n","export function installMathOperations(AbstractMatrix, Matrix) {\n  AbstractMatrix.prototype.add = function add(value) {\n    if (typeof value === 'number') return this.addS(value);\n    return this.addM(value);\n  };\n\n  AbstractMatrix.prototype.addS = function addS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.addM = function addM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) + matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.add = function add(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.add(value);\n  };\n\n  AbstractMatrix.prototype.sub = function sub(value) {\n    if (typeof value === 'number') return this.subS(value);\n    return this.subM(value);\n  };\n\n  AbstractMatrix.prototype.subS = function subS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.subM = function subM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) - matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sub = function sub(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sub(value);\n  };\n  AbstractMatrix.prototype.subtract = AbstractMatrix.prototype.sub;\n  AbstractMatrix.prototype.subtractS = AbstractMatrix.prototype.subS;\n  AbstractMatrix.prototype.subtractM = AbstractMatrix.prototype.subM;\n  AbstractMatrix.subtract = AbstractMatrix.sub;\n\n  AbstractMatrix.prototype.mul = function mul(value) {\n    if (typeof value === 'number') return this.mulS(value);\n    return this.mulM(value);\n  };\n\n  AbstractMatrix.prototype.mulS = function mulS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.mulM = function mulM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) * matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mul = function mul(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mul(value);\n  };\n  AbstractMatrix.prototype.multiply = AbstractMatrix.prototype.mul;\n  AbstractMatrix.prototype.multiplyS = AbstractMatrix.prototype.mulS;\n  AbstractMatrix.prototype.multiplyM = AbstractMatrix.prototype.mulM;\n  AbstractMatrix.multiply = AbstractMatrix.mul;\n\n  AbstractMatrix.prototype.div = function div(value) {\n    if (typeof value === 'number') return this.divS(value);\n    return this.divM(value);\n  };\n\n  AbstractMatrix.prototype.divS = function divS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.divM = function divM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) / matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.div = function div(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.div(value);\n  };\n  AbstractMatrix.prototype.divide = AbstractMatrix.prototype.div;\n  AbstractMatrix.prototype.divideS = AbstractMatrix.prototype.divS;\n  AbstractMatrix.prototype.divideM = AbstractMatrix.prototype.divM;\n  AbstractMatrix.divide = AbstractMatrix.div;\n\n  AbstractMatrix.prototype.mod = function mod(value) {\n    if (typeof value === 'number') return this.modS(value);\n    return this.modM(value);\n  };\n\n  AbstractMatrix.prototype.modS = function modS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.modM = function modM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) % matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.mod = function mod(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.mod(value);\n  };\n  AbstractMatrix.prototype.modulus = AbstractMatrix.prototype.mod;\n  AbstractMatrix.prototype.modulusS = AbstractMatrix.prototype.modS;\n  AbstractMatrix.prototype.modulusM = AbstractMatrix.prototype.modM;\n  AbstractMatrix.modulus = AbstractMatrix.mod;\n\n  AbstractMatrix.prototype.and = function and(value) {\n    if (typeof value === 'number') return this.andS(value);\n    return this.andM(value);\n  };\n\n  AbstractMatrix.prototype.andS = function andS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.andM = function andM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) & matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.and = function and(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.and(value);\n  };\n\n  AbstractMatrix.prototype.or = function or(value) {\n    if (typeof value === 'number') return this.orS(value);\n    return this.orM(value);\n  };\n\n  AbstractMatrix.prototype.orS = function orS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.orM = function orM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) | matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.or = function or(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.or(value);\n  };\n\n  AbstractMatrix.prototype.xor = function xor(value) {\n    if (typeof value === 'number') return this.xorS(value);\n    return this.xorM(value);\n  };\n\n  AbstractMatrix.prototype.xorS = function xorS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.xorM = function xorM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) ^ matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.xor = function xor(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.xor(value);\n  };\n\n  AbstractMatrix.prototype.leftShift = function leftShift(value) {\n    if (typeof value === 'number') return this.leftShiftS(value);\n    return this.leftShiftM(value);\n  };\n\n  AbstractMatrix.prototype.leftShiftS = function leftShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.leftShiftM = function leftShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) << matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.leftShift = function leftShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.leftShift(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShift = function signPropagatingRightShift(value) {\n    if (typeof value === 'number') return this.signPropagatingRightShiftS(value);\n    return this.signPropagatingRightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftS = function signPropagatingRightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.signPropagatingRightShiftM = function signPropagatingRightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.signPropagatingRightShift = function signPropagatingRightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.signPropagatingRightShift(value);\n  };\n\n  AbstractMatrix.prototype.rightShift = function rightShift(value) {\n    if (typeof value === 'number') return this.rightShiftS(value);\n    return this.rightShiftM(value);\n  };\n\n  AbstractMatrix.prototype.rightShiftS = function rightShiftS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> value);\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.rightShiftM = function rightShiftM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, this.get(i, j) >>> matrix.get(i, j));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.rightShift = function rightShift(matrix, value) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.rightShift(value);\n  };\n  AbstractMatrix.prototype.zeroFillRightShift = AbstractMatrix.prototype.rightShift;\n  AbstractMatrix.prototype.zeroFillRightShiftS = AbstractMatrix.prototype.rightShiftS;\n  AbstractMatrix.prototype.zeroFillRightShiftM = AbstractMatrix.prototype.rightShiftM;\n  AbstractMatrix.zeroFillRightShift = AbstractMatrix.rightShift;\n\n  AbstractMatrix.prototype.not = function not() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, ~(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.not = function not(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.not();\n  };\n\n  AbstractMatrix.prototype.abs = function abs() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.abs(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.abs = function abs(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.abs();\n  };\n\n  AbstractMatrix.prototype.acos = function acos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acos = function acos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acos();\n  };\n\n  AbstractMatrix.prototype.acosh = function acosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.acosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.acosh = function acosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.acosh();\n  };\n\n  AbstractMatrix.prototype.asin = function asin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asin = function asin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asin();\n  };\n\n  AbstractMatrix.prototype.asinh = function asinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.asinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.asinh = function asinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.asinh();\n  };\n\n  AbstractMatrix.prototype.atan = function atan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atan = function atan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atan();\n  };\n\n  AbstractMatrix.prototype.atanh = function atanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.atanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.atanh = function atanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.atanh();\n  };\n\n  AbstractMatrix.prototype.cbrt = function cbrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cbrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cbrt = function cbrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cbrt();\n  };\n\n  AbstractMatrix.prototype.ceil = function ceil() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.ceil(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.ceil = function ceil(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.ceil();\n  };\n\n  AbstractMatrix.prototype.clz32 = function clz32() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.clz32(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.clz32 = function clz32(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.clz32();\n  };\n\n  AbstractMatrix.prototype.cos = function cos() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cos(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cos = function cos(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cos();\n  };\n\n  AbstractMatrix.prototype.cosh = function cosh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.cosh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.cosh = function cosh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.cosh();\n  };\n\n  AbstractMatrix.prototype.exp = function exp() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.exp(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.exp = function exp(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.exp();\n  };\n\n  AbstractMatrix.prototype.expm1 = function expm1() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.expm1(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.expm1 = function expm1(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.expm1();\n  };\n\n  AbstractMatrix.prototype.floor = function floor() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.floor(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.floor = function floor(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.floor();\n  };\n\n  AbstractMatrix.prototype.fround = function fround() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.fround(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.fround = function fround(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.fround();\n  };\n\n  AbstractMatrix.prototype.log = function log() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log = function log(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log();\n  };\n\n  AbstractMatrix.prototype.log1p = function log1p() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log1p(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log1p = function log1p(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log1p();\n  };\n\n  AbstractMatrix.prototype.log10 = function log10() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log10(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log10 = function log10(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log10();\n  };\n\n  AbstractMatrix.prototype.log2 = function log2() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.log2(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.log2 = function log2(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.log2();\n  };\n\n  AbstractMatrix.prototype.round = function round() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.round(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.round = function round(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.round();\n  };\n\n  AbstractMatrix.prototype.sign = function sign() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sign(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sign = function sign(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sign();\n  };\n\n  AbstractMatrix.prototype.sin = function sin() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sin(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sin = function sin(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sin();\n  };\n\n  AbstractMatrix.prototype.sinh = function sinh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sinh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sinh = function sinh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sinh();\n  };\n\n  AbstractMatrix.prototype.sqrt = function sqrt() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.sqrt(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.sqrt = function sqrt(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.sqrt();\n  };\n\n  AbstractMatrix.prototype.tan = function tan() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tan(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tan = function tan(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tan();\n  };\n\n  AbstractMatrix.prototype.tanh = function tanh() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.tanh(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.tanh = function tanh(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.tanh();\n  };\n\n  AbstractMatrix.prototype.trunc = function trunc() {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.trunc(this.get(i, j)));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.trunc = function trunc(matrix) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.trunc();\n  };\n\n  AbstractMatrix.pow = function pow(matrix, arg0) {\n    const newMatrix = new Matrix(matrix);\n    return newMatrix.pow(arg0);\n  };\n\n  AbstractMatrix.prototype.pow = function pow(value) {\n    if (typeof value === 'number') return this.powS(value);\n    return this.powM(value);\n  };\n\n  AbstractMatrix.prototype.powS = function powS(value) {\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), value));\n      }\n    }\n    return this;\n  };\n\n  AbstractMatrix.prototype.powM = function powM(matrix) {\n    matrix = Matrix.checkMatrix(matrix);\n    if (this.rows !== matrix.rows ||\n      this.columns !== matrix.columns) {\n      throw new RangeError('Matrices dimensions must be equal');\n    }\n    for (let i = 0; i < this.rows; i++) {\n      for (let j = 0; j < this.columns; j++) {\n        this.set(i, j, Math.pow(this.get(i, j), matrix.get(i, j)));\n      }\n    }\n    return this;\n  };\n}\n","import { AbstractMatrix } from '../matrix';\n\nexport default class WrapperMatrix2D extends AbstractMatrix {\n  constructor(data) {\n    super();\n    this.data = data;\n    this.rows = data.length;\n    this.columns = data[0].length;\n  }\n\n  set(rowIndex, columnIndex, value) {\n    this.data[rowIndex][columnIndex] = value;\n    return this;\n  }\n\n  get(rowIndex, columnIndex) {\n    return this.data[rowIndex][columnIndex];\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nexport default class LuDecomposition {\n  constructor(matrix) {\n    matrix = WrapperMatrix2D.checkMatrix(matrix);\n\n    let lu = matrix.clone();\n    let rows = lu.rows;\n    let columns = lu.columns;\n    let pivotVector = new Float64Array(rows);\n    let pivotSign = 1;\n    let i, j, k, p, s, t, v;\n    let LUcolj, kmax;\n\n    for (i = 0; i < rows; i++) {\n      pivotVector[i] = i;\n    }\n\n    LUcolj = new Float64Array(rows);\n\n    for (j = 0; j < columns; j++) {\n      for (i = 0; i < rows; i++) {\n        LUcolj[i] = lu.get(i, j);\n      }\n\n      for (i = 0; i < rows; i++) {\n        kmax = Math.min(i, j);\n        s = 0;\n        for (k = 0; k < kmax; k++) {\n          s += lu.get(i, k) * LUcolj[k];\n        }\n        LUcolj[i] -= s;\n        lu.set(i, j, LUcolj[i]);\n      }\n\n      p = j;\n      for (i = j + 1; i < rows; i++) {\n        if (Math.abs(LUcolj[i]) > Math.abs(LUcolj[p])) {\n          p = i;\n        }\n      }\n\n      if (p !== j) {\n        for (k = 0; k < columns; k++) {\n          t = lu.get(p, k);\n          lu.set(p, k, lu.get(j, k));\n          lu.set(j, k, t);\n        }\n\n        v = pivotVector[p];\n        pivotVector[p] = pivotVector[j];\n        pivotVector[j] = v;\n\n        pivotSign = -pivotSign;\n      }\n\n      if (j < rows && lu.get(j, j) !== 0) {\n        for (i = j + 1; i < rows; i++) {\n          lu.set(i, j, lu.get(i, j) / lu.get(j, j));\n        }\n      }\n    }\n\n    this.LU = lu;\n    this.pivotVector = pivotVector;\n    this.pivotSign = pivotSign;\n  }\n\n  isSingular() {\n    let data = this.LU;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      if (data.get(j, j) === 0) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let lu = this.LU;\n    let rows = lu.rows;\n\n    if (rows !== value.rows) {\n      throw new Error('Invalid matrix dimensions');\n    }\n    if (this.isSingular()) {\n      throw new Error('LU matrix is singular');\n    }\n\n    let count = value.columns;\n    let X = value.subMatrixRow(this.pivotVector, 0, count - 1);\n    let columns = lu.columns;\n    let i, j, k;\n\n    for (k = 0; k < columns; k++) {\n      for (i = k + 1; i < columns; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    for (k = columns - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / lu.get(k, k));\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * lu.get(i, k));\n        }\n      }\n    }\n    return X;\n  }\n\n  get determinant() {\n    let data = this.LU;\n    if (!data.isSquare()) {\n      throw new Error('Matrix must be square');\n    }\n    let determinant = this.pivotSign;\n    let col = data.columns;\n    for (let j = 0; j < col; j++) {\n      determinant *= data.get(j, j);\n    }\n    return determinant;\n  }\n\n  get lowerTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i > j) {\n          X.set(i, j, data.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, 1);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get upperTriangularMatrix() {\n    let data = this.LU;\n    let rows = data.rows;\n    let columns = data.columns;\n    let X = new Matrix(rows, columns);\n    for (let i = 0; i < rows; i++) {\n      for (let j = 0; j < columns; j++) {\n        if (i <= j) {\n          X.set(i, j, data.get(i, j));\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get pivotPermutationVector() {\n    return Array.from(this.pivotVector);\n  }\n}\n","export function hypotenuse(a, b) {\n  let r = 0;\n  if (Math.abs(a) > Math.abs(b)) {\n    r = b / a;\n    return Math.abs(a) * Math.sqrt(1 + r * r);\n  }\n  if (b !== 0) {\n    r = a / b;\n    return Math.abs(b) * Math.sqrt(1 + r * r);\n  }\n  return 0;\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class QrDecomposition {\n  constructor(value) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let qr = value.clone();\n    let m = value.rows;\n    let n = value.columns;\n    let rdiag = new Float64Array(n);\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      let nrm = 0;\n      for (i = k; i < m; i++) {\n        nrm = hypotenuse(nrm, qr.get(i, k));\n      }\n      if (nrm !== 0) {\n        if (qr.get(k, k) < 0) {\n          nrm = -nrm;\n        }\n        for (i = k; i < m; i++) {\n          qr.set(i, k, qr.get(i, k) / nrm);\n        }\n        qr.set(k, k, qr.get(k, k) + 1);\n        for (j = k + 1; j < n; j++) {\n          s = 0;\n          for (i = k; i < m; i++) {\n            s += qr.get(i, k) * qr.get(i, j);\n          }\n          s = -s / qr.get(k, k);\n          for (i = k; i < m; i++) {\n            qr.set(i, j, qr.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n      rdiag[k] = -nrm;\n    }\n\n    this.QR = qr;\n    this.Rdiag = rdiag;\n  }\n\n  solve(value) {\n    value = Matrix.checkMatrix(value);\n\n    let qr = this.QR;\n    let m = qr.rows;\n\n    if (value.rows !== m) {\n      throw new Error('Matrix row dimensions must agree');\n    }\n    if (!this.isFullRank()) {\n      throw new Error('Matrix is rank deficient');\n    }\n\n    let count = value.columns;\n    let X = value.clone();\n    let n = qr.columns;\n    let i, j, k, s;\n\n    for (k = 0; k < n; k++) {\n      for (j = 0; j < count; j++) {\n        s = 0;\n        for (i = k; i < m; i++) {\n          s += qr.get(i, k) * X.get(i, j);\n        }\n        s = -s / qr.get(k, k);\n        for (i = k; i < m; i++) {\n          X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n        }\n      }\n    }\n    for (k = n - 1; k >= 0; k--) {\n      for (j = 0; j < count; j++) {\n        X.set(k, j, X.get(k, j) / this.Rdiag[k]);\n      }\n      for (i = 0; i < k; i++) {\n        for (j = 0; j < count; j++) {\n          X.set(i, j, X.get(i, j) - X.get(k, j) * qr.get(i, k));\n        }\n      }\n    }\n\n    return X.subMatrix(0, n - 1, 0, count - 1);\n  }\n\n  isFullRank() {\n    let columns = this.QR.columns;\n    for (let i = 0; i < columns; i++) {\n      if (this.Rdiag[i] === 0) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  get upperTriangularMatrix() {\n    let qr = this.QR;\n    let n = qr.columns;\n    let X = new Matrix(n, n);\n    let i, j;\n    for (i = 0; i < n; i++) {\n      for (j = 0; j < n; j++) {\n        if (i < j) {\n          X.set(i, j, qr.get(i, j));\n        } else if (i === j) {\n          X.set(i, j, this.Rdiag[i]);\n        } else {\n          X.set(i, j, 0);\n        }\n      }\n    }\n    return X;\n  }\n\n  get orthogonalMatrix() {\n    let qr = this.QR;\n    let rows = qr.rows;\n    let columns = qr.columns;\n    let X = new Matrix(rows, columns);\n    let i, j, k, s;\n\n    for (k = columns - 1; k >= 0; k--) {\n      for (i = 0; i < rows; i++) {\n        X.set(i, k, 0);\n      }\n      X.set(k, k, 1);\n      for (j = k; j < columns; j++) {\n        if (qr.get(k, k) !== 0) {\n          s = 0;\n          for (i = k; i < rows; i++) {\n            s += qr.get(i, k) * X.get(i, j);\n          }\n\n          s = -s / qr.get(k, k);\n\n          for (i = k; i < rows; i++) {\n            X.set(i, j, X.get(i, j) + s * qr.get(i, k));\n          }\n        }\n      }\n    }\n    return X;\n  }\n}\n","import Matrix from '../matrix';\nimport WrapperMatrix2D from '../wrap/WrapperMatrix2D';\n\nimport { hypotenuse } from './util';\n\nexport default class SingularValueDecomposition {\n  constructor(value, options = {}) {\n    value = WrapperMatrix2D.checkMatrix(value);\n\n    let m = value.rows;\n    let n = value.columns;\n\n    const {\n      computeLeftSingularVectors = true,\n      computeRightSingularVectors = true,\n      autoTranspose = false,\n    } = options;\n\n    let wantu = Boolean(computeLeftSingularVectors);\n    let wantv = Boolean(computeRightSingularVectors);\n\n    let swapped = false;\n    let a;\n    if (m < n) {\n      if (!autoTranspose) {\n        a = value.clone();\n        // eslint-disable-next-line no-console\n        console.warn(\n          'Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose',\n        );\n      } else {\n        a = value.transpose();\n        m = a.rows;\n        n = a.columns;\n        swapped = true;\n        let aux = wantu;\n        wantu = wantv;\n        wantv = aux;\n      }\n    } else {\n      a = value.clone();\n    }\n\n    let nu = Math.min(m, n);\n    let ni = Math.min(m + 1, n);\n    let s = new Float64Array(ni);\n    let U = new Matrix(m, nu);\n    let V = new Matrix(n, n);\n\n    let e = new Float64Array(n);\n    let work = new Float64Array(m);\n\n    let si = new Float64Array(ni);\n    for (let i = 0; i < ni; i++) si[i] = i;\n\n    let nct = Math.min(m - 1, n);\n    let nrt = Math.max(0, Math.min(n - 2, m));\n    let mrc = Math.max(nct, nrt);\n\n    for (let k = 0; k < mrc; k++) {\n      if (k < nct) {\n        s[k] = 0;\n        for (let i = k; i < m; i++) {\n          s[k] = hypotenuse(s[k], a.get(i, k));\n        }\n        if (s[k] !== 0) {\n          if (a.get(k, k) < 0) {\n            s[k] = -s[k];\n          }\n          for (let i = k; i < m; i++) {\n            a.set(i, k, a.get(i, k) / s[k]);\n          }\n          a.set(k, k, a.get(k, k) + 1);\n        }\n        s[k] = -s[k];\n      }\n\n      for (let j = k + 1; j < n; j++) {\n        if (k < nct && s[k] !== 0) {\n          let t = 0;\n          for (let i = k; i < m; i++) {\n            t += a.get(i, k) * a.get(i, j);\n          }\n          t = -t / a.get(k, k);\n          for (let i = k; i < m; i++) {\n            a.set(i, j, a.get(i, j) + t * a.get(i, k));\n          }\n        }\n        e[j] = a.get(k, j);\n      }\n\n      if (wantu && k < nct) {\n        for (let i = k; i < m; i++) {\n          U.set(i, k, a.get(i, k));\n        }\n      }\n\n      if (k < nrt) {\n        e[k] = 0;\n        for (let i = k + 1; i < n; i++) {\n          e[k] = hypotenuse(e[k], e[i]);\n        }\n        if (e[k] !== 0) {\n          if (e[k + 1] < 0) {\n            e[k] = 0 - e[k];\n          }\n          for (let i = k + 1; i < n; i++) {\n            e[i] /= e[k];\n          }\n          e[k + 1] += 1;\n        }\n        e[k] = -e[k];\n        if (k + 1 < m && e[k] !== 0) {\n          for (let i = k + 1; i < m; i++) {\n            work[i] = 0;\n          }\n          for (let i = k + 1; i < m; i++) {\n            for (let j = k + 1; j < n; j++) {\n              work[i] += e[j] * a.get(i, j);\n            }\n          }\n          for (let j = k + 1; j < n; j++) {\n            let t = -e[j] / e[k + 1];\n            for (let i = k + 1; i < m; i++) {\n              a.set(i, j, a.get(i, j) + t * work[i]);\n            }\n          }\n        }\n        if (wantv) {\n          for (let i = k + 1; i < n; i++) {\n            V.set(i, k, e[i]);\n          }\n        }\n      }\n    }\n\n    let p = Math.min(n, m + 1);\n    if (nct < n) {\n      s[nct] = a.get(nct, nct);\n    }\n    if (m < p) {\n      s[p - 1] = 0;\n    }\n    if (nrt + 1 < p) {\n      e[nrt] = a.get(nrt, p - 1);\n    }\n    e[p - 1] = 0;\n\n    if (wantu) {\n      for (let j = nct; j < nu; j++) {\n        for (let i = 0; i < m; i++) {\n          U.set(i, j, 0);\n        }\n        U.set(j, j, 1);\n      }\n      for (let k = nct - 1; k >= 0; k--) {\n        if (s[k] !== 0) {\n          for (let j = k + 1; j < nu; j++) {\n            let t = 0;\n            for (let i = k; i < m; i++) {\n              t += U.get(i, k) * U.get(i, j);\n            }\n            t = -t / U.get(k, k);\n            for (let i = k; i < m; i++) {\n              U.set(i, j, U.get(i, j) + t * U.get(i, k));\n            }\n          }\n          for (let i = k; i < m; i++) {\n            U.set(i, k, -U.get(i, k));\n          }\n          U.set(k, k, 1 + U.get(k, k));\n          for (let i = 0; i < k - 1; i++) {\n            U.set(i, k, 0);\n          }\n        } else {\n          for (let i = 0; i < m; i++) {\n            U.set(i, k, 0);\n          }\n          U.set(k, k, 1);\n        }\n      }\n    }\n\n    if (wantv) {\n      for (let k = n - 1; k >= 0; k--) {\n        if (k < nrt && e[k] !== 0) {\n          for (let j = k + 1; j < n; j++) {\n            let t = 0;\n            for (let i = k + 1; i < n; i++) {\n              t += V.get(i, k) * V.get(i, j);\n            }\n            t = -t / V.get(k + 1, k);\n            for (let i = k + 1; i < n; i++) {\n              V.set(i, j, V.get(i, j) + t * V.get(i, k));\n            }\n          }\n        }\n        for (let i = 0; i < n; i++) {\n          V.set(i, k, 0);\n        }\n        V.set(k, k, 1);\n      }\n    }\n\n    let pp = p - 1;\n    let iter = 0;\n    let eps = Number.EPSILON;\n    while (p > 0) {\n      let k, kase;\n      for (k = p - 2; k >= -1; k--) {\n        if (k === -1) {\n          break;\n        }\n        const alpha =\n          Number.MIN_VALUE + eps * Math.abs(s[k] + Math.abs(s[k + 1]));\n        if (Math.abs(e[k]) <= alpha || Number.isNaN(e[k])) {\n          e[k] = 0;\n          break;\n        }\n      }\n      if (k === p - 2) {\n        kase = 4;\n      } else {\n        let ks;\n        for (ks = p - 1; ks >= k; ks--) {\n          if (ks === k) {\n            break;\n          }\n          let t =\n            (ks !== p ? Math.abs(e[ks]) : 0) +\n            (ks !== k + 1 ? Math.abs(e[ks - 1]) : 0);\n          if (Math.abs(s[ks]) <= eps * t) {\n            s[ks] = 0;\n            break;\n          }\n        }\n        if (ks === k) {\n          kase = 3;\n        } else if (ks === p - 1) {\n          kase = 1;\n        } else {\n          kase = 2;\n          k = ks;\n        }\n      }\n\n      k++;\n\n      switch (kase) {\n        case 1: {\n          let f = e[p - 2];\n          e[p - 2] = 0;\n          for (let j = p - 2; j >= k; j--) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            if (j !== k) {\n              f = -sn * e[j - 1];\n              e[j - 1] = cs * e[j - 1];\n            }\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, p - 1);\n                V.set(i, p - 1, -sn * V.get(i, j) + cs * V.get(i, p - 1));\n                V.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 2: {\n          let f = e[k - 1];\n          e[k - 1] = 0;\n          for (let j = k; j < p; j++) {\n            let t = hypotenuse(s[j], f);\n            let cs = s[j] / t;\n            let sn = f / t;\n            s[j] = t;\n            f = -sn * e[j];\n            e[j] = cs * e[j];\n            if (wantu) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, k - 1);\n                U.set(i, k - 1, -sn * U.get(i, j) + cs * U.get(i, k - 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          break;\n        }\n        case 3: {\n          const scale = Math.max(\n            Math.abs(s[p - 1]),\n            Math.abs(s[p - 2]),\n            Math.abs(e[p - 2]),\n            Math.abs(s[k]),\n            Math.abs(e[k]),\n          );\n          const sp = s[p - 1] / scale;\n          const spm1 = s[p - 2] / scale;\n          const epm1 = e[p - 2] / scale;\n          const sk = s[k] / scale;\n          const ek = e[k] / scale;\n          const b = ((spm1 + sp) * (spm1 - sp) + epm1 * epm1) / 2;\n          const c = sp * epm1 * (sp * epm1);\n          let shift = 0;\n          if (b !== 0 || c !== 0) {\n            if (b < 0) {\n              shift = 0 - Math.sqrt(b * b + c);\n            } else {\n              shift = Math.sqrt(b * b + c);\n            }\n            shift = c / (b + shift);\n          }\n          let f = (sk + sp) * (sk - sp) + shift;\n          let g = sk * ek;\n          for (let j = k; j < p - 1; j++) {\n            let t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            let cs = f / t;\n            let sn = g / t;\n            if (j !== k) {\n              e[j - 1] = t;\n            }\n            f = cs * s[j] + sn * e[j];\n            e[j] = cs * e[j] - sn * s[j];\n            g = sn * s[j + 1];\n            s[j + 1] = cs * s[j + 1];\n            if (wantv) {\n              for (let i = 0; i < n; i++) {\n                t = cs * V.get(i, j) + sn * V.get(i, j + 1);\n                V.set(i, j + 1, -sn * V.get(i, j) + cs * V.get(i, j + 1));\n                V.set(i, j, t);\n              }\n            }\n            t = hypotenuse(f, g);\n            if (t === 0) t = Number.MIN_VALUE;\n            cs = f / t;\n            sn = g / t;\n            s[j] = t;\n            f = cs * e[j] + sn * s[j + 1];\n            s[j + 1] = -sn * e[j] + cs * s[j + 1];\n            g = sn * e[j + 1];\n            e[j + 1] = cs * e[j + 1];\n            if (wantu && j < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = cs * U.get(i, j) + sn * U.get(i, j + 1);\n                U.set(i, j + 1, -sn * U.get(i, j) + cs * U.get(i, j + 1));\n                U.set(i, j, t);\n              }\n            }\n          }\n          e[p - 2] = f;\n          iter = iter + 1;\n          break;\n        }\n        case 4: {\n          if (s[k] <= 0) {\n            s[k] = s[k] < 0 ? -s[k] : 0;\n            if (wantv) {\n              for (let i = 0; i <= pp; i++) {\n                V.set(i, k, -V.get(i, k));\n              }\n            }\n          }\n          while (k < pp) {\n            if (s[k] >= s[k + 1]) {\n              break;\n            }\n            let t = s[k];\n            s[k] = s[k + 1];\n            s[k + 1] = t;\n            if (wantv && k < n - 1) {\n              for (let i = 0; i < n; i++) {\n                t = V.get(i, k + 1);\n                V.set(i, k + 1, V.get(i, k));\n                V.set(i, k, t);\n              }\n            }\n            if (wantu && k < m - 1) {\n              for (let i = 0; i < m; i++) {\n                t = U.get(i, k + 1);\n                U.set(i, k + 1, U.get(i, k));\n                U.set(i, k, t);\n              }\n            }\n            k++;\n          }\n          iter = 0;\n          p--;\n          break;\n        }\n        // no default\n      }\n    }\n\n    if (swapped) {\n      let tmp = V;\n      V = U;\n      U = tmp;\n    }\n\n    this.m = m;\n    this.n = n;\n    this.s = s;\n    this.U = U;\n    this.V = V;\n  }\n\n  solve(value) {\n    let Y = value;\n    let e = this.threshold;\n    let scols = this.s.length;\n    let Ls = Matrix.zeros(scols, scols);\n\n    for (let i = 0; i < scols; i++) {\n      if (Math.abs(this.s[i]) <= e) {\n        Ls.set(i, i, 0);\n      } else {\n        Ls.set(i, i, 1 / this.s[i]);\n      }\n    }\n\n    let U = this.U;\n    let V = this.rightSingularVectors;\n\n    let VL = V.mmul(Ls);\n    let vrows = V.rows;\n    let urows = U.rows;\n    let VLU = Matrix.zeros(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < scols; k++) {\n          sum += VL.get(i, k) * U.get(j, k);\n        }\n        VLU.set(i, j, sum);\n      }\n    }\n\n    return VLU.mmul(Y);\n  }\n\n  solveForDiagonal(value) {\n    return this.solve(Matrix.diag(value));\n  }\n\n  inverse() {\n    let V = this.V;\n    let e = this.threshold;\n    let vrows = V.rows;\n    let vcols = V.columns;\n    let X = new Matrix(vrows, this.s.length);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < vcols; j++) {\n        if (Math.abs(this.s[j]) > e) {\n          X.set(i, j, V.get(i, j) / this.s[j]);\n        }\n      }\n    }\n\n    let U = this.U;\n\n    let urows = U.rows;\n    let ucols = U.columns;\n    let Y = new Matrix(vrows, urows);\n\n    for (let i = 0; i < vrows; i++) {\n      for (let j = 0; j < urows; j++) {\n        let sum = 0;\n        for (let k = 0; k < ucols; k++) {\n          sum += X.get(i, k) * U.get(j, k);\n        }\n        Y.set(i, j, sum);\n      }\n    }\n\n    return Y;\n  }\n\n  get condition() {\n    return this.s[0] / this.s[Math.min(this.m, this.n) - 1];\n  }\n\n  get norm2() {\n    return this.s[0];\n  }\n\n  get rank() {\n    let tol = Math.max(this.m, this.n) * this.s[0] * Number.EPSILON;\n    let r = 0;\n    let s = this.s;\n    for (let i = 0, ii = s.length; i < ii; i++) {\n      if (s[i] > tol) {\n        r++;\n      }\n    }\n    return r;\n  }\n\n  get diagonal() {\n    return Array.from(this.s);\n  }\n\n  get threshold() {\n    return (Number.EPSILON / 2) * Math.max(this.m, this.n) * this.s[0];\n  }\n\n  get leftSingularVectors() {\n    return this.U;\n  }\n\n  get rightSingularVectors() {\n    return this.V;\n  }\n\n  get diagonalMatrix() {\n    return Matrix.diag(this.s);\n  }\n}\n","import LuDecomposition from './dc/lu';\nimport QrDecomposition from './dc/qr';\nimport SingularValueDecomposition from './dc/svd';\nimport Matrix from './matrix';\nimport WrapperMatrix2D from './wrap/WrapperMatrix2D';\n\nexport function inverse(matrix, useSVD = false) {\n  matrix = WrapperMatrix2D.checkMatrix(matrix);\n  if (useSVD) {\n    return new SingularValueDecomposition(matrix).inverse();\n  } else {\n    return solve(matrix, Matrix.eye(matrix.rows));\n  }\n}\n\nexport function solve(leftHandSide, rightHandSide, useSVD = false) {\n  leftHandSide = WrapperMatrix2D.checkMatrix(leftHandSide);\n  rightHandSide = WrapperMatrix2D.checkMatrix(rightHandSide);\n  if (useSVD) {\n    return new SingularValueDecomposition(leftHandSide).solve(rightHandSide);\n  } else {\n    return leftHandSide.isSquare()\n      ? new LuDecomposition(leftHandSide).solve(rightHandSide)\n      : new QrDecomposition(leftHandSide).solve(rightHandSide);\n  }\n}\n","import { inverse, Matrix } from 'ml-matrix';\n\n/**\n * Difference of the matrix function over the parameters\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} paramFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Matrix}\n */\nfunction gradientFunction(\n  data,\n  evaluatedData,\n  params,\n  gradientDifference,\n  paramFunction,\n) {\n  const n = params.length;\n  const m = data.x.length;\n\n  let ans = new Array(n);\n\n  for (let param = 0; param < n; param++) {\n    ans[param] = new Array(m);\n    let auxParams = params.slice();\n    auxParams[param] += gradientDifference;\n    let funcParam = paramFunction(auxParams);\n\n    for (let point = 0; point < m; point++) {\n      ans[param][point] = evaluatedData[point] - funcParam(data.x[point]);\n    }\n  }\n  return new Matrix(ans);\n}\n\n/**\n * Matrix function over the samples\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} evaluatedData - Array of previous evaluated function values\n * @return {Matrix}\n */\nfunction matrixFunction(data, evaluatedData) {\n  const m = data.x.length;\n\n  let ans = new Array(m);\n\n  for (let point = 0; point < m; point++) {\n    ans[point] = [data.y[point] - evaluatedData[point]];\n  }\n\n  return new Matrix(ans);\n}\n\n/**\n * Iteration for Levenberg-Marquardt\n * @ignore\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {Array<number>} params - Array of previous parameter values\n * @param {number} damping - Levenberg-Marquardt parameter\n * @param {number} gradientDifference - Adjustment for decrease the damping parameter\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @return {Array<number>}\n */\nexport default function step(\n  data,\n  params,\n  damping,\n  gradientDifference,\n  parameterizedFunction,\n) {\n  let value = damping * gradientDifference * gradientDifference;\n  let identity = Matrix.eye(params.length, params.length, value);\n\n  const func = parameterizedFunction(params);\n\n  let evaluatedData = new Float64Array(data.x.length);\n  for (let i = 0; i < data.x.length; i++) {\n    evaluatedData[i] = func(data.x[i]);\n  }\n\n  let gradientFunc = gradientFunction(\n    data,\n    evaluatedData,\n    params,\n    gradientDifference,\n    parameterizedFunction,\n  );\n  let matrixFunc = matrixFunction(data, evaluatedData);\n  let inverseMatrix = inverse(\n    identity.add(gradientFunc.mmul(gradientFunc.transpose())),\n  );\n\n  params = new Matrix([params]);\n  params = params.sub(\n    inverseMatrix\n      .mmul(gradientFunc)\n      .mmul(matrixFunc)\n      .mul(gradientDifference)\n      .transpose(),\n  );\n\n  return params.to1DArray();\n}\n","import isArray from 'is-any-array';\n\nimport errorCalculation from './errorCalculation';\nimport step from './step';\n\n/**\n * Curve fitting algorithm\n * @param {{x:Array<number>, y:Array<number>}} data - Array of points to fit in the format [x1, x2, ... ], [y1, y2, ... ]\n * @param {function} parameterizedFunction - The parameters and returns a function with the independent variable as a parameter\n * @param {object} [options] - Options object\n * @param {number} [options.damping] - Levenberg-Marquardt parameter\n * @param {number} [options.gradientDifference = 10e-2] - Adjustment for decrease the damping parameter\n * @param {Array<number>} [options.minValues] - Minimum allowed values for parameters\n * @param {Array<number>} [options.maxValues] - Maximum allowed values for parameters\n * @param {Array<number>} [options.initialValues] - Array of initial parameter values\n * @param {number} [options.maxIterations = 100] - Maximum of allowed iterations\n * @param {number} [options.errorTolerance = 10e-3] - Minimum uncertainty allowed for each point\n * @return {{parameterValues: Array<number>, parameterError: number, iterations: number}}\n */\nexport default function levenbergMarquardt(\n  data,\n  parameterizedFunction,\n  options = {},\n) {\n  let {\n    maxIterations = 100,\n    gradientDifference = 10e-2,\n    damping = 0,\n    errorTolerance = 10e-3,\n    minValues,\n    maxValues,\n    initialValues,\n  } = options;\n\n  if (damping <= 0) {\n    throw new Error('The damping option must be a positive number');\n  } else if (!data.x || !data.y) {\n    throw new Error('The data parameter must have x and y elements');\n  } else if (\n    !isArray(data.x) ||\n    data.x.length < 2 ||\n    !isArray(data.y) ||\n    data.y.length < 2\n  ) {\n    throw new Error(\n      'The data parameter elements must be an array with more than 2 points',\n    );\n  } else if (data.x.length !== data.y.length) {\n    throw new Error('The data parameter elements must have the same size');\n  }\n\n  let parameters =\n    initialValues || new Array(parameterizedFunction.length).fill(1);\n  let parLen = parameters.length;\n  maxValues = maxValues || new Array(parLen).fill(Number.MAX_SAFE_INTEGER);\n  minValues = minValues || new Array(parLen).fill(Number.MIN_SAFE_INTEGER);\n\n  if (maxValues.length !== minValues.length) {\n    throw new Error('minValues and maxValues must be the same size');\n  }\n\n  if (!isArray(parameters)) {\n    throw new Error('initialValues must be an array');\n  }\n\n  let error = errorCalculation(data, parameters, parameterizedFunction);\n\n  let converged = error <= errorTolerance;\n\n  let iteration;\n  for (iteration = 0; iteration < maxIterations && !converged; iteration++) {\n    parameters = step(\n      data,\n      parameters,\n      damping,\n      gradientDifference,\n      parameterizedFunction,\n    );\n\n    for (let k = 0; k < parLen; k++) {\n      parameters[k] = Math.min(\n        Math.max(minValues[k], parameters[k]),\n        maxValues[k],\n      );\n    }\n\n    error = errorCalculation(data, parameters, parameterizedFunction);\n    if (isNaN(error)) break;\n    converged = error <= errorTolerance;\n  }\n\n  return {\n    parameterValues: parameters,\n    parameterError: error,\n    iterations: iteration,\n  };\n}\n","/**\n * This function calculates the spectrum as a sum of gaussian functions. The Gaussian\n * parameters are divided in 3 batches. 1st: centers; 2nd: height; 3th: std's;\n * @param t Ordinate values\n * @param p Gaussian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\nexport function sumOfGaussians(p) {\n  return function (t) {\n    let nL = p.length / 3;\n    let factor;\n    let rows = t.length;\n    let result = rows === undefined ? 0 : new Float64Array(rows).fill(0);\n    for (let i = 0; i < nL; i++) {\n      factor = Math.pow(p[i + nL * 2], 2) * 2;\n      if (rows === undefined) {\n        result += p[i + nL] * Math.exp(-Math.pow(t - p[i], 2) / factor);\n      } else {\n        for (let j = 0; j < rows; j++) {\n          result[j] += p[i + nL] * Math.exp(-Math.pow(t[j] - p[i], 2) / factor);\n        }\n      }\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { sumOfGaussians } from './sumOfGaussians';\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nexport function optimizeGaussianSum(xy, group, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n  let nL = group.length;\n  let pInit = new Float64Array(nL * 3);\n  let pMin = new Float64Array(nL * 3);\n  let pMax = new Float64Array(nL * 3);\n  let dt = Math.abs(t[0] - t[1]);\n\n  for (let i = 0; i < nL; i++) {\n    pInit[i] = group[i].x;\n    pInit[i + nL] = group[i].y / maxY;\n    pInit[i + 2 * nL] = group[i].width;\n\n    pMin[i] = group[i].x - dt;\n    pMin[i + nL] = 0;\n    pMin[i + 2 * nL] = group[i].width / 4;\n\n    pMax[i] = group[i].x + dt;\n    pMax[i + nL] = (group[i].y * 1.2) / maxY;\n    pMax[i + 2 * nL] = group[i].width * 4;\n  }\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n  let result = new Array(nL);\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n\n  opts = Object.assign({}, lmOptions, opts);\n\n  let pFit = LM(data, sumOfGaussians, opts);\n  for (let i = 0; i < nL; i++) {\n    result[i] = {\n      parameters: [\n        pFit.parameterValues[i],\n        pFit.parameterValues[i + nL] * maxY,\n        pFit.parameterValues[i + nL * 2],\n      ],\n      error: pFit.parameterError,\n    };\n  }\n  return result;\n}\n","/**\n * Single 3 parameter gaussian function\n * @param t Ordinate values\n * @param p Gaussian parameters [mean, height, std]\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\n\nexport function singleGaussian(p) {\n  return function (t) {\n    let factor2 = (p[2] * p[2]) / 2;\n    let rows = t.length;\n    if (!rows) return p[1] * Math.exp((-(t - p[0]) * (t - p[0])) / factor2);\n    let result = new Float64Array(t.length);\n    for (let i = 0; i < t.length; i++) {\n      result[i] = p[1] * Math.exp((-(t[i] - p[0]) * (t[i] - p[0])) / factor2);\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { singleGaussian } from './singleGaussian';\n\n/**\n * Fits a set of points to a gaussian bell. Returns the mean of the peak, the std and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nexport function optimizeSingleGaussian(xy, peak, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n  let dt = Math.abs(t[0] - t[1]);\n  let pInit = new Float64Array([peak.x, 1, peak.width]);\n  let pMin = new Float64Array([peak.x - dt, 0, peak.width / 4]);\n  let pMax = new Float64Array([peak.x + dt, 1.25, peak.width * 4]);\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n\n  opts = Object.assign({}, lmOptions, opts);\n  let pFit = LM(data, singleGaussian, opts);\n  return {\n    parameters: [\n      pFit.parameterValues[0],\n      pFit.parameterValues[1] * maxY,\n      pFit.parameterValues[2],\n    ],\n    error: pFit.parameterError,\n  };\n}\n","/**\n * This function calculates the spectrum as a sum of lorentzian functions. The Lorentzian\n * parameters are divided in 3 batches. 1st: centers; 2nd: heights; 3th: widths;\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @returns {*}\n */\n\nexport function sumOfLorentzians(p) {\n  return function (t) {\n    let nL = p.length / 3;\n    let factor;\n    let p2;\n    let rows = t.length;\n    let result = rows === undefined ? 0 : new Float64Array(rows).fill(0);\n    for (let i = 0; i < nL; i++) {\n      p2 = Math.pow(p[i + nL * 2] / 2, 2);\n      factor = p[i + nL] * p2;\n      if (rows === undefined) {\n        result += factor / (Math.pow(t - p[i], 2) + p2);\n      } else {\n        for (let j = 0; j < rows; j++) {\n          result[j] += factor / (Math.pow(t[j] - p[i], 2) + p2);\n        }\n      }\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { sumOfLorentzians } from './sumOfLorentzians';\n\n/**\n *\n * @param xy A two column matrix containing the x and y data to be fitted\n * @param group A set of initial lorentzian parameters to be optimized [center, heigth, half_width_at_half_height]\n * @returns {Array} A set of final lorentzian parameters [center, heigth, hwhh*2]\n */\nexport function optimizeLorentzianSum(xy, group, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n\n  let nL = group.length;\n  let pInit = new Float64Array(nL * 3);\n  let pMin = new Float64Array(nL * 3);\n  let pMax = new Float64Array(nL * 3);\n  let dt = Math.abs(t[0] - t[1]);\n\n  for (let i = 0; i < nL; i++) {\n    pInit[i] = group[i].x;\n    pInit[i + nL] = 1;\n    pInit[i + 2 * nL] = group[i].width;\n\n    pMin[i] = group[i].x - dt;\n    pMin[i + nL] = 0;\n    pMin[i + 2 * nL] = group[i].width / 4;\n\n    pMax[i] = group[i].x + dt;\n    pMax[i + nL] = 1.5;\n    pMax[i + 2 * nL] = group[i].width * 4;\n  }\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n\n  let result = new Array(nL);\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n\n  opts = Object.assign({}, lmOptions, opts);\n\n  let pFit = LM(data, sumOfLorentzians, opts);\n  for (let i = 0; i < nL; i++) {\n    result[i] = {\n      parameters: [\n        pFit.parameterValues[i],\n        pFit.parameterValues[i + nL] * maxY,\n        pFit.parameterValues[i + nL * 2],\n      ],\n      error: pFit.parameterError,\n    };\n  }\n  return result;\n}\n","/**\n * Single 4 parameter lorentzian function\n * @param t Ordinate values\n * @param p Lorentzian parameters\n * @param c Constant parameters(Not used)\n * @returns {*}\n */\n\nexport function singleLorentzian(p) {\n  return function (t) {\n    let factor = p[1] * Math.pow(p[2] / 2, 2);\n    let rows = t.length;\n    if (!rows) return factor / (Math.pow(t - p[0], 2) + Math.pow(p[2] / 2, 2));\n    let result = new Float64Array(rows);\n    for (let i = 0; i < rows; i++) {\n      result[i] = factor / (Math.pow(t[i] - p[0], 2) + Math.pow(p[2] / 2, 2));\n    }\n    return result;\n  };\n}\n","import LM from 'ml-levenberg-marquardt';\n\nimport { singleLorentzian } from './singleLorentzian';\n\n/**\n * * Fits a set of points to a Lorentzian function. Returns the center of the peak, the width at half height, and the height of the signal.\n * @param data,[y]\n * @returns {*[]}\n */\nexport function optimizeSingleLorentzian(xy, peak, opts = {}) {\n  let t = xy[0];\n  let yData = xy[1];\n  let maxY = Math.max(...yData);\n  yData.forEach((x, i, arr) => (arr[i] /= maxY));\n  let dt = Math.abs(t[0] - t[1]);\n  let pInit = new Float64Array([peak.x, 1, peak.width]);\n  let pMin = new Float64Array([peak.x - dt, 0.75, peak.width / 4]);\n  let pMax = new Float64Array([peak.x + dt, 1.25, peak.width * 4]);\n\n  let data = {\n    x: t,\n    y: yData,\n  };\n\n  let lmOptions = {\n    damping: 1.5,\n    initialValues: pInit,\n    minValues: pMin,\n    maxValues: pMax,\n    gradientDifference: dt / 10000,\n    maxIterations: 100,\n    errorTolerance: 10e-5,\n  };\n  opts = Object.assign({}, lmOptions, opts);\n  let pFit = LM(data, singleLorentzian, opts);\n  return {\n    parameters: [\n      pFit.parameterValues[0],\n      pFit.parameterValues[1] * maxY,\n      pFit.parameterValues[2],\n    ],\n    error: pFit.parameterError,\n  };\n}\n","import {\n  optimizeGaussianSum,\n  optimizeLorentzianSum,\n  optimizeSingleGaussian,\n  optimizeSingleLorentzian,\n} from 'ml-optimize-lorentzian';\n\nexport function optimizePeaks(peakList, x, y, options = {}) {\n  const {\n    functionName = 'gaussian',\n    factorWidth = 4,\n    optimizationOptions = {\n      damping: 1.5,\n      maxIterations: 100,\n      errorTolerance: 10e-5,\n    },\n  } = options;\n\n  let lastIndex = [0];\n  let groups = groupPeaks(peakList, factorWidth);\n  let result = [];\n  let factor = 1;\n  if (functionName === 'gaussian') {\n    factor = 1.17741;\n  } // From https://en.wikipedia.org/wiki/Gaussian_function#Properties\n  let sampling;\n  for (let i = 0; i < groups.length; i++) {\n    let peaks = groups[i].group;\n    if (peaks.length > 1) {\n      // Multiple peaks\n      sampling = sampleFunction(\n        groups[i].limits[0] - groups[i].limits[1],\n        groups[i].limits[0] + groups[i].limits[1],\n        x,\n        y,\n        lastIndex,\n      );\n      if (sampling[0].length > 5) {\n        let optPeaks = [];\n        if (functionName === 'gaussian') {\n          optPeaks = optimizeGaussianSum(sampling, peaks, optimizationOptions);\n        } else {\n          if (functionName === 'lorentzian') {\n            optPeaks = optimizeLorentzianSum(\n              sampling,\n              peaks,\n              optimizationOptions,\n            );\n          }\n        }\n\n        for (let j = 0; j < optPeaks.length; j++) {\n          let { parameters } = optPeaks[j];\n          result.push({\n            x: parameters[0],\n            y: parameters[1],\n            width: parameters[2] * factor,\n            index: peaks[j].index,\n          });\n        }\n      }\n    } else {\n      // Single peak\n      peaks = peaks[0];\n      sampling = sampleFunction(\n        peaks.x - factorWidth * peaks.width,\n        peaks.x + factorWidth * peaks.width,\n        x,\n        y,\n        lastIndex,\n      );\n\n      if (sampling[0].length > 5) {\n        let fitResult = [];\n        if (functionName === 'gaussian') {\n          fitResult = optimizeSingleGaussian(\n            [sampling[0], sampling[1]],\n            peaks,\n            optimizationOptions,\n          );\n        } else {\n          if (functionName === 'lorentzian') {\n            fitResult = optimizeSingleLorentzian(\n              [sampling[0], sampling[1]],\n              peaks,\n              optimizationOptions,\n            );\n          }\n        }\n\n        let { parameters } = fitResult;\n        result.push({\n          x: parameters[0],\n          y: parameters[1],\n          width: parameters[2] * factor,\n          index: peaks.index,\n        }); // From https://en.wikipedia.org/wiki/Gaussian_function#Properties}\n      }\n    }\n  }\n  return result;\n}\n\nfunction sampleFunction(from, to, x, y, lastIndex) {\n  let nbPoints = x.length;\n  let sampleX = [];\n  let sampleY = [];\n  let direction = Math.sign(x[1] - x[0]); // Direction of the derivative\n  if (direction === -1) {\n    lastIndex[0] = x.length - 1;\n  }\n\n  let delta = Math.abs(to - from) / 2;\n  let mid = (from + to) / 2;\n  let stop = false;\n  let index = lastIndex[0];\n  while (!stop && index < nbPoints && index >= 0) {\n    if (Math.abs(x[index] - mid) <= delta) {\n      sampleX.push(x[index]);\n      sampleY.push(y[index]);\n      index += direction;\n    } else {\n      // It is outside the range.\n      if (Math.sign(mid - x[index]) === 1) {\n        // We'll reach the mid going in the current direction\n        index += direction;\n      } else {\n        // There is not more peaks in the current range\n        stop = true;\n      }\n    }\n  }\n  lastIndex[0] = index;\n  return [sampleX, sampleY];\n}\n\nfunction groupPeaks(peakList, nL) {\n  let group = [];\n  let groups = [];\n  let limits = [peakList[0].x, nL * peakList[0].width];\n  let upperLimit, lowerLimit;\n  // Merge forward\n  for (let i = 0; i < peakList.length; i++) {\n    // If the 2 things overlaps\n    if (\n      Math.abs(peakList[i].x - limits[0]) <\n      nL * peakList[i].width + limits[1]\n    ) {\n      // Add the peak to the group\n      group.push(peakList[i]);\n      // Update the group limits\n      upperLimit = limits[0] + limits[1];\n      if (peakList[i].x + nL * peakList[i].width > upperLimit) {\n        upperLimit = peakList[i].x + nL * peakList[i].width;\n      }\n      lowerLimit = limits[0] - limits[1];\n      if (peakList[i].x - nL * peakList[i].width < lowerLimit) {\n        lowerLimit = peakList[i].x - nL * peakList[i].width;\n      }\n      limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2,\n      ];\n    } else {\n      groups.push({ limits: limits, group: group });\n      // var optmimalPeak = fitSpectrum(group,limits,spectrum);\n      group = [peakList[i]];\n      limits = [peakList[i].x, nL * peakList[i].width];\n    }\n  }\n  groups.push({ limits: limits, group: group });\n  // Merge backward\n  for (let i = groups.length - 2; i >= 0; i--) {\n    // The groups overlaps\n    if (\n      Math.abs(groups[i].limits[0] - groups[i + 1].limits[0]) <\n      (groups[i].limits[1] + groups[i + 1].limits[1]) / 2\n    ) {\n      for (let j = 0; j < groups[i + 1].group.length; j++) {\n        groups[i].group.push(groups[i + 1].group[j]);\n      }\n      upperLimit = groups[i].limits[0] + groups[i].limits[1];\n      if (groups[i + 1].limits[0] + groups[i + 1].limits[1] > upperLimit) {\n        upperLimit = groups[i + 1].limits[0] + groups[i + 1].limits[1];\n      }\n      lowerLimit = groups[i].limits[0] - groups[i].limits[1];\n      if (groups[i + 1].limits[0] - groups[i + 1].limits[1] < lowerLimit) {\n        lowerLimit = groups[i + 1].limits[0] - groups[i + 1].limits[1];\n      }\n\n      groups[i].limits = [\n        (upperLimit + lowerLimit) / 2,\n        Math.abs(upperLimit - lowerLimit) / 2,\n      ];\n\n      groups.splice(i + 1, 1);\n    }\n  }\n  return groups;\n}\n","/**\n * This method will allow to enlarge peaks and prevent overlap between peaks\n * Because peaks may not be symmetric after we add 2 properties, from and to.\n * @param {Array} peakList\n * @param {object} [options={}]\n * @param {number} [factor=2]\n * @param {boolean} [overlap=false] by default we don't allow overlap\n * @return {Array} peakList\n */\nexport function broadenPeaks(peakList, options = {}) {\n  const { factor = 2, overlap = false } = options;\n\n  for (let peak of peakList) {\n    if (!peak.right || !peak.left) {\n      peak.from = peak.x - (peak.width / 2) * factor;\n      peak.to = peak.x + (peak.width / 2) * factor;\n    } else {\n      peak.from = peak.x - (peak.x - peak.left.x) * factor;\n      peak.to = peak.x + (peak.right.x - peak.x) * factor;\n    }\n  }\n\n  if (!overlap) {\n    for (let i = 0; i < peakList.length - 1; i++) {\n      let peak = peakList[i];\n      let nextPeak = peakList[i + 1];\n      if (peak.to > nextPeak.from) {\n        peak.to = nextPeak.from = (peak.to + nextPeak.from) / 2;\n      }\n    }\n  }\n\n  for (let peak of peakList) {\n    peak.width = peak.to - peak.from;\n  }\n\n  return peakList;\n}\n","import { optimizeSingleLorentzian } from 'ml-optimize-lorentzian';\n\n/**\n * This function try to join the peaks that seems to belong to a broad signal in a single broad peak.\n * @param peakList\n * @param options\n */\nexport function joinBroadPeaks(peakList, options = {}) {\n  let width = options.width;\n  let broadLines = [];\n  // Optimize the possible broad lines\n  let max = 0;\n\n  let maxI = 0;\n\n  let count = 1;\n  for (let i = peakList.length - 1; i >= 0; i--) {\n    if (peakList[i].soft) {\n      broadLines.push(peakList.splice(i, 1)[0]);\n    }\n  }\n  // Push a feke peak\n  broadLines.push({ x: Number.MAX_VALUE });\n\n  let candidates = [[broadLines[0].x, broadLines[0].y]];\n  let indexes = [broadLines[0].index];\n\n  for (let i = 1; i < broadLines.length; i++) {\n    // console.log(broadLines[i-1].x+\" \"+broadLines[i].x);\n    if (Math.abs(broadLines[i - 1].x - broadLines[i].x) < width) {\n      candidates.push([broadLines[i].x, broadLines[i].y]);\n      if (broadLines[i].y > max) {\n        max = broadLines[i].y;\n        maxI = i;\n      }\n      indexes.push(broadLines[i].index);\n      count++;\n    } else {\n      if (count > 2) {\n        let fitted = optimizeSingleLorentzian(candidates, {\n          x: broadLines[maxI].x,\n          y: max,\n          width: Math.abs(\n            candidates[0][0] - candidates[candidates.length - 1][0],\n          ),\n        });\n        let { parameters } = fitted;\n        peakList.push({\n          x: parameters[0],\n          y: parameters[1],\n          width: parameters[2],\n          index: Math.floor(\n            indexes.reduce((a, b) => a + b, 0) / indexes.length,\n          ),\n          soft: false,\n        });\n      } else {\n        // Put back the candidates to the signals list\n        indexes.forEach((index) => {\n          peakList.push(broadLines[index]);\n        });\n      }\n      candidates = [[broadLines[i].x, broadLines[i].y]];\n      indexes = [i];\n      max = broadLines[i].y;\n      maxI = i;\n      count = 1;\n    }\n  }\n\n  peakList.sort(function (a, b) {\n    return a.x - b.x;\n  });\n\n  return peakList;\n}\n"],"names":["SavitzkyGolay","data","h","options","windowSize","derivative","polynomial","Number","isInteger","RangeError","length","console","warn","half","Math","floor","np","ans","Array","weights","m","n","s","t","j","Weight","fullWeights","hs","constantH","isArray","pow","i","wg1","wg2","d1","d2","l","getHs","wg","d","center","count","GramPoly","k","Grampoly","GenFact","a","b","gf","sum","isEqualSpaced","x","tmp","maxDx","minDx","MAX_SAFE_INTEGER","abs","getNoiseLevel","y","mean","stddev","averageDeviations","sort","determineRealTop","peakList","alpha","beta","gamma","p","currentPoint","index","log10","toString","Object","prototype","isAnyArray","object","call","endsWith","errorCalculation","parameters","parameterizedFunction","error","func","rescale","input","output","arguments","undefined","TypeError","currentMin","minValue","min","currentMax","maxValue","max","_options$min","autoMinMax","_options$max","factor","indent","repeat","indentData","inspectMatrixWithOptions","matrix","maxRows","maxColumns","maxNumSize","constructor","name","rows","columns","maxI","maxJ","result","line","push","formatNumber","get","join","inspectData","num","numStr","String","padEnd","precise","toPrecision","exponential","toExponential","eIndex","indexOf","e","slice","checkRowIndex","outer","checkColumnIndex","checkRowVector","vector","to1DArray","checkColumnVector","checkRowIndices","rowIndices","some","r","from","checkColumnIndices","columnIndices","c","checkRange","startRow","endRow","startColumn","endColumn","checkNumber","newArray","value","array","AbstractMatrix","newRows","newColumns","newData","newMatrix","Matrix","row","column","set","fill","random","interval","round","this","zeros","matrix1","matrix2","checkMatrix","isMatrix","klass","apply","callback","to2DArray","copy","toJSON","isRowVector","isColumnVector","isVector","isSquare","isSymmetric","isEchelonForm","previousColumn","checked","isReducedEchelonForm","echelonForm","clone","iMax","swapRows","reducedEchelonForm","maxRow","pivot","Error","setSubMatrix","neg","mulS","getRow","getRowVector","rowVector","setRow","row1","row2","temp","getColumn","getColumnVector","columnVector","setColumn","swapColumns","column1","column2","addRowVector","subRowVector","mulRowVector","divRowVector","addColumnVector","subColumnVector","mulColumnVector","divColumnVector","mulRow","mulColumn","v","maxIndex","idx","minIndex","maxRowIndex","minRow","minRowIndex","maxColumn","maxColumnIndex","minColumn","minColumnIndex","diag","norm","type","sqrt","cumulativeSum","dot","vector2","vector1","mmul","other","Bcolj","Float64Array","strassen2x2","a11","b11","a12","b12","a21","b21","a22","b22","m1","m2","m3","m4","m5","c00","c01","c10","c11","strassen3x3","a00","a01","a02","a10","a20","b00","b01","b02","b10","b20","m6","m7","m8","m9","m12","m13","m14","m15","m16","m17","m18","c02","c12","c20","c21","c22","mmulStrassen","r1","c1","r2","c2","embed","mat","cols","resultat","blockMult","halfRows","parseInt","halfCols","subMatrix","add","sub","scaleRows","isFinite","scaleColumns","flipRows","middle","ceil","first","last","flipColumns","kroneckerProduct","q","transpose","sortRows","compareFunction","compareNumbers","sortColumns","subMatrixRow","indices","subMatrixColumn","selection","checkIndices","rowIndex","columnIndex","trace","by","sumByRow","sumByColumn","sumAll","product","productByRow","productByColumn","productAll","size","variance","unbiased","sum1","sum2","varianceByRow","varianceByColumn","varianceAll","standardDeviation","centerByRow","centerByColumn","centerAll","scale","getScaleByRow","scaleByRow","getScaleByColumn","scaleByColumn","divider","getScaleAll","scaleAll","Symbol","for","rand","randomInt","randInt","diagonal","identity","eye","negate","tensorProduct","nRows","nColumns","arrayData","removeRow","splice","addRow","removeColumn","newRow","addColumn","addS","addM","subS","subM","subtract","subtractS","subtractM","mul","mulM","multiply","multiplyS","multiplyM","div","divS","divM","divide","divideS","divideM","mod","modS","modM","modulus","modulusS","modulusM","and","andS","andM","or","orS","orM","xor","xorS","xorM","leftShift","leftShiftS","leftShiftM","signPropagatingRightShift","signPropagatingRightShiftS","signPropagatingRightShiftM","rightShift","rightShiftS","rightShiftM","zeroFillRightShift","zeroFillRightShiftS","zeroFillRightShiftM","not","acos","acosh","asin","asinh","atan","atanh","cbrt","clz32","cos","cosh","exp","expm1","fround","log","log1p","log2","sign","sin","sinh","tan","tanh","trunc","arg0","powS","powM","installMathOperations","WrapperMatrix2D","LuDecomposition","LUcolj","kmax","lu","pivotVector","pivotSign","LU","isSingular","col","solve","X","determinant","hypotenuse","QrDecomposition","qr","rdiag","nrm","QR","Rdiag","isFullRank","SingularValueDecomposition","computeLeftSingularVectors","computeRightSingularVectors","autoTranspose","wantu","Boolean","wantv","swapped","aux","nu","ni","U","V","work","si","nct","nrt","mrc","pp","eps","EPSILON","kase","MIN_VALUE","isNaN","ks","f","cs","sn","sp","spm1","epm1","sk","ek","shift","g","Y","threshold","scols","Ls","rightSingularVectors","VL","vrows","urows","VLU","solveForDiagonal","inverse","vcols","ucols","tol","ii","useSVD","leftHandSide","rightHandSide","step","params","damping","gradientDifference","evaluatedData","gradientFunc","paramFunction","param","auxParams","funcParam","point","gradientFunction","matrixFunc","matrixFunction","inverseMatrix","levenbergMarquardt","maxIterations","errorTolerance","minValues","maxValues","initialValues","parLen","MIN_SAFE_INTEGER","iteration","converged","parameterValues","parameterError","iterations","sumOfGaussians","nL","optimizeGaussianSum","xy","group","opts","yData","maxY","forEach","arr","pInit","pMin","pMax","dt","width","lmOptions","assign","pFit","LM","singleGaussian","factor2","optimizeSingleGaussian","peak","sumOfLorentzians","p2","optimizeLorentzianSum","singleLorentzian","optimizeSingleLorentzian","sampleFunction","to","lastIndex","nbPoints","sampleX","sampleY","direction","delta","mid","stop","overlap","right","left","nextPeak","yIn","noiseLevel","sgOptions","smoothY","heightFactor","broadRatio","maxCriteria","minMaxRatio","derivativeThreshold","realTopDetection","equalSpaced","yCorrection","dY","ddY","SG","xData","dX","maxDdy","lastMax","lastMin","minddY","intervalL","intervalR","broadMask","minddYLen","intervalLLen","intervalRLen","broadMaskLen","possible","frequency","distanceJ","minDistance","gettingCloser","signals","signalsLen","lastK","MAX_VALUE","soft","yLeft","yRight","height","base","broadLines","candidates","indexes","fitted","reduce","functionName","factorWidth","optimizationOptions","sampling","groups","upperLimit","lowerLimit","limits","groupPeaks","peaks","optPeaks","fitResult"],"mappings":"iMAAe,SAASA,EAAcC,EAAMC,OAAGC,yDAAU,IACnDC,WAAEA,EAAa,EAAfC,WAAkBA,EAAa,EAA/BC,WAAkCA,EAAa,GAAMH,KAErDC,EAAa,GAAM,GAAKA,EAAa,IAAMG,OAAOC,UAAUJ,SACxD,IAAIK,WACR,wEAGAL,EAAaH,EAAKS,aACd,IAAID,gEACsCL,cAAcH,EAAKS,YAGjEL,EAAa,IAAME,OAAOC,UAAUH,SAChC,IAAII,WAAW,8CAEnBH,EAAa,IAAMC,OAAOC,UAAUF,SAChC,IAAIG,WAAW,2CAEnBH,GAAc,GAEhBK,QAAQC,KACN,+JAKAC,EAAOC,KAAKC,MAAMX,EAAa,GAC/BY,EAAKf,EAAKS,OACVO,EAAM,IAAIC,MAAMF,GAChBG,EAoGN,SAAqBC,EAAGC,EAAGC,OACrBH,EAAU,IAAID,MAAME,GACpBJ,EAAKF,KAAKC,MAAMK,EAAI,OACnB,IAAIG,GAAKP,EAAIO,GAAKP,EAAIO,IAAK,CAC9BJ,EAAQI,EAAIP,GAAM,IAAIE,MAAME,OACvB,IAAII,GAAKR,EAAIQ,GAAKR,EAAIQ,IACzBL,EAAQI,EAAIP,GAAIQ,EAAIR,GAAMS,EAAOD,EAAGD,EAAGP,EAAIK,EAAGC,UAG3CH,EA7GOO,CAAYtB,EAAYE,EAAYD,GAC9CsB,EAAK,EACLC,GAAY,EACZV,MAAMW,QAAQ3B,GAChB0B,GAAY,EAEZD,EAAKb,KAAKgB,IAAI5B,EAAGG,OAId,IAAI0B,EAAI,EAAGA,EAAIlB,EAAMkB,IAAK,KACzBC,EAAMb,EAAQN,EAAOkB,EAAI,GACzBE,EAAMd,EAAQN,EAAOkB,EAAI,GACzBG,EAAK,EACLC,EAAK,MACJ,IAAIC,EAAI,EAAGA,EAAIhC,EAAYgC,IAC9BF,GAAMF,EAAII,GAAKnC,EAAKmC,GACpBD,GAAMF,EAAIG,GAAKnC,EAAKe,EAAKZ,EAAagC,GAEpCR,GACFX,EAAIJ,EAAOkB,EAAI,GAAKG,EAAKP,EACzBV,EAAID,EAAKH,EAAOkB,GAAKI,EAAKR,IAE1BA,EAAKU,EAAMnC,EAAGW,EAAOkB,EAAI,EAAGlB,EAAMR,GAClCY,EAAIJ,EAAOkB,EAAI,GAAKG,EAAKP,EACzBA,EAAKU,EAAMnC,EAAGc,EAAKH,EAAOkB,EAAGlB,EAAMR,GACnCY,EAAID,EAAKH,EAAOkB,GAAKI,EAAKR,OAK1BW,EAAKnB,EAAQN,OACZ,IAAIkB,EAAI3B,EAAY2B,GAAKf,EAAIe,IAAK,KACjCQ,EAAI,MACH,IAAIH,EAAI,EAAGA,EAAIhC,EAAYgC,IAAKG,GAAKD,EAAGF,GAAKnC,EAAKmC,EAAIL,EAAI3B,GAC1DwB,IAAWD,EAAKU,EAAMnC,EAAG6B,EAAIlB,EAAO,EAAGA,EAAMR,IAClDY,EAAIc,EAAIlB,EAAO,GAAK0B,EAAIZ,SAEnBV,EAGT,SAASoB,EAAMnC,EAAGsC,EAAQ3B,EAAMR,OAC1BsB,EAAK,EACLc,EAAQ,MACP,IAAIV,EAAIS,EAAS3B,EAAMkB,EAAIS,EAAS3B,EAAMkB,IACzCA,GAAK,GAAKA,EAAI7B,EAAEQ,OAAS,IAC3BiB,GAAMzB,EAAE6B,EAAI,GAAK7B,EAAE6B,GACnBU,YAGG3B,KAAKgB,IAAIH,EAAKc,EAAOpC,GAG9B,SAASqC,EAASX,EAAGX,EAAGuB,EAAGrB,OACrBsB,EAAW,SAEbA,EADED,EAAI,GAEF,EAAIA,EAAI,IAAMA,GAAK,EAAIvB,EAAIuB,EAAI,KAC9BZ,EAAIW,EAASX,EAAGX,EAAGuB,EAAI,EAAGrB,GAAKA,EAAIoB,EAASX,EAAGX,EAAGuB,EAAI,EAAGrB,EAAI,KAC7DqB,EAAI,IAAM,EAAIvB,EAAIuB,IAAOA,GAAK,EAAIvB,EAAIuB,EAAI,IAC3CD,EAASX,EAAGX,EAAGuB,EAAI,EAAGrB,GAEhB,IAANqB,GAAiB,IAANrB,EACF,EAEA,EAGRsB,EAGT,SAASC,EAAQC,EAAGC,OACdC,EAAK,KACLF,GAAKC,MACF,IAAIvB,EAAIsB,EAAIC,EAAI,EAAGvB,GAAKsB,EAAGtB,IAC9BwB,GAAMxB,SAGHwB,EAGT,SAASvB,EAAOM,EAAGR,EAAGH,EAAGC,EAAGC,OACtB2B,EAAM,MACL,IAAIN,EAAI,EAAGA,GAAKtB,EAAGsB,IAEtBM,IACG,EAAIN,EAAI,IACRE,EAAQ,EAAIzB,EAAGuB,GAAKE,EAAQ,EAAIzB,EAAIuB,EAAI,EAAGA,EAAI,IAChDD,EAASX,EAAGX,EAAGuB,EAAG,GAClBD,EAASnB,EAAGH,EAAGuB,EAAGrB,UAEf2B,EC0HT,MAAMC,EAAiBC,QACjBC,EACAC,EAAQ,EACRC,EAAQ/C,OAAOgD,qBACd,IAAIxB,EAAI,EAAGA,EAAIoB,EAAEzC,OAAS,IAAKqB,EAClCqB,EAAMtC,KAAK0C,IAAIL,EAAEpB,EAAI,GAAKoB,EAAEpB,IACxBqB,EAAME,IACRA,EAAQF,GAENA,EAAMC,IACRA,EAAQD,UAGJC,EAAQC,GAASD,EAAQ,KAG7BI,EAAiBC,QACjBC,EAAO,EAEPC,EAAS,EACTlD,EAASgD,EAAEhD,WACV,IAAIqB,EAAI,EAAGA,EAAIrB,IAAUqB,EAC5B4B,GAAQD,EAAE3B,GAEZ4B,GAAQjD,MACJmD,EAAoB,IAAI3C,MAAMR,OAC7B,IAAIqB,EAAI,EAAGA,EAAIrB,IAAUqB,EAC5B8B,EAAkB9B,GAAKjB,KAAK0C,IAAIE,EAAE3B,GAAK4B,UAEzCE,EAAkBC,KAAK,CAAChB,EAAGC,IAAMD,EAAIC,GAEnCa,EADElD,EAAS,GAAM,EACRmD,GAAmBnD,EAAS,GAAK,GAAK,MAG5C,IACEmD,EAAkBnD,EAAS,GAAKmD,EAAkBnD,EAAS,EAAI,IAClE,MAGGkD,GAGHG,EAAmB,CAACC,EAAUb,EAAGO,SACjCO,EAAOC,EAAMC,EAAOC,EAAGC,MACtB,IAAI7C,EAAI,EAAGA,EAAIwC,EAAStD,OAAQc,IACnC6C,EAAeL,EAASxC,GAAG8C,MAGzBZ,EAAEW,EAAe,IAAMX,EAAEW,EAAe,IACxCX,EAAEW,EAAe,IAAMX,EAAEW,GAEzBA,IAGEX,EAAEW,EAAe,IAAMX,EAAEW,IACzBX,EAAEW,EAAe,IAAMX,EAAEW,EAAe,GAExCA,IAGEX,EAAEW,EAAe,IAAMX,EAAEW,EAAe,IACxCX,EAAEW,EAAe,IAAMX,EAAEW,EAAe,GAExCA,GAAgB,EAGdX,EAAEW,EAAe,IAAMX,EAAEW,EAAe,IACxCX,EAAEW,EAAe,IAAMX,EAAEW,EAAe,KAExCA,GAAgB,GAOtBX,EAAEW,EAAe,GAAK,GACtBX,EAAEW,EAAe,GAAK,GACtBX,EAAEW,IAAiBX,EAAEW,EAAe,IACpCX,EAAEW,IAAiBX,EAAEW,EAAe,KACnCX,EAAEW,KAAkBX,EAAEW,EAAe,IACpCX,EAAEW,KAAkBX,EAAEW,EAAe,MAEvCJ,EAAQ,GAAKnD,KAAKyD,MAAMb,EAAEW,EAAe,IACzCH,EAAO,GAAKpD,KAAKyD,MAAMb,EAAEW,IACzBF,EAAQ,GAAKrD,KAAKyD,MAAMb,EAAEW,EAAe,IACzCD,EAAK,IAAOH,EAAQE,IAAWF,EAAQ,EAAIC,EAAOC,GAGlDH,EAASxC,GAAG2B,EACVA,EAAEkB,IAAiBlB,EAAEkB,GAAgBlB,EAAEkB,EAAe,IAAMD,EAC9DJ,EAASxC,GAAGkC,EACVA,EAAEW,GACF,KAAQX,EAAEW,EAAe,GAAKX,EAAEW,EAAe,IAAMD,IChVvDI,EAAWC,OAAOC,UAAUF,SAEnB,SAASG,EAAWC,UAC1BJ,EAASK,KAAKD,GAAQE,SAAS,UCKzB,SAASC,EACtB9E,EACA+E,EACAC,OAEIC,EAAQ,QACNC,EAAOF,EAAsBD,OAE9B,IAAIjD,EAAI,EAAGA,EAAI9B,EAAKkD,EAAEzC,OAAQqB,IACjCmD,GAASpE,KAAK0C,IAAIvD,EAAKyD,EAAE3B,GAAKoD,EAAKlF,EAAKkD,EAAEpB,YAGrCmD,QClBHV,EAAWC,OAAOC,UAAUF,SAMlC,MAJA,SAAoBI,UACXJ,EAASK,KAAKD,GAAQE,SAAS,WCHxC,MAAMN,EAAWC,OAAOC,UAAUF,SAMlC,MAJA,SAAoBI,UACXJ,EAASK,KAAKD,GAAQE,SAAS,WCHxC,MAAMN,EAAWC,OAAOC,UAAUF,SAMlC,MAJA,SAAoBI,UACXJ,EAASK,KAAKD,GAAQE,SAAS,WCMxC,SAASM,EAAQC,OASXC,EARAnF,EAAUoF,UAAU7E,OAAS,QAAsB8E,IAAjBD,UAAU,GAAmBA,UAAU,GAAK,OAE7E1D,EAAQwD,SACL,IAAII,UAAU,0BACf,GAAqB,IAAjBJ,EAAM3E,aACT,IAAI+E,UAAU,mCAKCD,IAAnBrF,EAAQmF,OAAsB,KAC3BzD,EAAQ1B,EAAQmF,cACb,IAAIG,UAAU,+CAGtBH,EAASnF,EAAQmF,YAEjBA,EAAS,IAAIpE,MAAMmE,EAAM3E,YAGvBgF,ECxBN,SAAaL,OACNxD,EAAQwD,SACL,IAAII,UAAU,6BAGD,IAAjBJ,EAAM3E,aACF,IAAI+E,UAAU,mCAGlBE,EAAWN,EAAM,GAEZtD,EAAI,EAAGA,EAAIsD,EAAM3E,OAAQqB,IAC5BsD,EAAMtD,GAAK4D,IAAUA,EAAWN,EAAMtD,WAGrC4D,EDSUC,CAAIP,GACjBQ,EEzBN,SAAaR,OACNxD,EAAQwD,SACL,IAAII,UAAU,6BAGD,IAAjBJ,EAAM3E,aACF,IAAI+E,UAAU,mCAGlBK,EAAWT,EAAM,GAEZtD,EAAI,EAAGA,EAAIsD,EAAM3E,OAAQqB,IAC5BsD,EAAMtD,GAAK+D,IAAUA,EAAWT,EAAMtD,WAGrC+D,EFUUC,CAAIV,MAEjBK,IAAeG,QACX,IAAIpF,WAAW,mFAGnBuF,EAAe7F,EAAQyF,IACvBD,OAA4B,IAAjBK,EAA0B7F,EAAQ8F,WAAaP,EAAa,EAAIM,EAC3EE,EAAe/F,EAAQ4F,IACvBD,OAA4B,IAAjBI,EAA0B/F,EAAQ8F,WAAaJ,EAAa,EAAIK,KAE3EP,GAAYG,QACR,IAAIrF,WAAW,sDAGnB0F,GAAUL,EAAWH,IAAaE,EAAaH,GAE1C3D,EAAI,EAAGA,EAAIsD,EAAM3E,OAAQqB,IAChCuD,EAAOvD,IAAMsD,EAAMtD,GAAK2D,GAAcS,EAASR,SAG1CL,EGtDT,MAAMc,EAAS,IAAIC,OAAO,GACpBC,EAAa,IAAID,OAAO,GAMvB,SAASE,EAAyBC,OAAQrG,yDAAU,SACnDsG,QAAEA,EAAU,GAAZC,WAAgBA,EAAa,GAA7BC,WAAiCA,EAAa,GAAMxG,kBAChDqG,EAAOI,YAAYC,oBAC7BT,gBACAE,UAOF,SAAqBE,EAAQC,EAASC,EAAYC,SAC1CG,KAAEA,EAAFC,QAAQA,GAAYP,EACpBQ,EAAOlG,KAAK8E,IAAIkB,EAAML,GACtBQ,EAAOnG,KAAK8E,IAAImB,EAASL,GACzBQ,EAAS,OACV,IAAInF,EAAI,EAAGA,EAAIiF,EAAMjF,IAAK,KACzBoF,EAAO,OACN,IAAI3F,EAAI,EAAGA,EAAIyF,EAAMzF,IACxB2F,EAAKC,KAAKC,EAAab,EAAOc,IAAIvF,EAAGP,GAAImF,IAE3CO,EAAOE,eAAQD,EAAKI,KAAK,OAEvBN,IAASF,IACXG,EAAOA,EAAOxG,OAAS,mBAAcqG,EAAUL,oBAE7CM,IAASF,GACXI,EAAOE,mBAAYN,EAAOL,wBAErBS,EAAOK,iBAAUjB,IAzBXkB,CAAYhB,EAAQC,EAASC,EAAYC,gBACtDP,gBACAA,mBAAeI,EAAOM,kBACtBV,sBAAkBI,EAAOO,eAyB3B,SAASM,EAAaI,EAAKd,SACnBe,EAASC,OAAOF,MAClBC,EAAOhH,QAAUiG,SACZe,EAAOE,OAAOjB,EAAY,WAE7BkB,EAAUJ,EAAIK,YAAYnB,EAAa,MACzCkB,EAAQnH,QAAUiG,SACbkB,QAEHE,EAAcN,EAAIO,cAAcrB,EAAa,GAC7CsB,EAASF,EAAYG,QAAQ,KAC7BC,EAAIJ,EAAYK,MAAMH,UACrBF,EAAYK,MAAM,EAAGzB,EAAawB,EAAEzH,QAAUyH,EC5ChD,SAASE,EAAc7B,EAAQlC,EAAOgE,OACvCvC,EAAMuC,EAAQ9B,EAAOM,KAAON,EAAOM,KAAO,KAC1CxC,EAAQ,GAAKA,EAAQyB,QACjB,IAAItF,WAAW,0BAWlB,SAAS8H,EAAiB/B,EAAQlC,EAAOgE,OAC1CvC,EAAMuC,EAAQ9B,EAAOO,QAAUP,EAAOO,QAAU,KAChDzC,EAAQ,GAAKA,EAAQyB,QACjB,IAAItF,WAAW,6BAYlB,SAAS+H,EAAehC,EAAQiC,MACjCA,EAAOC,YACTD,EAASA,EAAOC,aAEdD,EAAO/H,SAAW8F,EAAOO,cACrB,IAAItG,WACR,gEAGGgI,EAWF,SAASE,EAAkBnC,EAAQiC,MACpCA,EAAOC,YACTD,EAASA,EAAOC,aAEdD,EAAO/H,SAAW8F,EAAOM,WACrB,IAAIrG,WAAW,6DAEhBgI,EAUF,SAASG,EAAgBpC,EAAQqC,MACZ,iBAAfA,QACH,IAAIpD,UAAU,sCAGToD,EAAWC,KAAMC,GACrBA,EAAI,GAAKA,GAAKvC,EAAOM,YAItB,IAAIrG,WAAW,uCAGlBS,MAAMW,QAAQgH,KAAaA,EAAa3H,MAAM8H,KAAKH,IAEjDA,EAGF,SAASI,EAAmBzC,EAAQ0C,MACZ,iBAAlBA,QACH,IAAIzD,UAAU,yCAGNyD,EAAcJ,KAAMK,GAC3BA,EAAI,GAAKA,GAAK3C,EAAOO,eAItB,IAAItG,WAAW,0CAElBS,MAAMW,QAAQqH,KAAgBA,EAAgBhI,MAAM8H,KAAKE,IAEvDA,EAGF,SAASE,EAAW5C,EAAQ6C,EAAUC,EAAQC,EAAaC,MACvC,IAArBjE,UAAU7E,aACN,IAAID,WAAW,2BAEvBgJ,EAAY,WAAYJ,GACxBI,EAAY,SAAUH,GACtBG,EAAY,cAAeF,GAC3BE,EAAY,YAAaD,GAEvBH,EAAWC,GACXC,EAAcC,GACdH,EAAW,GACXA,GAAY7C,EAAOM,MACnBwC,EAAS,GACTA,GAAU9C,EAAOM,MACjByC,EAAc,GACdA,GAAe/C,EAAOO,SACtByC,EAAY,GACZA,GAAahD,EAAOO,cAEd,IAAItG,WAAW,sCAIlB,SAASiJ,EAAShJ,OAAQiJ,yDAAQ,EACnCC,EAAQ,OACP,IAAI7H,EAAI,EAAGA,EAAIrB,EAAQqB,IAC1B6H,EAAMxC,KAAKuC,UAENC,EAGT,SAASH,EAAY5C,EAAM8C,MACJ,iBAAVA,QACH,IAAIlE,oBAAaoB,8BC7GdgD,qBACQC,EAASC,EAAYC,MACzBF,EAAUC,IACRC,EAAQtJ,aACf,IAAID,WAAW,mDAEnBwJ,EAAY,IAAIC,EAAOJ,EAASC,OAC/B,IAAII,EAAM,EAAGA,EAAML,EAASK,QAC1B,IAAIC,EAAS,EAAGA,EAASL,EAAYK,IACxCH,EAAUI,IAAIF,EAAKC,EAAQJ,EAAQG,EAAMJ,EAAaK,WAGnDH,mBAGQD,OACXvB,EAAS,IAAIyB,EAAO,EAAGF,EAAQtJ,YAC9B,IAAIqB,EAAI,EAAGA,EAAIiI,EAAQtJ,OAAQqB,IAClC0G,EAAO4B,IAAI,EAAGtI,EAAGiI,EAAQjI,WAEpB0G,sBAGWuB,OACdvB,EAAS,IAAIyB,EAAOF,EAAQtJ,OAAQ,OACnC,IAAIqB,EAAI,EAAGA,EAAIiI,EAAQtJ,OAAQqB,IAClC0G,EAAO4B,IAAItI,EAAG,EAAGiI,EAAQjI,WAEpB0G,eAGI3B,EAAMC,UACV,IAAImD,EAAOpD,EAAMC,eAGdD,EAAMC,UACT,IAAImD,EAAOpD,EAAMC,GAASuD,KAAK,eAG5BxD,EAAMC,OAAS5G,yDAAU,MACZ,iBAAZA,QACH,IAAIsF,UAAU,mCAEhB8E,OAAEA,EAASzJ,KAAKyJ,QAAWpK,MAC7BqG,EAAS,IAAI0D,EAAOpD,EAAMC,OACzB,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IAC3BgF,EAAO6D,IAAItI,EAAGP,EAAG+I,YAGd/D,iBAGMM,EAAMC,OAAS5G,yDAAU,MACf,iBAAZA,QACH,IAAIsF,UAAU,mCAEhBG,IAAEA,EAAM,EAARG,IAAWA,EAAM,IAAjBwE,OAAuBA,EAASzJ,KAAKyJ,QAAWpK,MACjDI,OAAOC,UAAUoF,GAAM,MAAM,IAAIH,UAAU,8BAC3ClF,OAAOC,UAAUuF,GAAM,MAAM,IAAIN,UAAU,6BAC5CG,GAAOG,EAAK,MAAM,IAAItF,WAAW,oCACjC+J,EAAWzE,EAAMH,EACjBY,EAAS,IAAI0D,EAAOpD,EAAMC,OACzB,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IAAK,KAC5BmI,EAAQ/D,EAAM9E,KAAK2J,MAAMF,IAAWC,GACxChE,EAAO6D,IAAItI,EAAGP,EAAGmI,UAGdnD,aAGEM,EAAMC,EAAS4C,QACRnE,IAAZuB,IAAuBA,EAAUD,QACvBtB,IAAVmE,IAAqBA,EAAQ,OAC7B/D,EAAM9E,KAAK8E,IAAIkB,EAAMC,GACrBP,EAASkE,KAAKC,MAAM7D,EAAMC,OACzB,IAAIhF,EAAI,EAAGA,EAAI6D,EAAK7D,IACvByE,EAAO6D,IAAItI,EAAGA,EAAG4H,UAEZnD,cAGGvG,EAAM6G,EAAMC,OAClB3E,EAAInC,EAAKS,YACA8E,IAATsB,IAAoBA,EAAO1E,QACfoD,IAAZuB,IAAuBA,EAAUD,OACjClB,EAAM9E,KAAK8E,IAAIxD,EAAG0E,EAAMC,GACxBP,EAASkE,KAAKC,MAAM7D,EAAMC,OACzB,IAAIhF,EAAI,EAAGA,EAAI6D,EAAK7D,IACvByE,EAAO6D,IAAItI,EAAGA,EAAG9B,EAAK8B,WAEjByE,aAGEoE,EAASC,GAClBD,EAAUF,KAAKI,YAAYF,GAC3BC,EAAUH,KAAKI,YAAYD,OACvB/D,EAAO8D,EAAQ9D,KACfC,EAAU6D,EAAQ7D,QAClBG,EAAS,IAAIgD,EAAOpD,EAAMC,OACzB,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IAC3B0F,EAAOmD,IAAItI,EAAGP,EAAGV,KAAK8E,IAAIgF,EAAQtD,IAAIvF,EAAGP,GAAIqJ,EAAQvD,IAAIvF,EAAGP,YAGzD0F,aAGE0D,EAASC,GAClBD,EAAUF,KAAKI,YAAYF,GAC3BC,EAAUH,KAAKI,YAAYD,OACvB/D,EAAO8D,EAAQ9D,KACfC,EAAU6D,EAAQ7D,QAClBG,EAAS,IAAIwD,KAAK5D,EAAMC,OACvB,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IAC3B0F,EAAOmD,IAAItI,EAAGP,EAAGV,KAAKiF,IAAI6E,EAAQtD,IAAIvF,EAAGP,GAAIqJ,EAAQvD,IAAIvF,EAAGP,YAGzD0F,qBAGUyC,UACVE,EAAekB,SAASpB,GAASA,EAAQ,IAAIO,EAAOP,mBAG7CA,UACE,MAATA,GAAiC,WAAhBA,EAAMqB,wBAIvBN,KAAK5D,KAAO4D,KAAK3D,QAG1BkE,MAAMC,MACoB,mBAAbA,QACH,IAAIzF,UAAU,mCAEjB,IAAI1D,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAChC0J,EAASrG,KAAK6F,KAAM3I,EAAGP,UAGpBkJ,KAGThC,gBACMkB,EAAQ,OACP,IAAI7H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAChCoI,EAAMxC,KAAKsD,KAAKpD,IAAIvF,EAAGP,WAGpBoI,EAGTuB,gBACMC,EAAO,OACN,IAAIrJ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAAK,CAClCqJ,EAAKhE,KAAK,QACL,IAAI5F,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAChC4J,EAAKrJ,GAAGqF,KAAKsD,KAAKpD,IAAIvF,EAAGP,WAGtB4J,EAGTC,gBACSX,KAAKS,YAGdG,qBACuB,IAAdZ,KAAK5D,KAGdyE,wBAC0B,IAAjBb,KAAK3D,QAGdyE,kBACuB,IAAdd,KAAK5D,MAA+B,IAAjB4D,KAAK3D,QAGjC0E,kBACSf,KAAK5D,OAAS4D,KAAK3D,QAG5B2E,iBACMhB,KAAKe,WAAY,KACd,IAAI1J,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,GAAKO,EAAGP,OAClBkJ,KAAKpD,IAAIvF,EAAGP,KAAOkJ,KAAKpD,IAAI9F,EAAGO,UAC1B,SAIN,SAEF,EAGT4J,oBACM5J,EAAI,EACJP,EAAI,EACJoK,GAAkB,EAClBD,GAAgB,EAChBE,GAAU,OACP9J,EAAI2I,KAAK5D,MAAQ6E,GAAe,KACrCnK,EAAI,EACJqK,GAAU,EACHrK,EAAIkJ,KAAK3D,UAAuB,IAAZ8E,GACF,IAAnBnB,KAAKpD,IAAIvF,EAAGP,GACdA,IAC4B,IAAnBkJ,KAAKpD,IAAIvF,EAAGP,IAAYA,EAAIoK,GACrCC,GAAU,EACVD,EAAiBpK,IAEjBmK,GAAgB,EAChBE,GAAU,GAGd9J,WAEK4J,EAGTG,2BACM/J,EAAI,EACJP,EAAI,EACJoK,GAAkB,EAClBE,GAAuB,EACvBD,GAAU,OACP9J,EAAI2I,KAAK5D,MAAQgF,GAAsB,KAC5CtK,EAAI,EACJqK,GAAU,EACHrK,EAAIkJ,KAAK3D,UAAuB,IAAZ8E,GACF,IAAnBnB,KAAKpD,IAAIvF,EAAGP,GACdA,IAC4B,IAAnBkJ,KAAKpD,IAAIvF,EAAGP,IAAYA,EAAIoK,GACrCC,GAAU,EACVD,EAAiBpK,IAEjBsK,GAAuB,EACvBD,GAAU,OAGT,IAAIlJ,EAAInB,EAAI,EAAGmB,EAAI+H,KAAK5D,KAAMnE,IACV,IAAnB+H,KAAKpD,IAAIvF,EAAGY,KACdmJ,GAAuB,GAG3B/J,WAEK+J,EAGTC,kBACM7E,EAASwD,KAAKsB,QACd9L,EAAI,EACJyC,EAAI,OACDzC,EAAIgH,EAAOJ,MAAQnE,EAAIuE,EAAOH,SAAS,KACxCkF,EAAO/L,MACN,IAAI6B,EAAI7B,EAAG6B,EAAImF,EAAOJ,KAAM/E,IAC3BmF,EAAOI,IAAIvF,EAAGY,GAAKuE,EAAOI,IAAI2E,EAAMtJ,KACtCsJ,EAAOlK,MAGiB,IAAxBmF,EAAOI,IAAI2E,EAAMtJ,GACnBA,QACK,CACLuE,EAAOgF,SAAShM,EAAG+L,OACf7I,EAAM8D,EAAOI,IAAIpH,EAAGyC,OACnB,IAAInB,EAAImB,EAAGnB,EAAI0F,EAAOH,QAASvF,IAClC0F,EAAOmD,IAAInK,EAAGsB,EAAG0F,EAAOI,IAAIpH,EAAGsB,GAAK4B,OAEjC,IAAIrB,EAAI7B,EAAI,EAAG6B,EAAImF,EAAOJ,KAAM/E,IAAK,KACpCoE,EAASe,EAAOI,IAAIvF,EAAGY,GAAKuE,EAAOI,IAAIpH,EAAGyC,GAC9CuE,EAAOmD,IAAItI,EAAGY,EAAG,OACZ,IAAInB,EAAImB,EAAI,EAAGnB,EAAI0F,EAAOH,QAASvF,IACtC0F,EAAOmD,IAAItI,EAAGP,EAAG0F,EAAOI,IAAIvF,EAAGP,GAAK0F,EAAOI,IAAIpH,EAAGsB,GAAK2E,GAG3DjG,IACAyC,YAGGuE,EAGTiF,yBACMjF,EAASwD,KAAKqB,cACd3K,EAAI8F,EAAOH,QACX1F,EAAI6F,EAAOJ,KACX5G,EAAImB,EAAI,OACLnB,GAAK,MACe,IAArBgH,EAAOkF,OAAOlM,GAChBA,QACK,KACDkE,EAAI,EACJiI,GAAQ,OACLjI,EAAI/C,IAAe,IAAVgL,GACW,IAArBnF,EAAOI,IAAIpH,EAAGkE,GAChBiI,GAAQ,EAERjI,QAGC,IAAIrC,EAAI,EAAGA,EAAI7B,EAAG6B,IAAK,KACtBoE,EAASe,EAAOI,IAAIvF,EAAGqC,OACtB,IAAI5C,EAAI4C,EAAG5C,EAAIJ,EAAGI,IAAK,KACtB4B,EAAM8D,EAAOI,IAAIvF,EAAGP,GAAK2E,EAASe,EAAOI,IAAIpH,EAAGsB,GACpD0F,EAAOmD,IAAItI,EAAGP,EAAG4B,IAGrBlD,WAGGgH,EAGTmD,YACQ,IAAIiC,MAAM,+BAGlBhF,YACQ,IAAIgF,MAAM,+BAGlBjG,aAAOlG,yDAAU,MACQ,iBAAZA,QACH,IAAIsF,UAAU,mCAEhBqB,KAAEA,EAAO,EAATC,QAAYA,EAAU,GAAM5G,MAC7BI,OAAOC,UAAUsG,IAASA,GAAQ,QAC/B,IAAIrB,UAAU,uCAEjBlF,OAAOC,UAAUuG,IAAYA,GAAW,QACrC,IAAItB,UAAU,0CAElBe,EAAS,IAAI0D,EAAOQ,KAAK5D,KAAOA,EAAM4D,KAAK3D,QAAUA,OACpD,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IAC3BgF,EAAO+F,aAAa7B,KAAMA,KAAK5D,KAAO/E,EAAG2I,KAAK3D,QAAUvF,UAGrDgF,EAGT8D,KAAKX,OACE,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGmI,UAGZe,KAGT8B,aACS9B,KAAK+B,MAAM,GAGpBC,OAAOpI,GACL+D,EAAcqC,KAAMpG,OAChB6F,EAAM,OACL,IAAIpI,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAChCoI,EAAI/C,KAAKsD,KAAKpD,IAAIhD,EAAOvC,WAEpBoI,EAGTwC,aAAarI,UACJ4F,EAAO0C,UAAUlC,KAAKgC,OAAOpI,IAGtCuI,OAAOvI,EAAOsF,GACZvB,EAAcqC,KAAMpG,GACpBsF,EAAQpB,EAAekC,KAAMd,OACxB,IAAI7H,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,SAC3BsI,IAAI/F,EAAOvC,EAAG6H,EAAM7H,WAEpB2I,KAGTwB,SAASY,EAAMC,GACb1E,EAAcqC,KAAMoC,GACpBzE,EAAcqC,KAAMqC,OACf,IAAIhL,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAAK,KACjCiL,EAAOtC,KAAKpD,IAAIwF,EAAM/K,QACrBsI,IAAIyC,EAAM/K,EAAG2I,KAAKpD,IAAIyF,EAAMhL,SAC5BsI,IAAI0C,EAAMhL,EAAGiL,UAEbtC,KAGTuC,UAAU3I,GACRiE,EAAiBmC,KAAMpG,OACnB8F,EAAS,OACR,IAAIrI,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAC7BqI,EAAOhD,KAAKsD,KAAKpD,IAAIvF,EAAGuC,WAEnB8F,EAGT8C,gBAAgB5I,UACP4F,EAAOiD,aAAazC,KAAKuC,UAAU3I,IAG5C8I,UAAU9I,EAAOsF,GACfrB,EAAiBmC,KAAMpG,GACvBsF,EAAQjB,EAAkB+B,KAAMd,OAC3B,IAAI7H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,SACxBsI,IAAItI,EAAGuC,EAAOsF,EAAM7H,WAEpB2I,KAGT2C,YAAYC,EAASC,GACnBhF,EAAiBmC,KAAM4C,GACvB/E,EAAiBmC,KAAM6C,OAClB,IAAIxL,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAAK,KAC9BiL,EAAOtC,KAAKpD,IAAIvF,EAAGuL,QAClBjD,IAAItI,EAAGuL,EAAS5C,KAAKpD,IAAIvF,EAAGwL,SAC5BlD,IAAItI,EAAGwL,EAASP,UAEhBtC,KAGT8C,aAAa/E,GACXA,EAASD,EAAekC,KAAMjC,OACzB,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAOjH,WAGpCkJ,KAGT+C,aAAahF,GACXA,EAASD,EAAekC,KAAMjC,OACzB,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAOjH,WAGpCkJ,KAGTgD,aAAajF,GACXA,EAASD,EAAekC,KAAMjC,OACzB,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAOjH,WAGpCkJ,KAGTiD,aAAalF,GACXA,EAASD,EAAekC,KAAMjC,OACzB,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAOjH,WAGpCkJ,KAGTkD,gBAAgBnF,GACdA,EAASE,EAAkB+B,KAAMjC,OAC5B,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAO1G,WAGpC2I,KAGTmD,gBAAgBpF,GACdA,EAASE,EAAkB+B,KAAMjC,OAC5B,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAO1G,WAGpC2I,KAGToD,gBAAgBrF,GACdA,EAASE,EAAkB+B,KAAMjC,OAC5B,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAO1G,WAGpC2I,KAGTqD,gBAAgBtF,GACdA,EAASE,EAAkB+B,KAAMjC,OAC5B,IAAI1G,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKiH,EAAO1G,WAGpC2I,KAGTsD,OAAO1J,EAAOqF,GACZtB,EAAcqC,KAAMpG,OACf,IAAIvC,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,SAC3BsI,IAAI/F,EAAOvC,EAAG2I,KAAKpD,IAAIhD,EAAOvC,GAAK4H,UAEnCe,KAGTuD,UAAU3J,EAAOqF,GACfpB,EAAiBmC,KAAMpG,OAClB,IAAIvC,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,SACxBsI,IAAItI,EAAGuC,EAAOoG,KAAKpD,IAAIvF,EAAGuC,GAASqF,UAEnCe,KAGT3E,UACMmI,EAAIxD,KAAKpD,IAAI,EAAG,OACf,IAAIvF,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAC5BkJ,KAAKpD,IAAIvF,EAAGP,GAAK0M,IACnBA,EAAIxD,KAAKpD,IAAIvF,EAAGP,WAIf0M,EAGTC,eACMD,EAAIxD,KAAKpD,IAAI,EAAG,GAChB8G,EAAM,CAAC,EAAG,OACT,IAAIrM,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAC5BkJ,KAAKpD,IAAIvF,EAAGP,GAAK0M,IACnBA,EAAIxD,KAAKpD,IAAIvF,EAAGP,GAChB4M,EAAI,GAAKrM,EACTqM,EAAI,GAAK5M,UAIR4M,EAGTxI,UACMsI,EAAIxD,KAAKpD,IAAI,EAAG,OACf,IAAIvF,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAC5BkJ,KAAKpD,IAAIvF,EAAGP,GAAK0M,IACnBA,EAAIxD,KAAKpD,IAAIvF,EAAGP,WAIf0M,EAGTG,eACMH,EAAIxD,KAAKpD,IAAI,EAAG,GAChB8G,EAAM,CAAC,EAAG,OACT,IAAIrM,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAC5BkJ,KAAKpD,IAAIvF,EAAGP,GAAK0M,IACnBA,EAAIxD,KAAKpD,IAAIvF,EAAGP,GAChB4M,EAAI,GAAKrM,EACTqM,EAAI,GAAK5M,UAIR4M,EAGThC,OAAOjC,GACL9B,EAAcqC,KAAMP,OAChB+D,EAAIxD,KAAKpD,IAAI6C,EAAK,OACjB,IAAIpI,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAC5B2I,KAAKpD,IAAI6C,EAAKpI,GAAKmM,IACrBA,EAAIxD,KAAKpD,IAAI6C,EAAKpI,WAGfmM,EAGTI,YAAYnE,GACV9B,EAAcqC,KAAMP,OAChB+D,EAAIxD,KAAKpD,IAAI6C,EAAK,GAClBiE,EAAM,CAACjE,EAAK,OACX,IAAIpI,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAC5B2I,KAAKpD,IAAI6C,EAAKpI,GAAKmM,IACrBA,EAAIxD,KAAKpD,IAAI6C,EAAKpI,GAClBqM,EAAI,GAAKrM,UAGNqM,EAGTG,OAAOpE,GACL9B,EAAcqC,KAAMP,OAChB+D,EAAIxD,KAAKpD,IAAI6C,EAAK,OACjB,IAAIpI,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAC5B2I,KAAKpD,IAAI6C,EAAKpI,GAAKmM,IACrBA,EAAIxD,KAAKpD,IAAI6C,EAAKpI,WAGfmM,EAGTM,YAAYrE,GACV9B,EAAcqC,KAAMP,OAChB+D,EAAIxD,KAAKpD,IAAI6C,EAAK,GAClBiE,EAAM,CAACjE,EAAK,OACX,IAAIpI,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAC5B2I,KAAKpD,IAAI6C,EAAKpI,GAAKmM,IACrBA,EAAIxD,KAAKpD,IAAI6C,EAAKpI,GAClBqM,EAAI,GAAKrM,UAGNqM,EAGTK,UAAUrE,GACR7B,EAAiBmC,KAAMN,OACnB8D,EAAIxD,KAAKpD,IAAI,EAAG8C,OACf,IAAIrI,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IACzB2I,KAAKpD,IAAIvF,EAAGqI,GAAU8D,IACxBA,EAAIxD,KAAKpD,IAAIvF,EAAGqI,WAGb8D,EAGTQ,eAAetE,GACb7B,EAAiBmC,KAAMN,OACnB8D,EAAIxD,KAAKpD,IAAI,EAAG8C,GAChBgE,EAAM,CAAC,EAAGhE,OACT,IAAIrI,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IACzB2I,KAAKpD,IAAIvF,EAAGqI,GAAU8D,IACxBA,EAAIxD,KAAKpD,IAAIvF,EAAGqI,GAChBgE,EAAI,GAAKrM,UAGNqM,EAGTO,UAAUvE,GACR7B,EAAiBmC,KAAMN,OACnB8D,EAAIxD,KAAKpD,IAAI,EAAG8C,OACf,IAAIrI,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IACzB2I,KAAKpD,IAAIvF,EAAGqI,GAAU8D,IACxBA,EAAIxD,KAAKpD,IAAIvF,EAAGqI,WAGb8D,EAGTU,eAAexE,GACb7B,EAAiBmC,KAAMN,OACnB8D,EAAIxD,KAAKpD,IAAI,EAAG8C,GAChBgE,EAAM,CAAC,EAAGhE,OACT,IAAIrI,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IACzB2I,KAAKpD,IAAIvF,EAAGqI,GAAU8D,IACxBA,EAAIxD,KAAKpD,IAAIvF,EAAGqI,GAChBgE,EAAI,GAAKrM,UAGNqM,EAGTS,WACMjJ,EAAM9E,KAAK8E,IAAI8E,KAAK5D,KAAM4D,KAAK3D,SAC/B8H,EAAO,OACN,IAAI9M,EAAI,EAAGA,EAAI6D,EAAK7D,IACvB8M,EAAKzH,KAAKsD,KAAKpD,IAAIvF,EAAGA,WAEjB8M,EAGTC,WAAKC,yDAAO,YACN7H,EAAS,KACA,QAAT6H,SACKrE,KAAK3E,MACP,GAAa,cAATgJ,EAAsB,KAC1B,IAAIhN,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAChC0F,GAAkBwD,KAAKpD,IAAIvF,EAAGP,GAAKkJ,KAAKpD,IAAIvF,EAAGP,UAG5CV,KAAKkO,KAAK9H,SAEX,IAAIzG,wCAAiCsO,IAI/CE,oBACMhM,EAAM,MACL,IAAIlB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAChCyB,GAAOyH,KAAKpD,IAAIvF,EAAGP,QACd6I,IAAItI,EAAGP,EAAGyB,UAGZyH,KAGTwE,IAAIC,GACEtF,EAAekB,SAASoE,KAAUA,EAAUA,EAAQzG,iBACpD0G,EAAU1E,KAAKhC,eACf0G,EAAQ1O,SAAWyO,EAAQzO,aACvB,IAAID,WAAW,yCAEnByO,EAAM,MACL,IAAInN,EAAI,EAAGA,EAAIqN,EAAQ1O,OAAQqB,IAClCmN,GAAOE,EAAQrN,GAAKoN,EAAQpN,UAEvBmN,EAGTG,KAAKC,GACHA,EAAQpF,EAAOY,YAAYwE,OAEvBlO,EAAIsJ,KAAK5D,KACTzF,EAAIqJ,KAAK3D,QACT3C,EAAIkL,EAAMvI,QAEVG,EAAS,IAAIgD,EAAO9I,EAAGgD,GAEvBmL,EAAQ,IAAIC,aAAanO,OACxB,IAAIG,EAAI,EAAGA,EAAI4C,EAAG5C,IAAK,KACrB,IAAImB,EAAI,EAAGA,EAAItB,EAAGsB,IACrB4M,EAAM5M,GAAK2M,EAAMhI,IAAI3E,EAAGnB,OAGrB,IAAIO,EAAI,EAAGA,EAAIX,EAAGW,IAAK,KACtBT,EAAI,MACH,IAAIqB,EAAI,EAAGA,EAAItB,EAAGsB,IACrBrB,GAAKoJ,KAAKpD,IAAIvF,EAAGY,GAAK4M,EAAM5M,GAG9BuE,EAAOmD,IAAItI,EAAGP,EAAGF,WAGd4F,EAGTuI,YAAYH,GACVA,EAAQpF,EAAOY,YAAYwE,OACvBpI,EAAS,IAAIgD,EAAO,EAAG,SACrBwF,EAAMhF,KAAKpD,IAAI,EAAG,GAClBqI,EAAML,EAAMhI,IAAI,EAAG,GACnBsI,EAAMlF,KAAKpD,IAAI,EAAG,GAClBuI,EAAMP,EAAMhI,IAAI,EAAG,GACnBwI,EAAMpF,KAAKpD,IAAI,EAAG,GAClByI,EAAMT,EAAMhI,IAAI,EAAG,GACnB0I,EAAMtF,KAAKpD,IAAI,EAAG,GAClB2I,EAAMX,EAAMhI,IAAI,EAAG,GAGnB4I,GAAMR,EAAMM,IAAQL,EAAMM,GAC1BE,GAAML,EAAME,GAAOL,EACnBS,EAAKV,GAAOG,EAAMI,GAClBI,EAAKL,GAAOD,EAAMJ,GAClBW,GAAMZ,EAAME,GAAOK,EAKnBM,EAAML,EAAKG,EAAKC,GAHVV,EAAMI,IAAQD,EAAME,GAI1BO,EAAMJ,EAAKE,EACXG,EAAMN,EAAKE,EACXK,EAAMR,EAAKC,EAAKC,GAPVN,EAAMJ,IAAQC,EAAME,UAShC3I,EAAOmD,IAAI,EAAG,EAAGkG,GACjBrJ,EAAOmD,IAAI,EAAG,EAAGmG,GACjBtJ,EAAOmD,IAAI,EAAG,EAAGoG,GACjBvJ,EAAOmD,IAAI,EAAG,EAAGqG,GACVxJ,EAGTyJ,YAAYrB,GACVA,EAAQpF,EAAOY,YAAYwE,OACvBpI,EAAS,IAAIgD,EAAO,EAAG,SAErB0G,EAAMlG,KAAKpD,IAAI,EAAG,GAClBuJ,EAAMnG,KAAKpD,IAAI,EAAG,GAClBwJ,EAAMpG,KAAKpD,IAAI,EAAG,GAClByJ,EAAMrG,KAAKpD,IAAI,EAAG,GAClBoI,EAAMhF,KAAKpD,IAAI,EAAG,GAClBsI,EAAMlF,KAAKpD,IAAI,EAAG,GAClB0J,EAAMtG,KAAKpD,IAAI,EAAG,GAClBwI,EAAMpF,KAAKpD,IAAI,EAAG,GAClB0I,EAAMtF,KAAKpD,IAAI,EAAG,GAElB2J,EAAM3B,EAAMhI,IAAI,EAAG,GACnB4J,EAAM5B,EAAMhI,IAAI,EAAG,GACnB6J,EAAM7B,EAAMhI,IAAI,EAAG,GACnB8J,EAAM9B,EAAMhI,IAAI,EAAG,GACnBqI,EAAML,EAAMhI,IAAI,EAAG,GACnBuI,EAAMP,EAAMhI,IAAI,EAAG,GACnB+J,EAAM/B,EAAMhI,IAAI,EAAG,GACnByI,EAAMT,EAAMhI,IAAI,EAAG,GACnB2I,EAAMX,EAAMhI,IAAI,EAAG,GAGnB6I,GAAMS,EAAMG,KAASG,EAAMvB,GAE3BU,IAAOO,EAAMG,EAAMrB,IAAQuB,EAAMC,EAAMvB,GACvCW,GAAMS,EAAMrB,KAASuB,EAAMC,GAC3BI,EAAKV,EAAMK,EACXM,IAAOX,EAAMI,EAAMlB,IAAQmB,EAAME,EAAMtB,GACvC2B,IAAOZ,EAAMI,IAAQG,EAAMtB,GAC3B4B,GAAMT,EAAMlB,KAASmB,EAAME,GAG3BO,IAAQZ,EAAMhB,EAAME,IAAQL,EAAM0B,EAAMtB,GACxC4B,GAAOb,EAAMd,IAAQL,EAAMI,GAC3B6B,EAAMd,EAAMO,EACZQ,GAAO/B,EAAME,KAASqB,EAAMtB,GAC5B+B,IAAQhB,EAAMpB,EAAME,IAAQC,EAAMwB,EAAMpB,GACxC8B,GAAOjB,EAAMlB,IAAQC,EAAMI,GAC3B+B,GAAOtC,EAAME,KAASyB,EAAMpB,GAO5BM,EAAMe,EAAKM,EANLf,EAAMO,EAOZZ,GAzBMI,EAAMC,EAAMC,EAAMC,EAAMrB,EAAMI,EAAME,GAAOL,EAyBtCU,EAAKC,EAAKgB,EAAKI,EAAME,EAAMC,EACtCI,EAAMX,EAAKC,EAAKE,GAjBTb,EAAMC,EAAMC,EAAMpB,EAAME,EAAMoB,EAAMlB,GAAOD,EAiBvB+B,EAAME,EAAME,EACvCvB,EAAMN,EAzBDT,IAAQuB,EAAMC,EAAME,EAAMzB,EAAME,EAAMwB,EAAMpB,GAyBjCI,EAAKiB,EAAKM,EAAME,EAAMC,EACtCrB,EAAMP,EAAKE,EAAKC,EAAKgB,EATf1B,EAAMG,EAUZmC,EAAMN,EAAME,EAAMC,EAAMC,EATlBjB,EAAMI,EAUZgB,EAAMb,EAAKC,EAAKC,EApBV1B,IAAQmB,EAAME,EAAMC,EAAMzB,EAAME,EAAMwB,EAAMtB,GAoBvB2B,EAAMC,EAAMC,EACvCQ,EAAMV,EAAMC,EAAMC,EAAMC,EAVlBb,EAAME,EAWZmB,EAAMf,EAAKC,EAAKC,EAAKC,EAVfzB,EAAMC,SAYlB/I,EAAOmD,IAAI,EAAG,EAAGkG,GACjBrJ,EAAOmD,IAAI,EAAG,EAAGmG,GACjBtJ,EAAOmD,IAAI,EAAG,EAAG4H,GACjB/K,EAAOmD,IAAI,EAAG,EAAGoG,GACjBvJ,EAAOmD,IAAI,EAAG,EAAGqG,GACjBxJ,EAAOmD,IAAI,EAAG,EAAG6H,GACjBhL,EAAOmD,IAAI,EAAG,EAAG8H,GACjBjL,EAAOmD,IAAI,EAAG,EAAG+H,GACjBlL,EAAOmD,IAAI,EAAG,EAAGgI,GACVnL,EAGToL,aAAa5O,GACXA,EAAIwG,EAAOY,YAAYpH,OACnBP,EAAIuH,KAAKsB,QACTuG,EAAKpP,EAAE2D,KACP0L,EAAKrP,EAAE4D,QACP0L,EAAK/O,EAAEoD,KACP4L,EAAKhP,EAAEqD,iBAUF4L,EAAMC,EAAK9L,EAAM+L,OACpB9J,EAAI6J,EAAI9L,KACRqC,EAAIyJ,EAAI7L,WACRgC,IAAMjC,GAAQqC,IAAM0J,SACfD,EACF,KACDE,EAAWjJ,EAAec,MAAM7D,EAAM+L,UAC1CC,EAAWA,EAASvG,aAAaqG,EAAK,EAAG,GAClCE,GAjBPN,IAAOC,GAET9R,QAAQC,2BACS2R,gBAAQC,kBAAUC,gBAAQC,4CAsBzC3J,EAAIjI,KAAKiF,IAAIwM,EAAIE,GACjBtJ,EAAIrI,KAAKiF,IAAIyM,EAAIE,UACrBvP,EAAIwP,EAAMxP,EAAG4F,EAAGI,YAIP4J,EAAUjQ,EAAGC,EAAG+D,EAAM+L,MAEzB/L,GAAQ,KAAO+L,GAAQ,WAClB/P,EAAEuM,KAAKtM,GAIZ+D,EAAO,GAAM,GAAK+L,EAAO,GAAM,GACjC/P,EAAI6P,EAAM7P,EAAGgE,EAAO,EAAG+L,EAAO,GAC9B9P,EAAI4P,EAAM5P,EAAG+D,EAAO,EAAG+L,EAAO,IACrB/L,EAAO,GAAM,GACtBhE,EAAI6P,EAAM7P,EAAGgE,EAAO,EAAG+L,GACvB9P,EAAI4P,EAAM5P,EAAG+D,EAAO,EAAG+L,IACdA,EAAO,GAAM,IACtB/P,EAAI6P,EAAM7P,EAAGgE,EAAM+L,EAAO,GAC1B9P,EAAI4P,EAAM5P,EAAG+D,EAAM+L,EAAO,QAGxBG,EAAWC,SAASnQ,EAAEgE,KAAO,EAAG,IAChCoM,EAAWD,SAASnQ,EAAEiE,QAAU,EAAG,IAEnC2I,EAAM5M,EAAEqQ,UAAU,EAAGH,EAAW,EAAG,EAAGE,EAAW,GACjDvD,EAAM5M,EAAEoQ,UAAU,EAAGH,EAAW,EAAG,EAAGE,EAAW,GAEjDtD,EAAM9M,EAAEqQ,UAAU,EAAGH,EAAW,EAAGE,EAAUpQ,EAAEiE,QAAU,GACzD8I,EAAM9M,EAAEoQ,UAAU,EAAGH,EAAW,EAAGE,EAAUnQ,EAAEgE,QAAU,GAEzD+I,EAAMhN,EAAEqQ,UAAUH,EAAUlQ,EAAEgE,KAAO,EAAG,EAAGoM,EAAW,GACtDnD,EAAMhN,EAAEoQ,UAAUH,EAAUjQ,EAAE+D,KAAO,EAAG,EAAGoM,EAAW,GAEtDlD,EAAMlN,EAAEqQ,UAAUH,EAAUlQ,EAAEgE,KAAO,EAAGoM,EAAUpQ,EAAEiE,QAAU,GAC9DkJ,EAAMlN,EAAEoQ,UAAUH,EAAUjQ,EAAE+D,KAAO,EAAGoM,EAAUnQ,EAAEgE,QAAU,GAG9DmJ,EAAK6C,EACPlJ,EAAeuJ,IAAI1D,EAAKM,GACxBnG,EAAeuJ,IAAIzD,EAAKM,GACxB+C,EACAE,GAEE/C,EAAK4C,EAAUlJ,EAAeuJ,IAAItD,EAAKE,GAAML,EAAKqD,EAAUE,GAC5D9C,EAAK2C,EAAUrD,EAAK7F,EAAewJ,IAAIxD,EAAKI,GAAM+C,EAAUE,GAC5D7C,EAAK0C,EAAU/C,EAAKnG,EAAewJ,IAAItD,EAAKJ,GAAMqD,EAAUE,GAC5D5C,EAAKyC,EAAUlJ,EAAeuJ,IAAI1D,EAAKE,GAAMK,EAAK+C,EAAUE,GAC5D5B,EAAKyB,EACPlJ,EAAewJ,IAAIvD,EAAKJ,GACxB7F,EAAeuJ,IAAIzD,EAAKE,GACxBmD,EACAE,GAEE3B,EAAKwB,EACPlJ,EAAewJ,IAAIzD,EAAKI,GACxBnG,EAAeuJ,IAAIrD,EAAKE,GACxB+C,EACAE,GAIExC,EAAM7G,EAAeuJ,IAAIlD,EAAIG,GACjCK,EAAI2C,IAAI/C,GACRI,EAAI0C,IAAI7B,OACJW,EAAMrI,EAAeuJ,IAAIhD,EAAIE,GAC7B8B,EAAMvI,EAAeuJ,IAAIjD,EAAIE,GAC7BgC,EAAMxI,EAAewJ,IAAInD,EAAIC,GACjCkC,EAAIe,IAAIhD,GACRiC,EAAIe,IAAI9B,OAGJwB,EAAWjJ,EAAec,MAAM,EAAI+F,EAAI5J,KAAM,EAAI4J,EAAI3J,gBAC1D+L,EAAWA,EAASvG,aAAamE,EAAK,EAAG,GACzCoC,EAAWA,EAASvG,aAAa2F,EAAKxB,EAAI5J,KAAM,GAChDgM,EAAWA,EAASvG,aAAa6F,EAAK,EAAG1B,EAAI3J,SAC7C+L,EAAWA,EAASvG,aAAa8F,EAAK3B,EAAI5J,KAAM4J,EAAI3J,SAC7C+L,EAASK,UAAU,EAAGrM,EAAO,EAAG,EAAG+L,EAAO,GAE5CE,CAAU5P,EA9EjBO,EAAIiP,EAAMjP,EAAGqF,EAAGI,GA8EOJ,EAAGI,GAG5BmK,gBAAUnT,yDAAU,MACK,iBAAZA,QACH,IAAIsF,UAAU,mCAEhBG,IAAEA,EAAM,EAARG,IAAWA,EAAM,GAAM5F,MACxBI,OAAOgT,SAAS3N,GAAM,MAAM,IAAIH,UAAU,4BAC1ClF,OAAOgT,SAASxN,GAAM,MAAM,IAAIN,UAAU,2BAC3CG,GAAOG,EAAK,MAAM,IAAItF,WAAW,oCACjCwJ,EAAY,IAAIC,EAAOQ,KAAK5D,KAAM4D,KAAK3D,aACtC,IAAIhF,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAAK,OAC5BoI,EAAMO,KAAKgC,OAAO3K,GACxBqD,EAAQ+E,EAAK,CAAEvE,IAAAA,EAAKG,IAAAA,EAAKT,OAAQ6E,IACjCF,EAAU4C,OAAO9K,EAAGoI,UAEfF,EAGTuJ,mBAAarT,yDAAU,MACE,iBAAZA,QACH,IAAIsF,UAAU,mCAEhBG,IAAEA,EAAM,EAARG,IAAWA,EAAM,GAAM5F,MACxBI,OAAOgT,SAAS3N,GAAM,MAAM,IAAIH,UAAU,4BAC1ClF,OAAOgT,SAASxN,GAAM,MAAM,IAAIN,UAAU,2BAC3CG,GAAOG,EAAK,MAAM,IAAItF,WAAW,oCACjCwJ,EAAY,IAAIC,EAAOQ,KAAK5D,KAAM4D,KAAK3D,aACtC,IAAIhF,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAAK,OAC/BqI,EAASM,KAAKuC,UAAUlL,GAC9BqD,EAAQgF,EAAQ,CACdxE,IAAKA,EACLG,IAAKA,EACLT,OAAQ8E,IAEVH,EAAUmD,UAAUrL,EAAGqI,UAElBH,EAGTwJ,iBACQC,EAAS5S,KAAK6S,KAAKjJ,KAAK3D,QAAU,OACnC,IAAIhF,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkS,EAAQlS,IAAK,KAC3BoS,EAAQlJ,KAAKpD,IAAIvF,EAAGP,GACpBqS,EAAOnJ,KAAKpD,IAAIvF,EAAG2I,KAAK3D,QAAU,EAAIvF,QACrC6I,IAAItI,EAAGP,EAAGqS,QACVxJ,IAAItI,EAAG2I,KAAK3D,QAAU,EAAIvF,EAAGoS,UAG/BlJ,KAGToJ,oBACQJ,EAAS5S,KAAK6S,KAAKjJ,KAAK5D,KAAO,OAChC,IAAItF,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,QAC3B,IAAIO,EAAI,EAAGA,EAAI2R,EAAQ3R,IAAK,KAC3B6R,EAAQlJ,KAAKpD,IAAIvF,EAAGP,GACpBqS,EAAOnJ,KAAKpD,IAAIoD,KAAK5D,KAAO,EAAI/E,EAAGP,QAClC6I,IAAItI,EAAGP,EAAGqS,QACVxJ,IAAIK,KAAK5D,KAAO,EAAI/E,EAAGP,EAAGoS,UAG5BlJ,KAGTqJ,iBAAiBzE,GACfA,EAAQpF,EAAOY,YAAYwE,OAEvBlO,EAAIsJ,KAAK5D,KACTzF,EAAIqJ,KAAK3D,QACT3C,EAAIkL,EAAMxI,KACVkN,EAAI1E,EAAMvI,QAEVG,EAAS,IAAIgD,EAAO9I,EAAIgD,EAAG/C,EAAI2S,OAC9B,IAAIjS,EAAI,EAAGA,EAAIX,EAAGW,QAChB,IAAIP,EAAI,EAAGA,EAAIH,EAAGG,QAChB,IAAImB,EAAI,EAAGA,EAAIyB,EAAGzB,QAChB,IAAIP,EAAI,EAAGA,EAAI4R,EAAG5R,IACrB8E,EAAOmD,IAAIjG,EAAIrC,EAAIY,EAAGqR,EAAIxS,EAAIY,EAAGsI,KAAKpD,IAAIvF,EAAGP,GAAK8N,EAAMhI,IAAI3E,EAAGP,WAKhE8E,EAGT+M,gBACM/M,EAAS,IAAIgD,EAAOQ,KAAK3D,QAAS2D,KAAK5D,UACtC,IAAI/E,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,IAChC0F,EAAOmD,IAAI7I,EAAGO,EAAG2I,KAAKpD,IAAIvF,EAAGP,WAG1B0F,EAGTgN,eAASC,yDAAkBC,MACpB,IAAIrS,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,SACxB8K,OAAO9K,EAAG2I,KAAKgC,OAAO3K,GAAG+B,KAAKqQ,WAE9BzJ,KAGT2J,kBAAYF,yDAAkBC,MACvB,IAAIrS,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,SAC3BqL,UAAUrL,EAAG2I,KAAKuC,UAAUlL,GAAG+B,KAAKqQ,WAEpCzJ,KAGTyI,UAAU9J,EAAUC,EAAQC,EAAaC,GACvCJ,EAAWsB,KAAMrB,EAAUC,EAAQC,EAAaC,OAC5CS,EAAY,IAAIC,EAClBZ,EAASD,EAAW,EACpBG,EAAYD,EAAc,OAEvB,IAAIxH,EAAIsH,EAAUtH,GAAKuH,EAAQvH,QAC7B,IAAIP,EAAI+H,EAAa/H,GAAKgI,EAAWhI,IACxCyI,EAAUI,IAAItI,EAAIsH,EAAU7H,EAAI+H,EAAamB,KAAKpD,IAAIvF,EAAGP,WAGtDyI,EAGTqK,aAAaC,EAAShL,EAAaC,WACbhE,IAAhB+D,IAA2BA,EAAc,QAC3B/D,IAAdgE,IAAyBA,EAAYkB,KAAK3D,QAAU,GAEtDwC,EAAcC,GACdD,EAAc,GACdA,GAAemB,KAAK3D,SACpByC,EAAY,GACZA,GAAakB,KAAK3D,cAEZ,IAAItG,WAAW,6BAGnBwJ,EAAY,IAAIC,EAAOqK,EAAQ7T,OAAQ8I,EAAYD,EAAc,OAChE,IAAIxH,EAAI,EAAGA,EAAIwS,EAAQ7T,OAAQqB,QAC7B,IAAIP,EAAI+H,EAAa/H,GAAKgI,EAAWhI,IAAK,IACzC+S,EAAQxS,GAAK,GAAKwS,EAAQxS,IAAM2I,KAAK5D,WACjC,IAAIrG,6CAAsC8T,EAAQxS,KAE1DkI,EAAUI,IAAItI,EAAGP,EAAI+H,EAAamB,KAAKpD,IAAIiN,EAAQxS,GAAIP,WAGpDyI,EAGTuK,gBAAgBD,EAASlL,EAAUC,WAChB9D,IAAb6D,IAAwBA,EAAW,QACxB7D,IAAX8D,IAAsBA,EAASoB,KAAK5D,KAAO,GAE7CuC,EAAWC,GACXD,EAAW,GACXA,GAAYqB,KAAK5D,MACjBwC,EAAS,GACTA,GAAUoB,KAAK5D,WAET,IAAIrG,WAAW,6BAGnBwJ,EAAY,IAAIC,EAAOZ,EAASD,EAAW,EAAGkL,EAAQ7T,YACrD,IAAIqB,EAAI,EAAGA,EAAIwS,EAAQ7T,OAAQqB,QAC7B,IAAIP,EAAI6H,EAAU7H,GAAK8H,EAAQ9H,IAAK,IACnC+S,EAAQxS,GAAK,GAAKwS,EAAQxS,IAAM2I,KAAK3D,cACjC,IAAItG,gDAAyC8T,EAAQxS,KAE7DkI,EAAUI,IAAI7I,EAAI6H,EAAUtH,EAAG2I,KAAKpD,IAAI9F,EAAG+S,EAAQxS,YAGhDkI,EAGTsC,aAAa/F,EAAQ6C,EAAUE,GAI7BH,EAAWsB,KAAMrB,EAFJA,GADb7C,EAAS0D,EAAOY,YAAYtE,IACGM,KAAO,EAEHyC,EADnBA,EAAc/C,EAAOO,QAAU,OAE1C,IAAIhF,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,SAC7B6I,IAAIhB,EAAWtH,EAAGwH,EAAc/H,EAAGgF,EAAOc,IAAIvF,EAAGP,WAGnDkJ,KAGT+J,UAAU5L,EAAYK,OAChBqL,EDpmCD,SAAsB/N,EAAQqC,EAAYK,SACxC,CACLiB,IAAKvB,EAAgBpC,EAAQqC,GAC7BuB,OAAQnB,EAAmBzC,EAAQ0C,ICimCrBwL,CAAahK,KAAM7B,EAAYK,GACzCe,EAAY,IAAIC,EAAOrB,EAAWnI,OAAQwI,EAAcxI,YACvD,IAAIqB,EAAI,EAAGA,EAAIwS,EAAQpK,IAAIzJ,OAAQqB,IAAK,KACvC4S,EAAWJ,EAAQpK,IAAIpI,OACtB,IAAIP,EAAI,EAAGA,EAAI+S,EAAQnK,OAAO1J,OAAQc,IAAK,KAC1CoT,EAAcL,EAAQnK,OAAO5I,GACjCyI,EAAUI,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIqN,EAAUC,YAGpC3K,EAGT4K,YACMjP,EAAM9E,KAAK8E,IAAI8E,KAAK5D,KAAM4D,KAAK3D,SAC/B8N,EAAQ,MACP,IAAI9S,EAAI,EAAGA,EAAI6D,EAAK7D,IACvB8S,GAASnK,KAAKpD,IAAIvF,EAAGA,UAEhB8S,EAGT7I,YACM/B,EAAY,IAAIC,EAAOQ,KAAK5D,KAAM4D,KAAK3D,aACtC,IAAIoD,EAAM,EAAGA,EAAMO,KAAK5D,KAAMqD,QAC5B,IAAIC,EAAS,EAAGA,EAASM,KAAK3D,QAASqD,IAC1CH,EAAUI,IAAIF,EAAKC,EAAQM,KAAKpD,IAAI6C,EAAKC,WAGtCH,EAGThH,IAAI6R,UACMA,OACD,aCrsCJ,SAAkBtO,OACnBvD,EAAMyG,EAASlD,EAAOM,UACrB,IAAI/E,EAAI,EAAGA,EAAIyE,EAAOM,OAAQ/E,MAC5B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,UAAWvF,EACpCyB,EAAIlB,IAAMyE,EAAOc,IAAIvF,EAAGP,UAGrByB,ED+rCM8R,CAASrK,UACb,gBC7rCJ,SAAqBlE,OACtBvD,EAAMyG,EAASlD,EAAOO,aACrB,IAAIhF,EAAI,EAAGA,EAAIyE,EAAOM,OAAQ/E,MAC5B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,UAAWvF,EACpCyB,EAAIzB,IAAMgF,EAAOc,IAAIvF,EAAGP,UAGrByB,EDurCM+R,CAAYtK,gBAChBlF,SCrrCJ,SAAgBgB,OACjB0H,EAAI,MACH,IAAInM,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClC0M,GAAK1H,EAAOc,IAAIvF,EAAGP,UAGhB0M,ED+qCM+G,CAAOvK,oBAER,IAAI4B,gCAAyBwI,KAIzCI,QAAQJ,UACEA,OACD,aCprCJ,SAAsBtO,OACvBvD,EAAMyG,EAASlD,EAAOM,KAAM,OAC3B,IAAI/E,EAAI,EAAGA,EAAIyE,EAAOM,OAAQ/E,MAC5B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,UAAWvF,EACpCyB,EAAIlB,IAAMyE,EAAOc,IAAIvF,EAAGP,UAGrByB,ED8qCMkS,CAAazK,UACjB,gBC5qCJ,SAAyBlE,OAC1BvD,EAAMyG,EAASlD,EAAOO,QAAS,OAC9B,IAAIhF,EAAI,EAAGA,EAAIyE,EAAOM,OAAQ/E,MAC5B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,UAAWvF,EACpCyB,EAAIzB,IAAMgF,EAAOc,IAAIvF,EAAGP,UAGrByB,EDsqCMmS,CAAgB1K,gBACpBlF,SCpqCJ,SAAoBgB,OACrB0H,EAAI,MACH,IAAInM,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClC0M,GAAK1H,EAAOc,IAAIvF,EAAGP,UAGhB0M,ED8pCMmH,CAAW3K,oBAEZ,IAAI4B,gCAAyBwI,KAIzCnR,KAAKmR,SACG7R,EAAMyH,KAAKzH,IAAI6R,UACbA,OACD,UACE,IAAI/S,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAC7BkB,EAAIlB,IAAM2I,KAAK3D,eAEV9D,MAEJ,aACE,IAAIlB,EAAI,EAAGA,EAAI2I,KAAK3D,QAAShF,IAChCkB,EAAIlB,IAAM2I,KAAK5D,YAEV7D,YAEJuC,SACIvC,EAAMyH,KAAK4K,mBAEZ,IAAIhJ,gCAAyBwI,KAIzCS,SAAST,OAAI3U,yDAAU,MACH,iBAAP2U,IACT3U,EAAU2U,EACVA,OAAKtP,GAEgB,iBAAZrF,QACH,IAAIsF,UAAU,mCAEhB+P,SAAEA,GAAW,EAAb7R,KAAmBA,EAAO+G,KAAK/G,KAAKmR,IAAQ3U,KAC1B,kBAAbqV,QACH,IAAI/P,UAAU,qCAEdqP,OACD,UACE5T,MAAMW,QAAQ8B,SACX,IAAI8B,UAAU,gCCtsCvB,SAAuBe,EAAQgP,EAAU7R,SACxCmD,EAAON,EAAOM,KACd+L,EAAOrM,EAAOO,QACdwO,EAAW,OAEZ,IAAIxT,EAAI,EAAGA,EAAI+E,EAAM/E,IAAK,KACzB0T,EAAO,EACPC,EAAO,EACPvS,EAAI,MACH,IAAI3B,EAAI,EAAGA,EAAIqR,EAAMrR,IACxB2B,EAAIqD,EAAOc,IAAIvF,EAAGP,GAAKmC,EAAK5B,GAC5B0T,GAAQtS,EACRuS,GAAQvS,EAAIA,EAEVqS,EACFD,EAASnO,MAAMsO,EAAQD,EAAOA,EAAQ5C,IAASA,EAAO,IAEtD0C,EAASnO,MAAMsO,EAAQD,EAAOA,EAAQ5C,GAAQA,UAG3C0C,EDorCMI,CAAcjL,KAAM8K,EAAU7R,OAElC,aACEzC,MAAMW,QAAQ8B,SACX,IAAI8B,UAAU,gCCrrCvB,SAA0Be,EAAQgP,EAAU7R,SAC3CmD,EAAON,EAAOM,KACd+L,EAAOrM,EAAOO,QACdwO,EAAW,OAEZ,IAAI/T,EAAI,EAAGA,EAAIqR,EAAMrR,IAAK,KACzBiU,EAAO,EACPC,EAAO,EACPvS,EAAI,MACH,IAAIpB,EAAI,EAAGA,EAAI+E,EAAM/E,IACxBoB,EAAIqD,EAAOc,IAAIvF,EAAGP,GAAKmC,EAAKnC,GAC5BiU,GAAQtS,EACRuS,GAAQvS,EAAIA,EAEVqS,EACFD,EAASnO,MAAMsO,EAAQD,EAAOA,EAAQ3O,IAASA,EAAO,IAEtDyO,EAASnO,MAAMsO,EAAQD,EAAOA,EAAQ3O,GAAQA,UAG3CyO,EDmqCMK,CAAiBlL,KAAM8K,EAAU7R,aAErC6B,KACiB,iBAAT7B,QACH,IAAI8B,UAAU,gCCpqCvB,SAAqBe,EAAQgP,EAAU7R,SACtCmD,EAAON,EAAOM,KACd+L,EAAOrM,EAAOO,QACduO,EAAOxO,EAAO+L,MAEhB4C,EAAO,EACPC,EAAO,EACPvS,EAAI,MACH,IAAIpB,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIqR,EAAMrR,IACxB2B,EAAIqD,EAAOc,IAAIvF,EAAGP,GAAKmC,EACvB8R,GAAQtS,EACRuS,GAAQvS,EAAIA,SAGZqS,GACME,EAAQD,EAAOA,EAAQH,IAASA,EAAO,IAEvCI,EAAQD,EAAOA,EAAQH,GAAQA,EDopC5BO,CAAYnL,KAAM8K,EAAU7R,iBAG7B,IAAI2I,gCAAyBwI,KAIzCgB,kBAAkBhB,EAAI3U,GACF,iBAAP2U,IACT3U,EAAU2U,EACVA,OAAKtP,SAED+P,EAAW7K,KAAK6K,SAAST,EAAI3U,WACxBqF,IAAPsP,SACKhU,KAAKkO,KAAKuG,OAEZ,IAAIxT,EAAI,EAAGA,EAAIwT,EAAS7U,OAAQqB,IACnCwT,EAASxT,GAAKjB,KAAKkO,KAAKuG,EAASxT,WAE5BwT,EAIX/S,OAAOsS,OAAI3U,yDAAU,MACD,iBAAP2U,IACT3U,EAAU2U,EACVA,OAAKtP,GAEgB,iBAAZrF,QACH,IAAIsF,UAAU,mCAEhBjD,OAAEA,EAASkI,KAAK/G,KAAKmR,IAAQ3U,SAC3B2U,OACD,UACE5T,MAAMW,QAAQW,SACX,IAAIiD,UAAU,kCCnrCvB,SAAqBe,EAAQ7C,OAC7B,IAAI5B,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCgF,EAAO6D,IAAItI,EAAGP,EAAGgF,EAAOc,IAAIvF,EAAGP,GAAKmC,EAAK5B,IDkrCvCgU,CAAYrL,KAAMlI,GACXkI,SAEJ,aACExJ,MAAMW,QAAQW,SACX,IAAIiD,UAAU,kCClrCvB,SAAwBe,EAAQ7C,OAChC,IAAI5B,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCgF,EAAO6D,IAAItI,EAAGP,EAAGgF,EAAOc,IAAIvF,EAAGP,GAAKmC,EAAKnC,IDirCvCwU,CAAetL,KAAMlI,GACdkI,eAEJlF,KACmB,iBAAXhD,QACH,IAAIiD,UAAU,kCCjrCvB,SAAmBe,EAAQ7C,OAC3B,IAAI5B,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCgF,EAAO6D,IAAItI,EAAGP,EAAGgF,EAAOc,IAAIvF,EAAGP,GAAKmC,GDgrClCsS,CAAUvL,KAAMlI,GACTkI,mBAGD,IAAI4B,gCAAyBwI,KAIzCoB,MAAMpB,OAAI3U,yDAAU,MACA,iBAAP2U,IACT3U,EAAU2U,EACVA,OAAKtP,GAEgB,iBAAZrF,QACH,IAAIsF,UAAU,iCAElByQ,EAAQ/V,EAAQ+V,aACZpB,OACD,cACWtP,IAAV0Q,EACFA,EC/rCH,SAAuB1P,SACtB0P,EAAQ,OACT,IAAInU,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,IAAK,KAChCkB,EAAM,MACL,IAAIzB,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCyB,GAAOnC,KAAKgB,IAAI0E,EAAOc,IAAIvF,EAAGP,GAAI,IAAMgF,EAAOO,QAAU,GAE3DmP,EAAM9O,KAAKtG,KAAKkO,KAAK/L,WAEhBiT,EDsrCSC,CAAczL,WACjB,IAAKxJ,MAAMW,QAAQqU,SAClB,IAAIzQ,UAAU,iCCrrCvB,SAAoBe,EAAQ0P,OAC5B,IAAInU,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCgF,EAAO6D,IAAItI,EAAGP,EAAGgF,EAAOc,IAAIvF,EAAGP,GAAK0U,EAAMnU,IDorCxCqU,CAAW1L,KAAMwL,GACVxL,SAEJ,iBACWlF,IAAV0Q,EACFA,ECprCH,SAA0B1P,SACzB0P,EAAQ,OACT,IAAI1U,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAAK,KACnCyB,EAAM,MACL,IAAIlB,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,IAC/BkB,GAAOnC,KAAKgB,IAAI0E,EAAOc,IAAIvF,EAAGP,GAAI,IAAMgF,EAAOM,KAAO,GAExDoP,EAAM9O,KAAKtG,KAAKkO,KAAK/L,WAEhBiT,ED2qCSG,CAAiB3L,WACpB,IAAKxJ,MAAMW,QAAQqU,SAClB,IAAIzQ,UAAU,iCC1qCvB,SAAuBe,EAAQ0P,OAC/B,IAAInU,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCgF,EAAO6D,IAAItI,EAAGP,EAAGgF,EAAOc,IAAIvF,EAAGP,GAAK0U,EAAM1U,IDyqCxC8U,CAAc5L,KAAMwL,GACbxL,eAEJlF,UACWA,IAAV0Q,EACFA,ECzqCH,SAAqB1P,SACpB+P,EAAU/P,EAAO8O,KAAO,MAC1BrS,EAAM,MACL,IAAIzB,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,QAC7B,IAAIO,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,IAC/BkB,GAAOnC,KAAKgB,IAAI0E,EAAOc,IAAIvF,EAAGP,GAAI,GAAK+U,SAGpCzV,KAAKkO,KAAK/L,GDiqCDuT,CAAY9L,WACf,GAAqB,iBAAVwL,QACV,IAAIzQ,UAAU,iCChqCvB,SAAkBe,EAAQ0P,OAC1B,IAAInU,EAAI,EAAGA,EAAIyE,EAAOM,KAAM/E,QAC1B,IAAIP,EAAI,EAAGA,EAAIgF,EAAOO,QAASvF,IAClCgF,EAAO6D,IAAItI,EAAGP,EAAGgF,EAAOc,IAAIvF,EAAGP,GAAK0U,GD+pClCO,CAAS/L,KAAMwL,GACRxL,mBAGD,IAAI4B,gCAAyBwI,KAIzCtQ,SAASrE,UACAoG,EAAyBmE,KAAMvK,IAW1C,SAASiU,EAAetR,EAAGC,UAClBD,EAAIC,EARb8G,EAAenF,UAAUsG,MAAQ,SACX,oBAAX0L,SACT7M,EAAenF,UACbgS,OAAOC,IAAI,+BF53CR,kBACEpQ,EAAyBmE,QEo4ClCb,EAAeU,OAASV,EAAe+M,KACvC/M,EAAegN,UAAYhN,EAAeiN,QAC1CjN,EAAekN,SAAWlN,EAAegF,KACzChF,EAAenF,UAAUqS,SAAWlN,EAAenF,UAAUmK,KAC7DhF,EAAemN,SAAWnN,EAAeoN,IACzCpN,EAAenF,UAAUwS,OAASrN,EAAenF,UAAU8H,IAC3D3C,EAAenF,UAAUyS,cACvBtN,EAAenF,UAAUqP,iBAEZ,MAAM7J,UAAeL,EAClCjD,YAAYwQ,EAAOC,cAEbnN,EAAOa,SAASqM,UACXA,EAAMpL,QACR,GAAIzL,OAAOC,UAAU4W,IAAUA,EAAQ,EAAG,SAE1CnX,KAAO,KACRM,OAAOC,UAAU6W,IAAaA,EAAW,SAKrC,IAAI5R,UAAU,2CAJf,IAAI1D,EAAI,EAAGA,EAAIqV,EAAOrV,SACpB9B,KAAKmH,KAAK,IAAIoI,aAAa6H,QAK/B,CAAA,IAAInW,MAAMW,QAAQuV,SAkBjB,IAAI3R,UACR,wDAnB6B,OAEzB6R,EAAYF,KAClBA,EAAQE,EAAU5W,OAEM,iBADxB2W,EAAWC,EAAU,GAAG5W,SACyB,IAAb2W,QAC5B,IAAI5R,UACR,0DAGCxF,KAAO,OACP,IAAI8B,EAAI,EAAGA,EAAIqV,EAAOrV,IAAK,IAC1BuV,EAAUvV,GAAGrB,SAAW2W,QACpB,IAAI5W,WAAW,sCAElBR,KAAKmH,KAAKoI,aAAaxG,KAAKsO,EAAUvV,mBAO1C+E,KAAOsQ,OACPrQ,QAAUsQ,EACR3M,KAGTL,IAAIsK,EAAUC,EAAajL,eACpB1J,KAAK0U,GAAUC,GAAejL,EAC5Be,KAGTpD,IAAIqN,EAAUC,UACLlK,KAAKzK,KAAK0U,GAAUC,GAG7B2C,UAAUjT,MACR+D,EAAcqC,KAAMpG,GACF,IAAdoG,KAAK5D,WACD,IAAIrG,WAAW,sDAElBR,KAAKuX,OAAOlT,EAAO,QACnBwC,MAAQ,EACN4D,KAGT+M,OAAOnT,EAAOsF,eACEpE,IAAVoE,IACFA,EAAQtF,EACRA,EAAQoG,KAAK5D,MAEfuB,EAAcqC,KAAMpG,GAAO,GAC3BsF,EAAQ4F,aAAaxG,KAAKR,EAAekC,KAAMd,SAC1C3J,KAAKuX,OAAOlT,EAAO,EAAGsF,QACtB9C,MAAQ,EACN4D,KAGTgN,aAAapT,MACXiE,EAAiBmC,KAAMpG,GACF,IAAjBoG,KAAK3D,cACD,IAAItG,WAAW,iDAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAAK,OAC5B4V,EAAS,IAAInI,aAAa9E,KAAK3D,QAAU,OAC1C,IAAIvF,EAAI,EAAGA,EAAI8C,EAAO9C,IACzBmW,EAAOnW,GAAKkJ,KAAKzK,KAAK8B,GAAGP,OAEtB,IAAIA,EAAI8C,EAAQ,EAAG9C,EAAIkJ,KAAK3D,QAASvF,IACxCmW,EAAOnW,EAAI,GAAKkJ,KAAKzK,KAAK8B,GAAGP,QAE1BvB,KAAK8B,GAAK4V,cAEZ5Q,SAAW,EACT2D,KAGTkN,UAAUtT,EAAOsF,QACM,IAAVA,IACTA,EAAQtF,EACRA,EAAQoG,KAAK3D,SAEfwB,EAAiBmC,KAAMpG,GAAO,GAC9BsF,EAAQjB,EAAkB+B,KAAMd,OAC3B,IAAI7H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,IAAK,OAC5B4V,EAAS,IAAInI,aAAa9E,KAAK3D,QAAU,OAC3CvF,EAAI,OACDA,EAAI8C,EAAO9C,IAChBmW,EAAOnW,GAAKkJ,KAAKzK,KAAK8B,GAAGP,OAE3BmW,EAAOnW,KAAOoI,EAAM7H,GACbP,EAAIkJ,KAAK3D,QAAU,EAAGvF,IAC3BmW,EAAOnW,GAAKkJ,KAAKzK,KAAK8B,GAAGP,EAAI,QAE1BvB,KAAK8B,GAAK4V,cAEZ5Q,SAAW,EACT2D,OEjgDJ,SAA+Bb,EAAgBK,GACpDL,EAAenF,UAAU0O,IAAM,SAAazJ,SACrB,iBAAVA,EAA2Be,KAAKmN,KAAKlO,GACzCe,KAAKoN,KAAKnO,IAGnBE,EAAenF,UAAUmT,KAAO,SAAclO,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAUoT,KAAO,SAActR,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAeuJ,IAAM,SAAa5M,EAAQmD,UACtB,IAAIO,EAAO1D,GACZ4M,IAAIzJ,IAGvBE,EAAenF,UAAU2O,IAAM,SAAa1J,SACrB,iBAAVA,EAA2Be,KAAKqN,KAAKpO,GACzCe,KAAKsN,KAAKrO,IAGnBE,EAAenF,UAAUqT,KAAO,SAAcpO,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAUsT,KAAO,SAAcxR,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAewJ,IAAM,SAAa7M,EAAQmD,UACtB,IAAIO,EAAO1D,GACZ6M,IAAI1J,IAEvBE,EAAenF,UAAUuT,SAAWpO,EAAenF,UAAU2O,IAC7DxJ,EAAenF,UAAUwT,UAAYrO,EAAenF,UAAUqT,KAC9DlO,EAAenF,UAAUyT,UAAYtO,EAAenF,UAAUsT,KAC9DnO,EAAeoO,SAAWpO,EAAewJ,IAEzCxJ,EAAenF,UAAU0T,IAAM,SAAazO,SACrB,iBAAVA,EAA2Be,KAAK+B,KAAK9C,GACzCe,KAAK2N,KAAK1O,IAGnBE,EAAenF,UAAU+H,KAAO,SAAc9C,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAU2T,KAAO,SAAc7R,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAeuO,IAAM,SAAa5R,EAAQmD,UACtB,IAAIO,EAAO1D,GACZ4R,IAAIzO,IAEvBE,EAAenF,UAAU4T,SAAWzO,EAAenF,UAAU0T,IAC7DvO,EAAenF,UAAU6T,UAAY1O,EAAenF,UAAU+H,KAC9D5C,EAAenF,UAAU8T,UAAY3O,EAAenF,UAAU2T,KAC9DxO,EAAeyO,SAAWzO,EAAeuO,IAEzCvO,EAAenF,UAAU+T,IAAM,SAAa9O,SACrB,iBAAVA,EAA2Be,KAAKgO,KAAK/O,GACzCe,KAAKiO,KAAKhP,IAGnBE,EAAenF,UAAUgU,KAAO,SAAc/O,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAUiU,KAAO,SAAcnS,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAe4O,IAAM,SAAajS,EAAQmD,UACtB,IAAIO,EAAO1D,GACZiS,IAAI9O,IAEvBE,EAAenF,UAAUkU,OAAS/O,EAAenF,UAAU+T,IAC3D5O,EAAenF,UAAUmU,QAAUhP,EAAenF,UAAUgU,KAC5D7O,EAAenF,UAAUoU,QAAUjP,EAAenF,UAAUiU,KAC5D9O,EAAe+O,OAAS/O,EAAe4O,IAEvC5O,EAAenF,UAAUqU,IAAM,SAAapP,SACrB,iBAAVA,EAA2Be,KAAKsO,KAAKrP,GACzCe,KAAKuO,KAAKtP,IAGnBE,EAAenF,UAAUsU,KAAO,SAAcrP,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAUuU,KAAO,SAAczS,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAekP,IAAM,SAAavS,EAAQmD,UACtB,IAAIO,EAAO1D,GACZuS,IAAIpP,IAEvBE,EAAenF,UAAUwU,QAAUrP,EAAenF,UAAUqU,IAC5DlP,EAAenF,UAAUyU,SAAWtP,EAAenF,UAAUsU,KAC7DnP,EAAenF,UAAU0U,SAAWvP,EAAenF,UAAUuU,KAC7DpP,EAAeqP,QAAUrP,EAAekP,IAExClP,EAAenF,UAAU2U,IAAM,SAAa1P,SACrB,iBAAVA,EAA2Be,KAAK4O,KAAK3P,GACzCe,KAAK6O,KAAK5P,IAGnBE,EAAenF,UAAU4U,KAAO,SAAc3P,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAU6U,KAAO,SAAc/S,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAewP,IAAM,SAAa7S,EAAQmD,UACtB,IAAIO,EAAO1D,GACZ6S,IAAI1P,IAGvBE,EAAenF,UAAU8U,GAAK,SAAY7P,SACnB,iBAAVA,EAA2Be,KAAK+O,IAAI9P,GACxCe,KAAKgP,IAAI/P,IAGlBE,EAAenF,UAAU+U,IAAM,SAAa9P,OACrC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAUgV,IAAM,SAAalT,MAC1CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAe2P,GAAK,SAAYhT,EAAQmD,UACpB,IAAIO,EAAO1D,GACZgT,GAAG7P,IAGtBE,EAAenF,UAAUiV,IAAM,SAAahQ,SACrB,iBAAVA,EAA2Be,KAAKkP,KAAKjQ,GACzCe,KAAKmP,KAAKlQ,IAGnBE,EAAenF,UAAUkV,KAAO,SAAcjQ,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKmI,UAG7Be,MAGTb,EAAenF,UAAUmV,KAAO,SAAcrT,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,GAAKgF,EAAOc,IAAIvF,EAAGP,WAG3CkJ,MAGTb,EAAe8P,IAAM,SAAanT,EAAQmD,UACtB,IAAIO,EAAO1D,GACZmT,IAAIhQ,IAGvBE,EAAenF,UAAUoV,UAAY,SAAmBnQ,SACjC,iBAAVA,EAA2Be,KAAKqP,WAAWpQ,GAC/Ce,KAAKsP,WAAWrQ,IAGzBE,EAAenF,UAAUqV,WAAa,SAAoBpQ,OACnD,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,IAAMmI,UAG9Be,MAGTb,EAAenF,UAAUsV,WAAa,SAAoBxT,MACxDA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,IAAMgF,EAAOc,IAAIvF,EAAGP,WAG5CkJ,MAGTb,EAAeiQ,UAAY,SAAmBtT,EAAQmD,UAClC,IAAIO,EAAO1D,GACZsT,UAAUnQ,IAG7BE,EAAenF,UAAUuV,0BAA4B,SAAmCtQ,SACjE,iBAAVA,EAA2Be,KAAKwP,2BAA2BvQ,GAC/De,KAAKyP,2BAA2BxQ,IAGzCE,EAAenF,UAAUwV,2BAA6B,SAAoCvQ,OACnF,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,IAAMmI,UAG9Be,MAGTb,EAAenF,UAAUyV,2BAA6B,SAAoC3T,MACxFA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,IAAMgF,EAAOc,IAAIvF,EAAGP,WAG5CkJ,MAGTb,EAAeoQ,0BAA4B,SAAmCzT,EAAQmD,UAClE,IAAIO,EAAO1D,GACZyT,0BAA0BtQ,IAG7CE,EAAenF,UAAU0V,WAAa,SAAoBzQ,SACnC,iBAAVA,EAA2Be,KAAK2P,YAAY1Q,GAChDe,KAAK4P,YAAY3Q,IAG1BE,EAAenF,UAAU2V,YAAc,SAAqB1Q,OACrD,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,KAAOmI,UAG/Be,MAGTb,EAAenF,UAAU4V,YAAc,SAAqB9T,MAC1DA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGkJ,KAAKpD,IAAIvF,EAAGP,KAAOgF,EAAOc,IAAIvF,EAAGP,WAG7CkJ,MAGTb,EAAeuQ,WAAa,SAAoB5T,EAAQmD,UACpC,IAAIO,EAAO1D,GACZ4T,WAAWzQ,IAE9BE,EAAenF,UAAU6V,mBAAqB1Q,EAAenF,UAAU0V,WACvEvQ,EAAenF,UAAU8V,oBAAsB3Q,EAAenF,UAAU2V,YACxExQ,EAAenF,UAAU+V,oBAAsB5Q,EAAenF,UAAU4V,YACxEzQ,EAAe0Q,mBAAqB1Q,EAAeuQ,WAEnDvQ,EAAenF,UAAUgW,IAAM,eACxB,IAAI3Y,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,GAAKkJ,KAAKpD,IAAIvF,EAAGP,WAG1BkJ,MAGTb,EAAe6Q,IAAM,SAAalU,UACd,IAAI0D,EAAO1D,GACZkU,OAGnB7Q,EAAenF,UAAUlB,IAAM,eACxB,IAAIzB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK0C,IAAIkH,KAAKpD,IAAIvF,EAAGP,YAGjCkJ,MAGTb,EAAerG,IAAM,SAAagD,UACd,IAAI0D,EAAO1D,GACZhD,OAGnBqG,EAAenF,UAAUiW,KAAO,eACzB,IAAI5Y,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK6Z,KAAKjQ,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAe8Q,KAAO,SAAcnU,UAChB,IAAI0D,EAAO1D,GACZmU,QAGnB9Q,EAAenF,UAAUkW,MAAQ,eAC1B,IAAI7Y,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK8Z,MAAMlQ,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAe+Q,MAAQ,SAAepU,UAClB,IAAI0D,EAAO1D,GACZoU,SAGnB/Q,EAAenF,UAAUmW,KAAO,eACzB,IAAI9Y,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK+Z,KAAKnQ,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAegR,KAAO,SAAcrU,UAChB,IAAI0D,EAAO1D,GACZqU,QAGnBhR,EAAenF,UAAUoW,MAAQ,eAC1B,IAAI/Y,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKga,MAAMpQ,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAeiR,MAAQ,SAAetU,UAClB,IAAI0D,EAAO1D,GACZsU,SAGnBjR,EAAenF,UAAUqW,KAAO,eACzB,IAAIhZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKia,KAAKrQ,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAekR,KAAO,SAAcvU,UAChB,IAAI0D,EAAO1D,GACZuU,QAGnBlR,EAAenF,UAAUsW,MAAQ,eAC1B,IAAIjZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKka,MAAMtQ,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAemR,MAAQ,SAAexU,UAClB,IAAI0D,EAAO1D,GACZwU,SAGnBnR,EAAenF,UAAUuW,KAAO,eACzB,IAAIlZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKma,KAAKvQ,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAeoR,KAAO,SAAczU,UAChB,IAAI0D,EAAO1D,GACZyU,QAGnBpR,EAAenF,UAAUiP,KAAO,eACzB,IAAI5R,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK6S,KAAKjJ,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAe8J,KAAO,SAAcnN,UAChB,IAAI0D,EAAO1D,GACZmN,QAGnB9J,EAAenF,UAAUwW,MAAQ,eAC1B,IAAInZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKoa,MAAMxQ,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAeqR,MAAQ,SAAe1U,UAClB,IAAI0D,EAAO1D,GACZ0U,SAGnBrR,EAAenF,UAAUyW,IAAM,eACxB,IAAIpZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKqa,IAAIzQ,KAAKpD,IAAIvF,EAAGP,YAGjCkJ,MAGTb,EAAesR,IAAM,SAAa3U,UACd,IAAI0D,EAAO1D,GACZ2U,OAGnBtR,EAAenF,UAAU0W,KAAO,eACzB,IAAIrZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKsa,KAAK1Q,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAeuR,KAAO,SAAc5U,UAChB,IAAI0D,EAAO1D,GACZ4U,QAGnBvR,EAAenF,UAAU2W,IAAM,eACxB,IAAItZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKua,IAAI3Q,KAAKpD,IAAIvF,EAAGP,YAGjCkJ,MAGTb,EAAewR,IAAM,SAAa7U,UACd,IAAI0D,EAAO1D,GACZ6U,OAGnBxR,EAAenF,UAAU4W,MAAQ,eAC1B,IAAIvZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKwa,MAAM5Q,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAeyR,MAAQ,SAAe9U,UAClB,IAAI0D,EAAO1D,GACZ8U,SAGnBzR,EAAenF,UAAU3D,MAAQ,eAC1B,IAAIgB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKC,MAAM2J,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAe9I,MAAQ,SAAeyF,UAClB,IAAI0D,EAAO1D,GACZzF,SAGnB8I,EAAenF,UAAU6W,OAAS,eAC3B,IAAIxZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKya,OAAO7Q,KAAKpD,IAAIvF,EAAGP,YAGpCkJ,MAGTb,EAAe0R,OAAS,SAAgB/U,UACpB,IAAI0D,EAAO1D,GACZ+U,UAGnB1R,EAAenF,UAAU8W,IAAM,eACxB,IAAIzZ,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK0a,IAAI9Q,KAAKpD,IAAIvF,EAAGP,YAGjCkJ,MAGTb,EAAe2R,IAAM,SAAahV,UACd,IAAI0D,EAAO1D,GACZgV,OAGnB3R,EAAenF,UAAU+W,MAAQ,eAC1B,IAAI1Z,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK2a,MAAM/Q,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAe4R,MAAQ,SAAejV,UAClB,IAAI0D,EAAO1D,GACZiV,SAGnB5R,EAAenF,UAAUH,MAAQ,eAC1B,IAAIxC,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKyD,MAAMmG,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAetF,MAAQ,SAAeiC,UAClB,IAAI0D,EAAO1D,GACZjC,SAGnBsF,EAAenF,UAAUgX,KAAO,eACzB,IAAI3Z,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK4a,KAAKhR,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAe6R,KAAO,SAAclV,UAChB,IAAI0D,EAAO1D,GACZkV,QAGnB7R,EAAenF,UAAU+F,MAAQ,eAC1B,IAAI1I,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK2J,MAAMC,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAeY,MAAQ,SAAejE,UAClB,IAAI0D,EAAO1D,GACZiE,SAGnBZ,EAAenF,UAAUiX,KAAO,eACzB,IAAI5Z,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK6a,KAAKjR,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAe8R,KAAO,SAAcnV,UAChB,IAAI0D,EAAO1D,GACZmV,QAGnB9R,EAAenF,UAAUkX,IAAM,eACxB,IAAI7Z,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK8a,IAAIlR,KAAKpD,IAAIvF,EAAGP,YAGjCkJ,MAGTb,EAAe+R,IAAM,SAAapV,UACd,IAAI0D,EAAO1D,GACZoV,OAGnB/R,EAAenF,UAAUmX,KAAO,eACzB,IAAI9Z,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAK+a,KAAKnR,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAegS,KAAO,SAAcrV,UAChB,IAAI0D,EAAO1D,GACZqV,QAGnBhS,EAAenF,UAAUsK,KAAO,eACzB,IAAIjN,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKkO,KAAKtE,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAemF,KAAO,SAAcxI,UAChB,IAAI0D,EAAO1D,GACZwI,QAGnBnF,EAAenF,UAAUoX,IAAM,eACxB,IAAI/Z,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKgb,IAAIpR,KAAKpD,IAAIvF,EAAGP,YAGjCkJ,MAGTb,EAAeiS,IAAM,SAAatV,UACd,IAAI0D,EAAO1D,GACZsV,OAGnBjS,EAAenF,UAAUqX,KAAO,eACzB,IAAIha,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKib,KAAKrR,KAAKpD,IAAIvF,EAAGP,YAGlCkJ,MAGTb,EAAekS,KAAO,SAAcvV,UAChB,IAAI0D,EAAO1D,GACZuV,QAGnBlS,EAAenF,UAAUsX,MAAQ,eAC1B,IAAIja,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKkb,MAAMtR,KAAKpD,IAAIvF,EAAGP,YAGnCkJ,MAGTb,EAAemS,MAAQ,SAAexV,UAClB,IAAI0D,EAAO1D,GACZwV,SAGnBnS,EAAe/H,IAAM,SAAa0E,EAAQyV,UACtB,IAAI/R,EAAO1D,GACZ1E,IAAIma,IAGvBpS,EAAenF,UAAU5C,IAAM,SAAa6H,SACrB,iBAAVA,EAA2Be,KAAKwR,KAAKvS,GACzCe,KAAKyR,KAAKxS,IAGnBE,EAAenF,UAAUwX,KAAO,SAAcvS,OACvC,IAAI5H,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKgB,IAAI4I,KAAKpD,IAAIvF,EAAGP,GAAImI,WAGrCe,MAGTb,EAAenF,UAAUyX,KAAO,SAAc3V,MAC5CA,EAAS0D,EAAOY,YAAYtE,GACxBkE,KAAK5D,OAASN,EAAOM,MACvB4D,KAAK3D,UAAYP,EAAOO,cAClB,IAAItG,WAAW,yCAElB,IAAIsB,EAAI,EAAGA,EAAI2I,KAAK5D,KAAM/E,QACxB,IAAIP,EAAI,EAAGA,EAAIkJ,KAAK3D,QAASvF,SAC3B6I,IAAItI,EAAGP,EAAGV,KAAKgB,IAAI4I,KAAKpD,IAAIvF,EAAGP,GAAIgF,EAAOc,IAAIvF,EAAGP,YAGnDkJ,MFitBX0R,CAAsBvS,EAAgBK,GGngDvB,MAAMmS,UAAwBxS,EAC3CjD,YAAY3G,gBAELA,KAAOA,OACP6G,KAAO7G,EAAKS,YACZqG,QAAU9G,EAAK,GAAGS,OAGzB2J,IAAIsK,EAAUC,EAAajL,eACpB1J,KAAK0U,GAAUC,GAAejL,EAC5Be,KAGTpD,IAAIqN,EAAUC,UACLlK,KAAKzK,KAAK0U,GAAUC,UCbV0H,EACnB1V,YAAYJ,OAQNzE,EAAGP,EAAGmB,EAAGyB,EAAG9C,EAAGC,EAAG2M,EAClBqO,EAAQC,EANRC,GAFJjW,EAAS6V,EAAgBvR,YAAYtE,IAErBwF,QACZlF,EAAO2V,EAAG3V,KACVC,EAAU0V,EAAG1V,QACb2V,EAAc,IAAIlN,aAAa1I,GAC/B6V,EAAY,MAIX5a,EAAI,EAAGA,EAAI+E,EAAM/E,IACpB2a,EAAY3a,GAAKA,MAGnBwa,EAAS,IAAI/M,aAAa1I,GAErBtF,EAAI,EAAGA,EAAIuF,EAASvF,IAAK,KACvBO,EAAI,EAAGA,EAAI+E,EAAM/E,IACpBwa,EAAOxa,GAAK0a,EAAGnV,IAAIvF,EAAGP,OAGnBO,EAAI,EAAGA,EAAI+E,EAAM/E,IAAK,KACzBya,EAAO1b,KAAK8E,IAAI7D,EAAGP,GACnBF,EAAI,EACCqB,EAAI,EAAGA,EAAI6Z,EAAM7Z,IACpBrB,GAAKmb,EAAGnV,IAAIvF,EAAGY,GAAK4Z,EAAO5Z,GAE7B4Z,EAAOxa,IAAMT,EACbmb,EAAGpS,IAAItI,EAAGP,EAAG+a,EAAOxa,QAGtBqC,EAAI5C,EACCO,EAAIP,EAAI,EAAGO,EAAI+E,EAAM/E,IACpBjB,KAAK0C,IAAI+Y,EAAOxa,IAAMjB,KAAK0C,IAAI+Y,EAAOnY,MACxCA,EAAIrC,MAIJqC,IAAM5C,EAAG,KACNmB,EAAI,EAAGA,EAAIoE,EAASpE,IACvBpB,EAAIkb,EAAGnV,IAAIlD,EAAGzB,GACd8Z,EAAGpS,IAAIjG,EAAGzB,EAAG8Z,EAAGnV,IAAI9F,EAAGmB,IACvB8Z,EAAGpS,IAAI7I,EAAGmB,EAAGpB,GAGf2M,EAAIwO,EAAYtY,GAChBsY,EAAYtY,GAAKsY,EAAYlb,GAC7Bkb,EAAYlb,GAAK0M,EAEjByO,GAAaA,KAGXnb,EAAIsF,GAAyB,IAAjB2V,EAAGnV,IAAI9F,EAAGA,OACnBO,EAAIP,EAAI,EAAGO,EAAI+E,EAAM/E,IACxB0a,EAAGpS,IAAItI,EAAGP,EAAGib,EAAGnV,IAAIvF,EAAGP,GAAKib,EAAGnV,IAAI9F,EAAGA,SAKvCob,GAAKH,OACLC,YAAcA,OACdC,UAAYA,EAGnBE,iBACM5c,EAAOyK,KAAKkS,GACZE,EAAM7c,EAAK8G,YACV,IAAIvF,EAAI,EAAGA,EAAIsb,EAAKtb,OACA,IAAnBvB,EAAKqH,IAAI9F,EAAGA,UACP,SAGJ,EAGTub,MAAMpT,GACJA,EAAQO,EAAOY,YAAYnB,OAEvB8S,EAAK/R,KAAKkS,MACHH,EAAG3V,OAED6C,EAAM7C,WACX,IAAIwF,MAAM,gCAEd5B,KAAKmS,mBACD,IAAIvQ,MAAM,6BAMdvK,EAAGP,EAAGmB,EAHNF,EAAQkH,EAAM5C,QACdiW,EAAIrT,EAAM2K,aAAa5J,KAAKgS,YAAa,EAAGja,EAAQ,GACpDsE,EAAU0V,EAAG1V,YAGZpE,EAAI,EAAGA,EAAIoE,EAASpE,QAClBZ,EAAIY,EAAI,EAAGZ,EAAIgF,EAAShF,QACtBP,EAAI,EAAGA,EAAIiB,EAAOjB,IACrBwb,EAAE3S,IAAItI,EAAGP,EAAGwb,EAAE1V,IAAIvF,EAAGP,GAAKwb,EAAE1V,IAAI3E,EAAGnB,GAAKib,EAAGnV,IAAIvF,EAAGY,QAInDA,EAAIoE,EAAU,EAAGpE,GAAK,EAAGA,IAAK,KAC5BnB,EAAI,EAAGA,EAAIiB,EAAOjB,IACrBwb,EAAE3S,IAAI1H,EAAGnB,EAAGwb,EAAE1V,IAAI3E,EAAGnB,GAAKib,EAAGnV,IAAI3E,EAAGA,QAEjCZ,EAAI,EAAGA,EAAIY,EAAGZ,QACZP,EAAI,EAAGA,EAAIiB,EAAOjB,IACrBwb,EAAE3S,IAAItI,EAAGP,EAAGwb,EAAE1V,IAAIvF,EAAGP,GAAKwb,EAAE1V,IAAI3E,EAAGnB,GAAKib,EAAGnV,IAAIvF,EAAGY,WAIjDqa,wBAIH/c,EAAOyK,KAAKkS,OACX3c,EAAKwL,iBACF,IAAIa,MAAM,6BAEd2Q,EAAcvS,KAAKiS,UACnBG,EAAM7c,EAAK8G,YACV,IAAIvF,EAAI,EAAGA,EAAIsb,EAAKtb,IACvByb,GAAehd,EAAKqH,IAAI9F,EAAGA,UAEtByb,kCAIHhd,EAAOyK,KAAKkS,GACZ9V,EAAO7G,EAAK6G,KACZC,EAAU9G,EAAK8G,QACfiW,EAAI,IAAI9S,EAAOpD,EAAMC,OACpB,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IACvBO,EAAIP,EACNwb,EAAE3S,IAAItI,EAAGP,EAAGvB,EAAKqH,IAAIvF,EAAGP,IACfO,IAAMP,EACfwb,EAAE3S,IAAItI,EAAGP,EAAG,GAEZwb,EAAE3S,IAAItI,EAAGP,EAAG,UAIXwb,kCAIH/c,EAAOyK,KAAKkS,GACZ9V,EAAO7G,EAAK6G,KACZC,EAAU9G,EAAK8G,QACfiW,EAAI,IAAI9S,EAAOpD,EAAMC,OACpB,IAAIhF,EAAI,EAAGA,EAAI+E,EAAM/E,QACnB,IAAIP,EAAI,EAAGA,EAAIuF,EAASvF,IACvBO,GAAKP,EACPwb,EAAE3S,IAAItI,EAAGP,EAAGvB,EAAKqH,IAAIvF,EAAGP,IAExBwb,EAAE3S,IAAItI,EAAGP,EAAG,UAIXwb,sCAIA9b,MAAM8H,KAAK0B,KAAKgS,cCxKpB,SAASQ,EAAWpa,EAAGC,OACxBgG,EAAI,SACJjI,KAAK0C,IAAIV,GAAKhC,KAAK0C,IAAIT,IACzBgG,EAAIhG,EAAID,EACDhC,KAAK0C,IAAIV,GAAKhC,KAAKkO,KAAK,EAAIjG,EAAIA,IAE/B,IAANhG,GACFgG,EAAIjG,EAAIC,EACDjC,KAAK0C,IAAIT,GAAKjC,KAAKkO,KAAK,EAAIjG,EAAIA,IAElC,QCLYoU,EACnBvW,YAAY+C,OAON5H,EAAGP,EAAGmB,EAAGrB,EAJT8b,GAFJzT,EAAQ0S,EAAgBvR,YAAYnB,IAErBqC,QACX5K,EAAIuI,EAAM7C,KACVzF,EAAIsI,EAAM5C,QACVsW,EAAQ,IAAI7N,aAAanO,OAGxBsB,EAAI,EAAGA,EAAItB,EAAGsB,IAAK,KAClB2a,EAAM,MACLvb,EAAIY,EAAGZ,EAAIX,EAAGW,IACjBub,EAAMJ,EAAWI,EAAKF,EAAG9V,IAAIvF,EAAGY,OAEtB,IAAR2a,EAAW,KACTF,EAAG9V,IAAI3E,EAAGA,GAAK,IACjB2a,GAAOA,GAEJvb,EAAIY,EAAGZ,EAAIX,EAAGW,IACjBqb,EAAG/S,IAAItI,EAAGY,EAAGya,EAAG9V,IAAIvF,EAAGY,GAAK2a,OAE9BF,EAAG/S,IAAI1H,EAAGA,EAAGya,EAAG9V,IAAI3E,EAAGA,GAAK,GACvBnB,EAAImB,EAAI,EAAGnB,EAAIH,EAAGG,IAAK,KAC1BF,EAAI,EACCS,EAAIY,EAAGZ,EAAIX,EAAGW,IACjBT,GAAK8b,EAAG9V,IAAIvF,EAAGY,GAAKya,EAAG9V,IAAIvF,EAAGP,OAEhCF,GAAKA,EAAI8b,EAAG9V,IAAI3E,EAAGA,GACdZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACjBqb,EAAG/S,IAAItI,EAAGP,EAAG4b,EAAG9V,IAAIvF,EAAGP,GAAKF,EAAI8b,EAAG9V,IAAIvF,EAAGY,KAIhD0a,EAAM1a,IAAM2a,OAGTC,GAAKH,OACLI,MAAQH,EAGfN,MAAMpT,GACJA,EAAQO,EAAOY,YAAYnB,OAEvByT,EAAK1S,KAAK6S,GACVnc,EAAIgc,EAAGtW,QAEP6C,EAAM7C,OAAS1F,QACX,IAAIkL,MAAM,wCAEb5B,KAAK+S,mBACF,IAAInR,MAAM,gCAMdvK,EAAGP,EAAGmB,EAAGrB,EAHTmB,EAAQkH,EAAM5C,QACdiW,EAAIrT,EAAMqC,QACV3K,EAAI+b,EAAGrW,YAGNpE,EAAI,EAAGA,EAAItB,EAAGsB,QACZnB,EAAI,EAAGA,EAAIiB,EAAOjB,IAAK,KAC1BF,EAAI,EACCS,EAAIY,EAAGZ,EAAIX,EAAGW,IACjBT,GAAK8b,EAAG9V,IAAIvF,EAAGY,GAAKqa,EAAE1V,IAAIvF,EAAGP,OAE/BF,GAAKA,EAAI8b,EAAG9V,IAAI3E,EAAGA,GACdZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACjBib,EAAE3S,IAAItI,EAAGP,EAAGwb,EAAE1V,IAAIvF,EAAGP,GAAKF,EAAI8b,EAAG9V,IAAIvF,EAAGY,QAIzCA,EAAItB,EAAI,EAAGsB,GAAK,EAAGA,IAAK,KACtBnB,EAAI,EAAGA,EAAIiB,EAAOjB,IACrBwb,EAAE3S,IAAI1H,EAAGnB,EAAGwb,EAAE1V,IAAI3E,EAAGnB,GAAKkJ,KAAK8S,MAAM7a,QAElCZ,EAAI,EAAGA,EAAIY,EAAGZ,QACZP,EAAI,EAAGA,EAAIiB,EAAOjB,IACrBwb,EAAE3S,IAAItI,EAAGP,EAAGwb,EAAE1V,IAAIvF,EAAGP,GAAKwb,EAAE1V,IAAI3E,EAAGnB,GAAK4b,EAAG9V,IAAIvF,EAAGY,WAKjDqa,EAAE7J,UAAU,EAAG9R,EAAI,EAAG,EAAGoB,EAAQ,GAG1Cgb,iBACM1W,EAAU2D,KAAK6S,GAAGxW,YACjB,IAAIhF,EAAI,EAAGA,EAAIgF,EAAShF,OACL,IAAlB2I,KAAK8S,MAAMzb,UACN,SAGJ,kCAOHA,EAAGP,EAHH4b,EAAK1S,KAAK6S,GACVlc,EAAI+b,EAAGrW,QACPiW,EAAI,IAAI9S,EAAO7I,EAAGA,OAEjBU,EAAI,EAAGA,EAAIV,EAAGU,QACZP,EAAI,EAAGA,EAAIH,EAAGG,IACbO,EAAIP,EACNwb,EAAE3S,IAAItI,EAAGP,EAAG4b,EAAG9V,IAAIvF,EAAGP,IACbO,IAAMP,EACfwb,EAAE3S,IAAItI,EAAGP,EAAGkJ,KAAK8S,MAAMzb,IAEvBib,EAAE3S,IAAItI,EAAGP,EAAG,UAIXwb,6BAQHjb,EAAGP,EAAGmB,EAAGrB,EAJT8b,EAAK1S,KAAK6S,GACVzW,EAAOsW,EAAGtW,KACVC,EAAUqW,EAAGrW,QACbiW,EAAI,IAAI9S,EAAOpD,EAAMC,OAGpBpE,EAAIoE,EAAU,EAAGpE,GAAK,EAAGA,IAAK,KAC5BZ,EAAI,EAAGA,EAAI+E,EAAM/E,IACpBib,EAAE3S,IAAItI,EAAGY,EAAG,OAEdqa,EAAE3S,IAAI1H,EAAGA,EAAG,GACPnB,EAAImB,EAAGnB,EAAIuF,EAASvF,OACF,IAAjB4b,EAAG9V,IAAI3E,EAAGA,GAAU,KACtBrB,EAAI,EACCS,EAAIY,EAAGZ,EAAI+E,EAAM/E,IACpBT,GAAK8b,EAAG9V,IAAIvF,EAAGY,GAAKqa,EAAE1V,IAAIvF,EAAGP,OAG/BF,GAAKA,EAAI8b,EAAG9V,IAAI3E,EAAGA,GAEdZ,EAAIY,EAAGZ,EAAI+E,EAAM/E,IACpBib,EAAE3S,IAAItI,EAAGP,EAAGwb,EAAE1V,IAAIvF,EAAGP,GAAKF,EAAI8b,EAAG9V,IAAIvF,EAAGY,YAKzCqa,SC7IUU,EACnB9W,YAAY+C,OAAOxJ,yDAAU,GAGvBiB,GAFJuI,EAAQ0S,EAAgBvR,YAAYnB,IAEtB7C,KACVzF,EAAIsI,EAAM5C,cAER4W,2BACJA,GAA6B,EADzBC,4BAEJA,GAA8B,EAF1BC,cAGJA,GAAgB,GACd1d,MAMA2C,EAJAgb,EAAQC,QAAQJ,GAChBK,EAAQD,QAAQH,GAEhBK,GAAU,KAEV7c,EAAIC,KACDwc,EAME,CACL/a,EAAI6G,EAAMsK,YACV7S,EAAI0B,EAAEgE,KACNzF,EAAIyB,EAAEiE,QACNkX,GAAU,MACNC,EAAMJ,EACVA,EAAQE,EACRA,EAAQE,OAZRpb,EAAI6G,EAAMqC,QAEVrL,QAAQC,KACN,+FAYJkC,EAAI6G,EAAMqC,YAGRmS,EAAKrd,KAAK8E,IAAIxE,EAAGC,GACjB+c,EAAKtd,KAAK8E,IAAIxE,EAAI,EAAGC,GACrBC,EAAI,IAAIkO,aAAa4O,GACrBC,EAAI,IAAInU,EAAO9I,EAAG+c,GAClBG,EAAI,IAAIpU,EAAO7I,EAAGA,GAElB8G,EAAI,IAAIqH,aAAanO,GACrBkd,EAAO,IAAI/O,aAAapO,GAExBod,EAAK,IAAIhP,aAAa4O,OACrB,IAAIrc,EAAI,EAAGA,EAAIqc,EAAIrc,IAAKyc,EAAGzc,GAAKA,MAEjC0c,EAAM3d,KAAK8E,IAAIxE,EAAI,EAAGC,GACtBqd,EAAM5d,KAAKiF,IAAI,EAAGjF,KAAK8E,IAAIvE,EAAI,EAAGD,IAClCud,EAAM7d,KAAKiF,IAAI0Y,EAAKC,OAEnB,IAAI/b,EAAI,EAAGA,EAAIgc,EAAKhc,IAAK,IACxBA,EAAI8b,EAAK,CACXnd,EAAEqB,GAAK,MACF,IAAIZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBT,EAAEqB,GAAKua,EAAW5b,EAAEqB,GAAIG,EAAEwE,IAAIvF,EAAGY,OAEtB,IAATrB,EAAEqB,GAAU,CACVG,EAAEwE,IAAI3E,EAAGA,GAAK,IAChBrB,EAAEqB,IAAMrB,EAAEqB,QAEP,IAAIZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBe,EAAEuH,IAAItI,EAAGY,EAAGG,EAAEwE,IAAIvF,EAAGY,GAAKrB,EAAEqB,IAE9BG,EAAEuH,IAAI1H,EAAGA,EAAGG,EAAEwE,IAAI3E,EAAGA,GAAK,GAE5BrB,EAAEqB,IAAMrB,EAAEqB,OAGP,IAAInB,EAAImB,EAAI,EAAGnB,EAAIH,EAAGG,IAAK,IAC1BmB,EAAI8b,GAAgB,IAATnd,EAAEqB,GAAU,KACrBpB,EAAI,MACH,IAAIQ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBR,GAAKuB,EAAEwE,IAAIvF,EAAGY,GAAKG,EAAEwE,IAAIvF,EAAGP,GAE9BD,GAAKA,EAAIuB,EAAEwE,IAAI3E,EAAGA,OACb,IAAIZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBe,EAAEuH,IAAItI,EAAGP,EAAGsB,EAAEwE,IAAIvF,EAAGP,GAAKD,EAAIuB,EAAEwE,IAAIvF,EAAGY,IAG3CwF,EAAE3G,GAAKsB,EAAEwE,IAAI3E,EAAGnB,MAGdsc,GAASnb,EAAI8b,MACV,IAAI1c,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBsc,EAAEhU,IAAItI,EAAGY,EAAGG,EAAEwE,IAAIvF,EAAGY,OAIrBA,EAAI+b,EAAK,CACXvW,EAAExF,GAAK,MACF,IAAIZ,EAAIY,EAAI,EAAGZ,EAAIV,EAAGU,IACzBoG,EAAExF,GAAKua,EAAW/U,EAAExF,GAAIwF,EAAEpG,OAEf,IAAToG,EAAExF,GAAU,CACVwF,EAAExF,EAAI,GAAK,IACbwF,EAAExF,GAAK,EAAIwF,EAAExF,QAEV,IAAIZ,EAAIY,EAAI,EAAGZ,EAAIV,EAAGU,IACzBoG,EAAEpG,IAAMoG,EAAExF,GAEZwF,EAAExF,EAAI,IAAM,KAEdwF,EAAExF,IAAMwF,EAAExF,GACNA,EAAI,EAAIvB,GAAc,IAAT+G,EAAExF,GAAU,KACtB,IAAIZ,EAAIY,EAAI,EAAGZ,EAAIX,EAAGW,IACzBwc,EAAKxc,GAAK,MAEP,IAAIA,EAAIY,EAAI,EAAGZ,EAAIX,EAAGW,QACpB,IAAIP,EAAImB,EAAI,EAAGnB,EAAIH,EAAGG,IACzB+c,EAAKxc,IAAMoG,EAAE3G,GAAKsB,EAAEwE,IAAIvF,EAAGP,OAG1B,IAAIA,EAAImB,EAAI,EAAGnB,EAAIH,EAAGG,IAAK,KAC1BD,GAAK4G,EAAE3G,GAAK2G,EAAExF,EAAI,OACjB,IAAIZ,EAAIY,EAAI,EAAGZ,EAAIX,EAAGW,IACzBe,EAAEuH,IAAItI,EAAGP,EAAGsB,EAAEwE,IAAIvF,EAAGP,GAAKD,EAAIgd,EAAKxc,QAIrCic,MACG,IAAIjc,EAAIY,EAAI,EAAGZ,EAAIV,EAAGU,IACzBuc,EAAEjU,IAAItI,EAAGY,EAAGwF,EAAEpG,SAMlBqC,EAAItD,KAAK8E,IAAIvE,EAAGD,EAAI,MACpBqd,EAAMpd,IACRC,EAAEmd,GAAO3b,EAAEwE,IAAImX,EAAKA,IAElBrd,EAAIgD,IACN9C,EAAE8C,EAAI,GAAK,GAETsa,EAAM,EAAIta,IACZ+D,EAAEuW,GAAO5b,EAAEwE,IAAIoX,EAAKta,EAAI,IAE1B+D,EAAE/D,EAAI,GAAK,EAEP0Z,EAAO,KACJ,IAAItc,EAAIid,EAAKjd,EAAI2c,EAAI3c,IAAK,KACxB,IAAIO,EAAI,EAAGA,EAAIX,EAAGW,IACrBsc,EAAEhU,IAAItI,EAAGP,EAAG,GAEd6c,EAAEhU,IAAI7I,EAAGA,EAAG,OAET,IAAImB,EAAI8b,EAAM,EAAG9b,GAAK,EAAGA,OACf,IAATrB,EAAEqB,GAAU,KACT,IAAInB,EAAImB,EAAI,EAAGnB,EAAI2c,EAAI3c,IAAK,KAC3BD,EAAI,MACH,IAAIQ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBR,GAAK8c,EAAE/W,IAAIvF,EAAGY,GAAK0b,EAAE/W,IAAIvF,EAAGP,GAE9BD,GAAKA,EAAI8c,EAAE/W,IAAI3E,EAAGA,OACb,IAAIZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBsc,EAAEhU,IAAItI,EAAGP,EAAG6c,EAAE/W,IAAIvF,EAAGP,GAAKD,EAAI8c,EAAE/W,IAAIvF,EAAGY,QAGtC,IAAIZ,EAAIY,EAAGZ,EAAIX,EAAGW,IACrBsc,EAAEhU,IAAItI,EAAGY,GAAI0b,EAAE/W,IAAIvF,EAAGY,IAExB0b,EAAEhU,IAAI1H,EAAGA,EAAG,EAAI0b,EAAE/W,IAAI3E,EAAGA,QACpB,IAAIZ,EAAI,EAAGA,EAAIY,EAAI,EAAGZ,IACzBsc,EAAEhU,IAAItI,EAAGY,EAAG,OAET,KACA,IAAIZ,EAAI,EAAGA,EAAIX,EAAGW,IACrBsc,EAAEhU,IAAItI,EAAGY,EAAG,GAEd0b,EAAEhU,IAAI1H,EAAGA,EAAG,OAKdqb,MACG,IAAIrb,EAAItB,EAAI,EAAGsB,GAAK,EAAGA,IAAK,IAC3BA,EAAI+b,GAAgB,IAATvW,EAAExF,OACV,IAAInB,EAAImB,EAAI,EAAGnB,EAAIH,EAAGG,IAAK,KAC1BD,EAAI,MACH,IAAIQ,EAAIY,EAAI,EAAGZ,EAAIV,EAAGU,IACzBR,GAAK+c,EAAEhX,IAAIvF,EAAGY,GAAK2b,EAAEhX,IAAIvF,EAAGP,GAE9BD,GAAKA,EAAI+c,EAAEhX,IAAI3E,EAAI,EAAGA,OACjB,IAAIZ,EAAIY,EAAI,EAAGZ,EAAIV,EAAGU,IACzBuc,EAAEjU,IAAItI,EAAGP,EAAG8c,EAAEhX,IAAIvF,EAAGP,GAAKD,EAAI+c,EAAEhX,IAAIvF,EAAGY,QAIxC,IAAIZ,EAAI,EAAGA,EAAIV,EAAGU,IACrBuc,EAAEjU,IAAItI,EAAGY,EAAG,GAEd2b,EAAEjU,IAAI1H,EAAGA,EAAG,OAIZic,EAAKxa,EAAI,EAETya,EAAMte,OAAOue,aACV1a,EAAI,GAAG,KACRzB,EAAGoc,MACFpc,EAAIyB,EAAI,EAAGzB,IAAM,IACT,IAAPA,EADmBA,IAAK,OAItBsB,EACJ1D,OAAOye,UAAYH,EAAM/d,KAAK0C,IAAIlC,EAAEqB,GAAK7B,KAAK0C,IAAIlC,EAAEqB,EAAI,QACtD7B,KAAK0C,IAAI2E,EAAExF,KAAOsB,GAAS1D,OAAO0e,MAAM9W,EAAExF,IAAK,CACjDwF,EAAExF,GAAK,YAIPA,IAAMyB,EAAI,EACZ2a,EAAO,MACF,KACDG,MACCA,EAAK9a,EAAI,EAAG8a,GAAMvc,GACjBuc,IAAOvc,EADauc,IAAM,KAI1B3d,GACD2d,IAAO9a,EAAItD,KAAK0C,IAAI2E,EAAE+W,IAAO,IAC7BA,IAAOvc,EAAI,EAAI7B,KAAK0C,IAAI2E,EAAE+W,EAAK,IAAM,MACpCpe,KAAK0C,IAAIlC,EAAE4d,KAAQL,EAAMtd,EAAG,CAC9BD,EAAE4d,GAAM,SAIRA,IAAOvc,EACToc,EAAO,EACEG,IAAO9a,EAAI,EACpB2a,EAAO,GAEPA,EAAO,EACPpc,EAAIuc,UAIRvc,IAEQoc,QACD,OACCI,EAAIhX,EAAE/D,EAAI,GACd+D,EAAE/D,EAAI,GAAK,MACN,IAAI5C,EAAI4C,EAAI,EAAG5C,GAAKmB,EAAGnB,IAAK,KAC3BD,EAAI2b,EAAW5b,EAAEE,GAAI2d,GACrBC,EAAK9d,EAAEE,GAAKD,EACZ8d,EAAKF,EAAI5d,KACbD,EAAEE,GAAKD,EACHC,IAAMmB,IACRwc,GAAKE,EAAKlX,EAAE3G,EAAI,GAChB2G,EAAE3G,EAAI,GAAK4d,EAAKjX,EAAE3G,EAAI,IAEpBwc,MACG,IAAIjc,EAAI,EAAGA,EAAIV,EAAGU,IACrBR,EAAI6d,EAAKd,EAAEhX,IAAIvF,EAAGP,GAAK6d,EAAKf,EAAEhX,IAAIvF,EAAGqC,EAAI,GACzCka,EAAEjU,IAAItI,EAAGqC,EAAI,GAAIib,EAAKf,EAAEhX,IAAIvF,EAAGP,GAAK4d,EAAKd,EAAEhX,IAAIvF,EAAGqC,EAAI,IACtDka,EAAEjU,IAAItI,EAAGP,EAAGD,cAMf,OACC4d,EAAIhX,EAAExF,EAAI,GACdwF,EAAExF,EAAI,GAAK,MACN,IAAInB,EAAImB,EAAGnB,EAAI4C,EAAG5C,IAAK,KACtBD,EAAI2b,EAAW5b,EAAEE,GAAI2d,GACrBC,EAAK9d,EAAEE,GAAKD,EACZ8d,EAAKF,EAAI5d,KACbD,EAAEE,GAAKD,EACP4d,GAAKE,EAAKlX,EAAE3G,GACZ2G,EAAE3G,GAAK4d,EAAKjX,EAAE3G,GACVsc,MACG,IAAI/b,EAAI,EAAGA,EAAIX,EAAGW,IACrBR,EAAI6d,EAAKf,EAAE/W,IAAIvF,EAAGP,GAAK6d,EAAKhB,EAAE/W,IAAIvF,EAAGY,EAAI,GACzC0b,EAAEhU,IAAItI,EAAGY,EAAI,GAAI0c,EAAKhB,EAAE/W,IAAIvF,EAAGP,GAAK4d,EAAKf,EAAE/W,IAAIvF,EAAGY,EAAI,IACtD0b,EAAEhU,IAAItI,EAAGP,EAAGD,cAMf,SACG2U,EAAQpV,KAAKiF,IACjBjF,KAAK0C,IAAIlC,EAAE8C,EAAI,IACftD,KAAK0C,IAAIlC,EAAE8C,EAAI,IACftD,KAAK0C,IAAI2E,EAAE/D,EAAI,IACftD,KAAK0C,IAAIlC,EAAEqB,IACX7B,KAAK0C,IAAI2E,EAAExF,KAEP2c,EAAKhe,EAAE8C,EAAI,GAAK8R,EAChBqJ,EAAOje,EAAE8C,EAAI,GAAK8R,EAClBsJ,EAAOrX,EAAE/D,EAAI,GAAK8R,EAClBuJ,EAAKne,EAAEqB,GAAKuT,EACZwJ,EAAKvX,EAAExF,GAAKuT,EACZnT,IAAMwc,EAAOD,IAAOC,EAAOD,GAAME,EAAOA,GAAQ,EAChDrW,EAAImW,EAAKE,GAAQF,EAAKE,OACxBG,EAAQ,EACF,IAAN5c,GAAiB,IAANoG,IAEXwW,EADE5c,EAAI,EACE,EAAIjC,KAAKkO,KAAKjM,EAAIA,EAAIoG,GAEtBrI,KAAKkO,KAAKjM,EAAIA,EAAIoG,GAE5BwW,EAAQxW,GAAKpG,EAAI4c,QAEfR,GAAKM,EAAKH,IAAOG,EAAKH,GAAMK,EAC5BC,EAAIH,EAAKC,MACR,IAAIle,EAAImB,EAAGnB,EAAI4C,EAAI,EAAG5C,IAAK,KAC1BD,EAAI2b,EAAWiC,EAAGS,GACZ,IAANre,IAASA,EAAIhB,OAAOye,eACpBI,EAAKD,EAAI5d,EACT8d,EAAKO,EAAIre,KACTC,IAAMmB,IACRwF,EAAE3G,EAAI,GAAKD,GAEb4d,EAAIC,EAAK9d,EAAEE,GAAK6d,EAAKlX,EAAE3G,GACvB2G,EAAE3G,GAAK4d,EAAKjX,EAAE3G,GAAK6d,EAAK/d,EAAEE,GAC1Boe,EAAIP,EAAK/d,EAAEE,EAAI,GACfF,EAAEE,EAAI,GAAK4d,EAAK9d,EAAEE,EAAI,GAClBwc,MACG,IAAIjc,EAAI,EAAGA,EAAIV,EAAGU,IACrBR,EAAI6d,EAAKd,EAAEhX,IAAIvF,EAAGP,GAAK6d,EAAKf,EAAEhX,IAAIvF,EAAGP,EAAI,GACzC8c,EAAEjU,IAAItI,EAAGP,EAAI,GAAI6d,EAAKf,EAAEhX,IAAIvF,EAAGP,GAAK4d,EAAKd,EAAEhX,IAAIvF,EAAGP,EAAI,IACtD8c,EAAEjU,IAAItI,EAAGP,EAAGD,MAGhBA,EAAI2b,EAAWiC,EAAGS,GACR,IAANre,IAASA,EAAIhB,OAAOye,WACxBI,EAAKD,EAAI5d,EACT8d,EAAKO,EAAIre,EACTD,EAAEE,GAAKD,EACP4d,EAAIC,EAAKjX,EAAE3G,GAAK6d,EAAK/d,EAAEE,EAAI,GAC3BF,EAAEE,EAAI,IAAM6d,EAAKlX,EAAE3G,GAAK4d,EAAK9d,EAAEE,EAAI,GACnCoe,EAAIP,EAAKlX,EAAE3G,EAAI,GACf2G,EAAE3G,EAAI,GAAK4d,EAAKjX,EAAE3G,EAAI,GAClBsc,GAAStc,EAAIJ,EAAI,MACd,IAAIW,EAAI,EAAGA,EAAIX,EAAGW,IACrBR,EAAI6d,EAAKf,EAAE/W,IAAIvF,EAAGP,GAAK6d,EAAKhB,EAAE/W,IAAIvF,EAAGP,EAAI,GACzC6c,EAAEhU,IAAItI,EAAGP,EAAI,GAAI6d,EAAKhB,EAAE/W,IAAIvF,EAAGP,GAAK4d,EAAKf,EAAE/W,IAAIvF,EAAGP,EAAI,IACtD6c,EAAEhU,IAAItI,EAAGP,EAAGD,GAIlB4G,EAAE/D,EAAI,GAAK+a,aAIR,KACC7d,EAAEqB,IAAM,IACVrB,EAAEqB,GAAKrB,EAAEqB,GAAK,GAAKrB,EAAEqB,GAAK,EACtBqb,OACG,IAAIjc,EAAI,EAAGA,GAAK6c,EAAI7c,IACvBuc,EAAEjU,IAAItI,EAAGY,GAAI2b,EAAEhX,IAAIvF,EAAGY,SAIrBA,EAAIic,KACLtd,EAAEqB,IAAMrB,EAAEqB,EAAI,KADL,KAITpB,EAAID,EAAEqB,MACVrB,EAAEqB,GAAKrB,EAAEqB,EAAI,GACbrB,EAAEqB,EAAI,GAAKpB,EACPyc,GAASrb,EAAItB,EAAI,MACd,IAAIU,EAAI,EAAGA,EAAIV,EAAGU,IACrBR,EAAI+c,EAAEhX,IAAIvF,EAAGY,EAAI,GACjB2b,EAAEjU,IAAItI,EAAGY,EAAI,EAAG2b,EAAEhX,IAAIvF,EAAGY,IACzB2b,EAAEjU,IAAItI,EAAGY,EAAGpB,MAGZuc,GAASnb,EAAIvB,EAAI,MACd,IAAIW,EAAI,EAAGA,EAAIX,EAAGW,IACrBR,EAAI8c,EAAE/W,IAAIvF,EAAGY,EAAI,GACjB0b,EAAEhU,IAAItI,EAAGY,EAAI,EAAG0b,EAAE/W,IAAIvF,EAAGY,IACzB0b,EAAEhU,IAAItI,EAAGY,EAAGpB,GAGhBoB,IAGFyB,QAOF6Z,EAAS,KACP7a,EAAMkb,EACVA,EAAID,EACJA,EAAIjb,OAGDhC,EAAIA,OACJC,EAAIA,OACJC,EAAIA,OACJ+c,EAAIA,OACJC,EAAIA,EAGXvB,MAAMpT,OACAkW,EAAIlW,EACJxB,EAAIuC,KAAKoV,UACTC,EAAQrV,KAAKpJ,EAAEZ,OACfsf,EAAK9V,EAAOS,MAAMoV,EAAOA,OAExB,IAAIhe,EAAI,EAAGA,EAAIge,EAAOhe,IACrBjB,KAAK0C,IAAIkH,KAAKpJ,EAAES,KAAOoG,EACzB6X,EAAG3V,IAAItI,EAAGA,EAAG,GAEbie,EAAG3V,IAAItI,EAAGA,EAAG,EAAI2I,KAAKpJ,EAAES,QAIxBsc,EAAI3T,KAAK2T,EACTC,EAAI5T,KAAKuV,qBAETC,EAAK5B,EAAEjP,KAAK2Q,GACZG,EAAQ7B,EAAExX,KACVsZ,EAAQ/B,EAAEvX,KACVuZ,EAAMnW,EAAOS,MAAMwV,EAAOC,OAEzB,IAAIre,EAAI,EAAGA,EAAIoe,EAAOpe,QACpB,IAAIP,EAAI,EAAGA,EAAI4e,EAAO5e,IAAK,KAC1ByB,EAAM,MACL,IAAIN,EAAI,EAAGA,EAAIod,EAAOpd,IACzBM,GAAOid,EAAG5Y,IAAIvF,EAAGY,GAAK0b,EAAE/W,IAAI9F,EAAGmB,GAEjC0d,EAAIhW,IAAItI,EAAGP,EAAGyB,UAIXod,EAAIhR,KAAKwQ,GAGlBS,iBAAiB3W,UACRe,KAAKqS,MAAM7S,EAAO2E,KAAKlF,IAGhC4W,cACMjC,EAAI5T,KAAK4T,EACTnW,EAAIuC,KAAKoV,UACTK,EAAQ7B,EAAExX,KACV0Z,EAAQlC,EAAEvX,QACViW,EAAI,IAAI9S,EAAOiW,EAAOzV,KAAKpJ,EAAEZ,YAE5B,IAAIqB,EAAI,EAAGA,EAAIoe,EAAOpe,QACpB,IAAIP,EAAI,EAAGA,EAAIgf,EAAOhf,IACrBV,KAAK0C,IAAIkH,KAAKpJ,EAAEE,IAAM2G,GACxB6U,EAAE3S,IAAItI,EAAGP,EAAG8c,EAAEhX,IAAIvF,EAAGP,GAAKkJ,KAAKpJ,EAAEE,QAKnC6c,EAAI3T,KAAK2T,EAET+B,EAAQ/B,EAAEvX,KACV2Z,EAAQpC,EAAEtX,QACV8Y,EAAI,IAAI3V,EAAOiW,EAAOC,OAErB,IAAIre,EAAI,EAAGA,EAAIoe,EAAOpe,QACpB,IAAIP,EAAI,EAAGA,EAAI4e,EAAO5e,IAAK,KAC1ByB,EAAM,MACL,IAAIN,EAAI,EAAGA,EAAI8d,EAAO9d,IACzBM,GAAO+Z,EAAE1V,IAAIvF,EAAGY,GAAK0b,EAAE/W,IAAI9F,EAAGmB,GAEhCkd,EAAExV,IAAItI,EAAGP,EAAGyB,UAIT4c,yBAIAnV,KAAKpJ,EAAE,GAAKoJ,KAAKpJ,EAAER,KAAK8E,IAAI8E,KAAKtJ,EAAGsJ,KAAKrJ,GAAK,sBAI9CqJ,KAAKpJ,EAAE,kBAIVof,EAAM5f,KAAKiF,IAAI2E,KAAKtJ,EAAGsJ,KAAKrJ,GAAKqJ,KAAKpJ,EAAE,GAAKf,OAAOue,QACpD/V,EAAI,EACJzH,EAAIoJ,KAAKpJ,MACR,IAAIS,EAAI,EAAG4e,EAAKrf,EAAEZ,OAAQqB,EAAI4e,EAAI5e,IACjCT,EAAES,GAAK2e,GACT3X,WAGGA,wBAIA7H,MAAM8H,KAAK0B,KAAKpJ,0BAIff,OAAOue,QAAU,EAAKhe,KAAKiF,IAAI2E,KAAKtJ,EAAGsJ,KAAKrJ,GAAKqJ,KAAKpJ,EAAE,oCAIzDoJ,KAAK2T,oCAIL3T,KAAK4T,8BAILpU,EAAO2E,KAAKnE,KAAKpJ,IClgBrB,SAASif,EAAQ/Z,OAAQoa,iEAC9Bpa,EAAS6V,EAAgBvR,YAAYtE,GACjCoa,EACK,IAAIlD,EAA2BlX,GAAQ+Z,UAM3C,SAAeM,EAAcC,OAAeF,iEACjDC,EAAexE,EAAgBvR,YAAY+V,GAC3CC,EAAgBzE,EAAgBvR,YAAYgW,GACxCF,EACK,IAAIlD,EAA2BmD,GAAc9D,MAAM+D,GAEnDD,EAAapV,WAChB,IAAI6Q,EAAgBuE,GAAc9D,MAAM+D,GACxC,IAAI3D,EAAgB0D,GAAc9D,MAAM+D,GAZrC/D,CAAMvW,EAAQ0D,EAAO+M,IAAIzQ,EAAOM,OCuD5B,SAASia,EACtB9gB,EACA+gB,EACAC,EACAC,EACAjc,OAEI0E,EAAQsX,EAAUC,EAAqBA,EACvClK,EAAW9M,EAAO+M,IAAI+J,EAAOtgB,OAAQsgB,EAAOtgB,OAAQiJ,SAElDxE,EAAOF,EAAsB+b,OAE/BG,EAAgB,IAAI3R,aAAavP,EAAKkD,EAAEzC,YACvC,IAAIqB,EAAI,EAAGA,EAAI9B,EAAKkD,EAAEzC,OAAQqB,IACjCof,EAAcpf,GAAKoD,EAAKlF,EAAKkD,EAAEpB,QAG7Bqf,EAvEN,SACEnhB,EACAkhB,EACAH,EACAE,EACAG,SAEMhgB,EAAI2f,EAAOtgB,OACXU,EAAInB,EAAKkD,EAAEzC,WAEbO,EAAM,IAAIC,MAAMG,OAEf,IAAIigB,EAAQ,EAAGA,EAAQjgB,EAAGigB,IAAS,CACtCrgB,EAAIqgB,GAAS,IAAIpgB,MAAME,OACnBmgB,EAAYP,EAAO5Y,QACvBmZ,EAAUD,IAAUJ,MAChBM,EAAYH,EAAcE,OAEzB,IAAIE,EAAQ,EAAGA,EAAQrgB,EAAGqgB,IAC7BxgB,EAAIqgB,GAAOG,GAASN,EAAcM,GAASD,EAAUvhB,EAAKkD,EAAEse,WAGzD,IAAIvX,EAAOjJ,GAiDCygB,CACjBzhB,EACAkhB,EACAH,EACAE,EACAjc,GAEE0c,EA9CN,SAAwB1hB,EAAMkhB,SACtB/f,EAAInB,EAAKkD,EAAEzC,WAEbO,EAAM,IAAIC,MAAME,OAEf,IAAIqgB,EAAQ,EAAGA,EAAQrgB,EAAGqgB,IAC7BxgB,EAAIwgB,GAAS,CAACxhB,EAAKyD,EAAE+d,GAASN,EAAcM,WAGvC,IAAIvX,EAAOjJ,GAqCD2gB,CAAe3hB,EAAMkhB,GAClCU,EAAgBtB,EAClBvJ,EAAS5D,IAAIgO,EAAa/R,KAAK+R,EAAanN,sBAI9C+M,GADAA,EAAS,IAAI9W,EAAO,CAAC8W,KACL3N,IACdwO,EACGxS,KAAK+R,GACL/R,KAAKsS,GACLvJ,IAAI8I,GACJjN,cAGSvL,YCrFD,SAASoZ,EACtB7hB,EACAgF,OACA9E,yDAAU,IAEN4hB,cACFA,EAAgB,IADdb,mBAEFA,EAAqB,GAFnBD,QAGFA,EAAU,EAHRe,eAIFA,EAAiB,IAJfC,UAKFA,EALEC,UAMFA,EANEC,cAOFA,GACEhiB,KAEA8gB,GAAW,QACP,IAAI3U,MAAM,gDACX,IAAKrM,EAAKkD,IAAMlD,EAAKyD,QACpB,IAAI4I,MAAM,iDACX,IACJzK,EAAQ5B,EAAKkD,IACdlD,EAAKkD,EAAEzC,OAAS,IACfmB,EAAQ5B,EAAKyD,IACdzD,EAAKyD,EAAEhD,OAAS,QAEV,IAAI4L,MACR,wEAEG,GAAIrM,EAAKkD,EAAEzC,SAAWT,EAAKyD,EAAEhD,aAC5B,IAAI4L,MAAM,2DAGdtH,EACFmd,GAAiB,IAAIjhB,MAAM+D,EAAsBvE,QAAQ4J,KAAK,GAC5D8X,EAASpd,EAAWtE,UACxBwhB,EAAYA,GAAa,IAAIhhB,MAAMkhB,GAAQ9X,KAAK/J,OAAOgD,kBACvD0e,EAAYA,GAAa,IAAI/gB,MAAMkhB,GAAQ9X,KAAK/J,OAAO8hB,kBAEnDH,EAAUxhB,SAAWuhB,EAAUvhB,aAC3B,IAAI4L,MAAM,qDAGbzK,EAAQmD,SACL,IAAIsH,MAAM,sCAOdgW,EAJApd,EAAQH,EAAiB9E,EAAM+E,EAAYC,GAE3Csd,EAAYrd,GAAS8c,MAGpBM,EAAY,EAAGA,EAAYP,IAAkBQ,EAAWD,IAAa,CACxEtd,EAAa+b,EACX9gB,EACA+E,EACAic,EACAC,EACAjc,OAGG,IAAItC,EAAI,EAAGA,EAAIyf,EAAQzf,IAC1BqC,EAAWrC,GAAK7B,KAAK8E,IACnB9E,KAAKiF,IAAIkc,EAAUtf,GAAIqC,EAAWrC,IAClCuf,EAAUvf,OAIduC,EAAQH,EAAiB9E,EAAM+E,EAAYC,GACvCga,MAAM/Z,GAAQ,MAClBqd,EAAYrd,GAAS8c,QAGhB,CACLQ,gBAAiBxd,EACjByd,eAAgBvd,EAChBwd,WAAYJ,GCtFT,SAASK,EAAeve,UACtB,SAAU7C,OAEX4E,EADAyc,EAAKxe,EAAE1D,OAAS,EAEhBoG,EAAOvF,EAAEb,OACTwG,OAAkB1B,IAATsB,EAAqB,EAAI,IAAI0I,aAAa1I,GAAMwD,KAAK,OAC7D,IAAIvI,EAAI,EAAGA,EAAI6gB,EAAI7gB,OACtBoE,EAAsC,EAA7BrF,KAAKgB,IAAIsC,EAAErC,EAAS,EAAL6gB,GAAS,QACpBpd,IAATsB,EACFI,GAAU9C,EAAErC,EAAI6gB,GAAM9hB,KAAKua,KAAKva,KAAKgB,IAAIP,EAAI6C,EAAErC,GAAI,GAAKoE,YAEnD,IAAI3E,EAAI,EAAGA,EAAIsF,EAAMtF,IACxB0F,EAAO1F,IAAM4C,EAAErC,EAAI6gB,GAAM9hB,KAAKua,KAAKva,KAAKgB,IAAIP,EAAEC,GAAK4C,EAAErC,GAAI,GAAKoE,UAI7De,GCdJ,SAAS2b,EAAoBC,EAAIC,OAAOC,yDAAO,GAChDzhB,EAAIuhB,EAAG,GACPG,EAAQH,EAAG,GACXI,EAAOpiB,KAAKiF,OAAOkd,GACvBA,EAAME,QAAQ,CAAChgB,EAAGpB,EAAGqhB,IAASA,EAAIrhB,IAAMmhB,OACpCN,EAAKG,EAAMriB,OACX2iB,EAAQ,IAAI7T,aAAkB,EAALoT,GACzBU,EAAO,IAAI9T,aAAkB,EAALoT,GACxBW,EAAO,IAAI/T,aAAkB,EAALoT,GACxBY,EAAK1iB,KAAK0C,IAAIjC,EAAE,GAAKA,EAAE,QAEtB,IAAIQ,EAAI,EAAGA,EAAI6gB,EAAI7gB,IACtBshB,EAAMthB,GAAKghB,EAAMhhB,GAAGoB,EACpBkgB,EAAMthB,EAAI6gB,GAAMG,EAAMhhB,GAAG2B,EAAIwf,EAC7BG,EAAMthB,EAAI,EAAI6gB,GAAMG,EAAMhhB,GAAG0hB,MAE7BH,EAAKvhB,GAAKghB,EAAMhhB,GAAGoB,EAAIqgB,EACvBF,EAAKvhB,EAAI6gB,GAAM,EACfU,EAAKvhB,EAAI,EAAI6gB,GAAMG,EAAMhhB,GAAG0hB,MAAQ,EAEpCF,EAAKxhB,GAAKghB,EAAMhhB,GAAGoB,EAAIqgB,EACvBD,EAAKxhB,EAAI6gB,GAAoB,IAAbG,EAAMhhB,GAAG2B,EAAWwf,EACpCK,EAAKxhB,EAAI,EAAI6gB,GAAuB,EAAjBG,EAAMhhB,GAAG0hB,UAG1BxjB,EAAO,CACTkD,EAAG5B,EACHmC,EAAGuf,GAED/b,EAAS,IAAIhG,MAAM0hB,GAEnBc,EAAY,CACdzC,QAAS,IACTkB,cAAekB,EACfpB,UAAWqB,EACXpB,UAAWqB,EACXrC,mBAAoBsC,EAAK,IACzBzB,cAAe,IACfC,eAAgB,MAGlBgB,EAAOve,OAAOkf,OAAO,GAAID,EAAWV,OAEhCY,EAAOC,EAAG5jB,EAAM0iB,EAAgBK,OAC/B,IAAIjhB,EAAI,EAAGA,EAAI6gB,EAAI7gB,IACtBmF,EAAOnF,GAAK,CACViD,WAAY,CACV4e,EAAKpB,gBAAgBzgB,GACrB6hB,EAAKpB,gBAAgBzgB,EAAI6gB,GAAMM,EAC/BU,EAAKpB,gBAAgBzgB,EAAS,EAAL6gB,IAE3B1d,MAAO0e,EAAKnB,uBAGTvb,ECxDF,SAAS4c,EAAe1f,UACtB,SAAU7C,OACXwiB,EAAW3f,EAAE,GAAKA,EAAE,GAAM,MACnB7C,EAAEb,OACF,OAAO0D,EAAE,GAAKtD,KAAKua,MAAO9Z,EAAI6C,EAAE,KAAO7C,EAAI6C,EAAE,IAAO2f,OAC3D7c,EAAS,IAAIsI,aAAajO,EAAEb,YAC3B,IAAIqB,EAAI,EAAGA,EAAIR,EAAEb,OAAQqB,IAC5BmF,EAAOnF,GAAKqC,EAAE,GAAKtD,KAAKua,MAAO9Z,EAAEQ,GAAKqC,EAAE,KAAO7C,EAAEQ,GAAKqC,EAAE,IAAO2f,UAE1D7c,GCRJ,SAAS8c,EAAuBlB,EAAImB,OAAMjB,yDAAO,GAClDzhB,EAAIuhB,EAAG,GACPG,EAAQH,EAAG,GACXI,EAAOpiB,KAAKiF,OAAOkd,GACvBA,EAAME,QAAQ,CAAChgB,EAAGpB,EAAGqhB,IAASA,EAAIrhB,IAAMmhB,OACpCM,EAAK1iB,KAAK0C,IAAIjC,EAAE,GAAKA,EAAE,IAKvBtB,EAAO,CACTkD,EAAG5B,EACHmC,EAAGuf,GAGDS,EAAY,CACdzC,QAAS,IACTkB,cAXU,IAAI3S,aAAa,CAACyU,EAAK9gB,EAAG,EAAG8gB,EAAKR,QAY5CxB,UAXS,IAAIzS,aAAa,CAACyU,EAAK9gB,EAAIqgB,EAAI,EAAGS,EAAKR,MAAQ,IAYxDvB,UAXS,IAAI1S,aAAa,CAACyU,EAAK9gB,EAAIqgB,EAAI,KAAmB,EAAbS,EAAKR,QAYnDvC,mBAAoBsC,EAAK,IACzBzB,cAAe,IACfC,eAAgB,MAGlBgB,EAAOve,OAAOkf,OAAO,GAAID,EAAWV,OAChCY,EAAOC,EAAG5jB,EAAM6jB,EAAgBd,SAC7B,CACLhe,WAAY,CACV4e,EAAKpB,gBAAgB,GACrBoB,EAAKpB,gBAAgB,GAAKU,EAC1BU,EAAKpB,gBAAgB,IAEvBtd,MAAO0e,EAAKnB,gBClCT,SAASyB,EAAiB9f,UACxB,SAAU7C,OAEX4E,EACAge,EAFAvB,EAAKxe,EAAE1D,OAAS,EAGhBoG,EAAOvF,EAAEb,OACTwG,OAAkB1B,IAATsB,EAAqB,EAAI,IAAI0I,aAAa1I,GAAMwD,KAAK,OAC7D,IAAIvI,EAAI,EAAGA,EAAI6gB,EAAI7gB,OACtBoiB,EAAKrjB,KAAKgB,IAAIsC,EAAErC,EAAS,EAAL6gB,GAAU,EAAG,GACjCzc,EAAS/B,EAAErC,EAAI6gB,GAAMuB,OACR3e,IAATsB,EACFI,GAAUf,GAAUrF,KAAKgB,IAAIP,EAAI6C,EAAErC,GAAI,GAAKoiB,YAEvC,IAAI3iB,EAAI,EAAGA,EAAIsF,EAAMtF,IACxB0F,EAAO1F,IAAM2E,GAAUrF,KAAKgB,IAAIP,EAAEC,GAAK4C,EAAErC,GAAI,GAAKoiB,UAIjDjd,GChBJ,SAASkd,EAAsBtB,EAAIC,OAAOC,yDAAO,GAClDzhB,EAAIuhB,EAAG,GACPG,EAAQH,EAAG,GACXI,EAAOpiB,KAAKiF,OAAOkd,GACvBA,EAAME,QAAQ,CAAChgB,EAAGpB,EAAGqhB,IAASA,EAAIrhB,IAAMmhB,OAEpCN,EAAKG,EAAMriB,OACX2iB,EAAQ,IAAI7T,aAAkB,EAALoT,GACzBU,EAAO,IAAI9T,aAAkB,EAALoT,GACxBW,EAAO,IAAI/T,aAAkB,EAALoT,GACxBY,EAAK1iB,KAAK0C,IAAIjC,EAAE,GAAKA,EAAE,QAEtB,IAAIQ,EAAI,EAAGA,EAAI6gB,EAAI7gB,IACtBshB,EAAMthB,GAAKghB,EAAMhhB,GAAGoB,EACpBkgB,EAAMthB,EAAI6gB,GAAM,EAChBS,EAAMthB,EAAI,EAAI6gB,GAAMG,EAAMhhB,GAAG0hB,MAE7BH,EAAKvhB,GAAKghB,EAAMhhB,GAAGoB,EAAIqgB,EACvBF,EAAKvhB,EAAI6gB,GAAM,EACfU,EAAKvhB,EAAI,EAAI6gB,GAAMG,EAAMhhB,GAAG0hB,MAAQ,EAEpCF,EAAKxhB,GAAKghB,EAAMhhB,GAAGoB,EAAIqgB,EACvBD,EAAKxhB,EAAI6gB,GAAM,IACfW,EAAKxhB,EAAI,EAAI6gB,GAAuB,EAAjBG,EAAMhhB,GAAG0hB,UAG1BxjB,EAAO,CACTkD,EAAG5B,EACHmC,EAAGuf,GAGD/b,EAAS,IAAIhG,MAAM0hB,GAEnBc,EAAY,CACdzC,QAAS,IACTkB,cAAekB,EACfpB,UAAWqB,EACXpB,UAAWqB,EACXrC,mBAAoBsC,EAAK,IACzBzB,cAAe,IACfC,eAAgB,MAGlBgB,EAAOve,OAAOkf,OAAO,GAAID,EAAWV,OAEhCY,EAAOC,EAAG5jB,EAAMikB,EAAkBlB,OACjC,IAAIjhB,EAAI,EAAGA,EAAI6gB,EAAI7gB,IACtBmF,EAAOnF,GAAK,CACViD,WAAY,CACV4e,EAAKpB,gBAAgBzgB,GACrB6hB,EAAKpB,gBAAgBzgB,EAAI6gB,GAAMM,EAC/BU,EAAKpB,gBAAgBzgB,EAAS,EAAL6gB,IAE3B1d,MAAO0e,EAAKnB,uBAGTvb,EC1DF,SAASmd,EAAiBjgB,UACxB,SAAU7C,OACX4E,EAAS/B,EAAE,GAAKtD,KAAKgB,IAAIsC,EAAE,GAAK,EAAG,GACnC0C,EAAOvF,EAAEb,WACRoG,EAAM,OAAOX,GAAUrF,KAAKgB,IAAIP,EAAI6C,EAAE,GAAI,GAAKtD,KAAKgB,IAAIsC,EAAE,GAAK,EAAG,QACnE8C,EAAS,IAAIsI,aAAa1I,OACzB,IAAI/E,EAAI,EAAGA,EAAI+E,EAAM/E,IACxBmF,EAAOnF,GAAKoE,GAAUrF,KAAKgB,IAAIP,EAAEQ,GAAKqC,EAAE,GAAI,GAAKtD,KAAKgB,IAAIsC,EAAE,GAAK,EAAG,WAE/D8C,GCRJ,SAASod,EAAyBxB,EAAImB,OAAMjB,yDAAO,GACpDzhB,EAAIuhB,EAAG,GACPG,EAAQH,EAAG,GACXI,EAAOpiB,KAAKiF,OAAOkd,GACvBA,EAAME,QAAQ,CAAChgB,EAAGpB,EAAGqhB,IAASA,EAAIrhB,IAAMmhB,OACpCM,EAAK1iB,KAAK0C,IAAIjC,EAAE,GAAKA,EAAE,IAKvBtB,EAAO,CACTkD,EAAG5B,EACHmC,EAAGuf,GAGDS,EAAY,CACdzC,QAAS,IACTkB,cAXU,IAAI3S,aAAa,CAACyU,EAAK9gB,EAAG,EAAG8gB,EAAKR,QAY5CxB,UAXS,IAAIzS,aAAa,CAACyU,EAAK9gB,EAAIqgB,EAAI,IAAMS,EAAKR,MAAQ,IAY3DvB,UAXS,IAAI1S,aAAa,CAACyU,EAAK9gB,EAAIqgB,EAAI,KAAmB,EAAbS,EAAKR,QAYnDvC,mBAAoBsC,EAAK,IACzBzB,cAAe,IACfC,eAAgB,MAElBgB,EAAOve,OAAOkf,OAAO,GAAID,EAAWV,OAChCY,EAAOC,EAAG5jB,EAAMokB,EAAkBrB,SAC/B,CACLhe,WAAY,CACV4e,EAAKpB,gBAAgB,GACrBoB,EAAKpB,gBAAgB,GAAKU,EAC1BU,EAAKpB,gBAAgB,IAEvBtd,MAAO0e,EAAKnB,gBC8DhB,SAAS8B,EAAevb,EAAMwb,EAAIrhB,EAAGO,EAAG+gB,OAClCC,EAAWvhB,EAAEzC,OACbikB,EAAU,GACVC,EAAU,GACVC,EAAY/jB,KAAK6a,KAAKxY,EAAE,GAAKA,EAAE,KAChB,IAAf0hB,IACFJ,EAAU,GAAKthB,EAAEzC,OAAS,OAGxBokB,EAAQhkB,KAAK0C,IAAIghB,EAAKxb,GAAQ,EAC9B+b,GAAO/b,EAAOwb,GAAM,EACpBQ,GAAO,EACP1gB,EAAQmgB,EAAU,SACdO,GAAQ1gB,EAAQogB,GAAYpgB,GAAS,GACvCxD,KAAK0C,IAAIL,EAAEmB,GAASygB,IAAQD,GAC9BH,EAAQvd,KAAKjE,EAAEmB,IACfsgB,EAAQxd,KAAK1D,EAAEY,IACfA,GAASugB,GAGyB,IAA9B/jB,KAAK6a,KAAKoJ,EAAM5hB,EAAEmB,IAEpBA,GAASugB,EAGTG,GAAO,SAIbP,EAAU,GAAKngB,EACR,CAACqgB,EAASC,kBC5HZ,SAAsB5gB,OAAU7D,yDAAU,SACzCgG,OAAEA,EAAS,EAAX8e,QAAcA,GAAU,GAAU9kB,MAEnC,IAAI8jB,KAAQjgB,EACVigB,EAAKiB,OAAUjB,EAAKkB,MAIvBlB,EAAKjb,KAAOib,EAAK9gB,GAAK8gB,EAAK9gB,EAAI8gB,EAAKkB,KAAKhiB,GAAKgD,EAC9C8d,EAAKO,GAAKP,EAAK9gB,GAAK8gB,EAAKiB,MAAM/hB,EAAI8gB,EAAK9gB,GAAKgD,IAJ7C8d,EAAKjb,KAAOib,EAAK9gB,EAAK8gB,EAAKR,MAAQ,EAAKtd,EACxC8d,EAAKO,GAAKP,EAAK9gB,EAAK8gB,EAAKR,MAAQ,EAAKtd,OAOrC8e,MACE,IAAIljB,EAAI,EAAGA,EAAIiC,EAAStD,OAAS,EAAGqB,IAAK,KACxCkiB,EAAOjgB,EAASjC,GAChBqjB,EAAWphB,EAASjC,EAAI,GACxBkiB,EAAKO,GAAKY,EAASpc,OACrBib,EAAKO,GAAKY,EAASpc,MAAQib,EAAKO,GAAKY,EAASpc,MAAQ,OAKvD,IAAIib,KAAQjgB,EACfigB,EAAKR,MAAQQ,EAAKO,GAAKP,EAAKjb,YAGvBhF,S/BdF,SAAab,EAAGkiB,OAAKllB,yDAAU,IAChCmlB,WACFA,EADEC,UAEFA,EAAY,CACVnlB,WAAY,EACZE,WAAY,GAJZklB,QAMFA,GAAU,EANRC,aAOFA,EAAe,EAPbC,WAQFA,EAAa,EARXC,YASFA,GAAc,EATZC,YAUFA,EAAc,MAVZC,oBAWFA,GAAsB,EAXpBC,iBAYFA,GAAmB,GACjB3lB,QAEEuD,EAAI2hB,EAAIjd,YACV2d,EAAc7iB,EAAcC,QAEbqC,IAAf8f,IACFA,EAAaS,EAActiB,EAAcC,GAAK,SAG1CsiB,EAAc,CAAE5kB,EAAG,EAAG2B,EAAGuiB,GAE1BK,IACHK,EAAY5kB,GAAK,EACjB4kB,EAAYjjB,IAAM,OAGf,IAAIhB,EAAI,EAAGA,EAAI2B,EAAEhD,OAAQqB,IAC5B2B,EAAE3B,GAAKikB,EAAY5kB,EAAIsC,EAAE3B,GAAKikB,EAAYjjB,MAGvC,IAAIhB,EAAI,EAAGA,EAAI2B,EAAEhD,OAAQqB,IACxB2B,EAAE3B,GAAK,IACT2B,EAAE3B,GAAK,OAMPkkB,EAAIC,EADJjD,EAAQvf,QAENtD,WAAEA,EAAFE,WAAcA,GAAeilB,EAE/BQ,GACEP,IACFvC,EAAQkD,EAAGziB,EAAGP,EAAE,GAAKA,EAAE,GAAI,CACzB/C,WAAAA,EACAE,WAAAA,EACAD,WAAY,KAGhB4lB,EAAKE,EAAGziB,EAAGP,EAAE,GAAKA,EAAE,GAAI,CACtB/C,WAAAA,EACAE,WAAAA,EACAD,WAAY,IAEd6lB,EAAMC,EAAGziB,EAAGP,EAAE,GAAKA,EAAE,GAAI,CACvB/C,WAAAA,EACAE,WAAAA,EACAD,WAAY,MAGVmlB,IACFvC,EAAQkD,EAAGziB,EAAGP,EAAG,CACf/C,WAAAA,EACAE,WAAAA,EACAD,WAAY,KAGhB4lB,EAAKE,EAAGziB,EAAGP,EAAG,CACZ/C,WAAAA,EACAE,WAAAA,EACAD,WAAY,IAEd6lB,EAAMC,EAAGziB,EAAGP,EAAG,CACb/C,WAAAA,EACAE,WAAAA,EACAD,WAAY,WAIV+lB,EAAQjjB,EACRkjB,EAAKljB,EAAE,GAAKA,EAAE,OAChBmjB,EAAS,EACTpD,EAAO,MACN,IAAInhB,EAAI,EAAGA,EAAIkhB,EAAMviB,OAAQqB,IAC5BjB,KAAK0C,IAAI0iB,EAAInkB,IAAMukB,IACrBA,EAASxlB,KAAK0C,IAAI0iB,EAAInkB,KAEpBjB,KAAK0C,IAAIyf,EAAMlhB,IAAMmhB,IACvBA,EAAOpiB,KAAK0C,IAAIyf,EAAMlhB,SAItBwkB,EAAU,KACVC,EAAU,KACVC,EAAS,IAAIvlB,MAAM+hB,EAAMviB,OAAS,GAClCgmB,EAAY,IAAIxlB,MAAM+hB,EAAMviB,QAC5BimB,EAAY,IAAIzlB,MAAM+hB,EAAMviB,QAC5BkmB,EAAY,IAAI1lB,MAAM+hB,EAAMviB,OAAS,GACrCmmB,EAAY,EACZC,EAAe,EACfC,EAAe,EACfC,EAAe,MAEd,IAAIjlB,EAAI,EAAGA,EAAIkhB,EAAMviB,OAAS,IAAKqB,EAGlCjB,KAAK0C,IAAIyiB,EAAGlkB,IAAM8jB,KAGjBI,EAAGlkB,GAAKkkB,EAAGlkB,EAAI,IAAMkkB,EAAGlkB,IAAMkkB,EAAGlkB,EAAI,IACrCkkB,EAAGlkB,IAAMkkB,EAAGlkB,EAAI,IAAMkkB,EAAGlkB,GAAKkkB,EAAGlkB,EAAI,MAEtCykB,EAAU,CACRrjB,EAAGijB,EAAMrkB,GACTuC,MAAOvC,GAELskB,EAAK,GAAiB,OAAZE,IACZG,EAAUI,KAAkBP,EAC5BI,EAAUI,KAAkBP,KAM7BP,EAAGlkB,IAAMkkB,EAAGlkB,EAAI,IAAMkkB,EAAGlkB,GAAKkkB,EAAGlkB,EAAI,IACrCkkB,EAAGlkB,GAAKkkB,EAAGlkB,EAAI,IAAMkkB,EAAGlkB,IAAMkkB,EAAGlkB,EAAI,MAEtCwkB,EAAU,CACRpjB,EAAGijB,EAAMrkB,GACTuC,MAAOvC,GAELskB,EAAK,GAAiB,OAAZG,IACZE,EAAUI,KAAkBP,EAC5BI,EAAUI,KAAkBP,KAM9BN,EAAInkB,GAAKmkB,EAAInkB,EAAI,IAAMmkB,EAAInkB,GAAKmkB,EAAInkB,EAAI,KAE1C0kB,EAAOI,KAAe9kB,EACtB6kB,EAAUI,KAAkBlmB,KAAK0C,IAAI0iB,EAAInkB,KAAO2jB,EAAaY,GAGjEG,EAAO/lB,OAASmmB,EAChBH,EAAUhmB,OAASomB,EACnBH,EAAUjmB,OAASqmB,EACnBH,EAAUlmB,OAASsmB,MAKfC,EAAUC,EAAWC,EAAWC,EAAaC,EAH7CC,EAAU,IAAIpmB,MAAMulB,EAAO/lB,QAC3B6mB,EAAa,EACbC,GAAS,MAER,IAAIhmB,EAAI,EAAGA,EAAIilB,EAAO/lB,SAAUc,EAAG,CACtC0lB,EAAYd,EAAMK,EAAOjlB,IACzBylB,GAAY,MACRtkB,EAAI6kB,EAAQ,MAChBJ,EAAc7mB,OAAOknB,UACrBN,EAAY,EACZE,GAAgB,GACK,IAAdJ,GAAmBtkB,EAAI+jB,EAAUhmB,QAAU2mB,GAChDF,EAAYrmB,KAAK0C,IAAI0jB,GAAaR,EAAU/jB,GAAGQ,EAAIwjB,EAAUhkB,GAAGQ,GAAK,GAGjEgkB,EAAYC,EACdA,EAAcD,EAEdE,GAAgB,EAEdF,EAAYrmB,KAAK0C,IAAIkjB,EAAU/jB,GAAGQ,EAAIwjB,EAAUhkB,GAAGQ,GAAK,IAC1D8jB,EAAWtkB,EACX6kB,EAAQ7kB,KAERA,MAGc,IAAdskB,GACEnmB,KAAK0C,IAAIyf,EAAMwD,EAAOjlB,KAAOokB,EAAc1C,IAC7CoE,EAAQC,KAAgB,CACtBjjB,MAAOmiB,EAAOjlB,GACd2B,EAAG+jB,EACHxjB,GAAIuf,EAAMwD,EAAOjlB,IAAMwkB,EAAYjjB,GAAKijB,EAAY5kB,EACpDqiB,MAAO3iB,KAAK0C,IAAImjB,EAAUM,GAAU9jB,EAAIujB,EAAUO,GAAU9jB,GAC5DukB,KAAMd,EAAUplB,IAGlB8lB,EAAQC,EAAa,GAAGpC,KAAOuB,EAAUO,GACzCK,EAAQC,EAAa,GAAGrC,MAAQyB,EAAUM,GAEtCxB,GAAc,KACZkC,EAAQ1E,EAAMyD,EAAUO,GAAU3iB,OAClCsjB,EAAS3E,EAAM0D,EAAUM,GAAU3iB,OACvCgjB,EAAQC,EAAa,GAAGM,OACtBpC,GAAgB6B,EAAQC,EAAa,GAAG7jB,GAAKikB,EAAQC,GAAU,IAKzEN,EAAQ5mB,OAAS6mB,EAEbzB,GACF/hB,EAAiBujB,EAASlB,EAAOnD,OAI9B,IAAIzhB,EAAI,EAAGA,EAAI8lB,EAAQ5mB,OAAQc,IAClC8lB,EAAQ9lB,GAAGsmB,KAAOxC,SAGpBgC,EAAQxjB,MAAK,SAAUhB,EAAGC,UACjBD,EAAEK,EAAIJ,EAAEI,KAGVmkB,oBgCzOF,SAAwBtjB,OACzByf,0DAD6C,IAC7BA,MAChBsE,EAAa,GAEbhiB,EAAM,EAENiB,EAAO,EAEPvE,EAAQ,MACP,IAAIV,EAAIiC,EAAStD,OAAS,EAAGqB,GAAK,EAAGA,IACpCiC,EAASjC,GAAG2lB,MACdK,EAAW3gB,KAAKpD,EAASwT,OAAOzV,EAAG,GAAG,IAI1CgmB,EAAW3gB,KAAK,CAAEjE,EAAG5C,OAAOknB,gBAExBO,EAAa,CAAC,CAACD,EAAW,GAAG5kB,EAAG4kB,EAAW,GAAGrkB,IAC9CukB,EAAU,CAACF,EAAW,GAAGzjB,WAExB,IAAIvC,EAAI,EAAGA,EAAIgmB,EAAWrnB,OAAQqB,OAEjCjB,KAAK0C,IAAIukB,EAAWhmB,EAAI,GAAGoB,EAAI4kB,EAAWhmB,GAAGoB,GAAKsgB,EACpDuE,EAAW5gB,KAAK,CAAC2gB,EAAWhmB,GAAGoB,EAAG4kB,EAAWhmB,GAAG2B,IAC5CqkB,EAAWhmB,GAAG2B,EAAIqC,IACpBA,EAAMgiB,EAAWhmB,GAAG2B,EACpBsD,EAAOjF,GAETkmB,EAAQ7gB,KAAK2gB,EAAWhmB,GAAGuC,OAC3B7B,QACK,IACDA,EAAQ,EAAG,KACTylB,EAAS5D,EAAyB0D,EAAY,CAChD7kB,EAAG4kB,EAAW/gB,GAAM7D,EACpBO,EAAGqC,EACH0d,MAAO3iB,KAAK0C,IACVwkB,EAAW,GAAG,GAAKA,EAAWA,EAAWtnB,OAAS,GAAG,OAGrDsE,WAAEA,GAAekjB,EACrBlkB,EAASoD,KAAK,CACZjE,EAAG6B,EAAW,GACdtB,EAAGsB,EAAW,GACdye,MAAOze,EAAW,GAClBV,MAAOxD,KAAKC,MACVknB,EAAQE,OAAO,CAACrlB,EAAGC,IAAMD,EAAIC,EAAG,GAAKklB,EAAQvnB,QAE/CgnB,MAAM,SAIRO,EAAQ9E,QAAS7e,IACfN,EAASoD,KAAK2gB,EAAWzjB,MAG7B0jB,EAAa,CAAC,CAACD,EAAWhmB,GAAGoB,EAAG4kB,EAAWhmB,GAAG2B,IAC9CukB,EAAU,CAAClmB,GACXgE,EAAMgiB,EAAWhmB,GAAG2B,EACpBsD,EAAOjF,EACPU,EAAQ,SAIZuB,EAASF,MAAK,SAAUhB,EAAGC,UAClBD,EAAEK,EAAIJ,EAAEI,KAGVa,4BFnEqBA,EAAUb,EAAGO,OAAGvD,yDAAU,SAChDioB,aACJA,EAAe,WADXC,YAEJA,EAAc,EAFVC,oBAGJA,EAAsB,CACpBrH,QAAS,IACTc,cAAe,IACfC,eAAgB,OAEhB7hB,MASAooB,EAPA9D,EAAY,CAAC,GACb+D,EAqHN,SAAoBxkB,EAAU4e,OAIxB6F,EAAYC,EAHZ3F,EAAQ,GACRyF,EAAS,GACTG,EAAS,CAAC3kB,EAAS,GAAGb,EAAGyf,EAAK5e,EAAS,GAAGyf,WAGzC,IAAI1hB,EAAI,EAAGA,EAAIiC,EAAStD,OAAQqB,IAGjCjB,KAAK0C,IAAIQ,EAASjC,GAAGoB,EAAIwlB,EAAO,IAChC/F,EAAK5e,EAASjC,GAAG0hB,MAAQkF,EAAO,IAGhC5F,EAAM3b,KAAKpD,EAASjC,IAEpB0mB,EAAaE,EAAO,GAAKA,EAAO,GAC5B3kB,EAASjC,GAAGoB,EAAIyf,EAAK5e,EAASjC,GAAG0hB,MAAQgF,IAC3CA,EAAazkB,EAASjC,GAAGoB,EAAIyf,EAAK5e,EAASjC,GAAG0hB,OAEhDiF,EAAaC,EAAO,GAAKA,EAAO,GAC5B3kB,EAASjC,GAAGoB,EAAIyf,EAAK5e,EAASjC,GAAG0hB,MAAQiF,IAC3CA,EAAa1kB,EAASjC,GAAGoB,EAAIyf,EAAK5e,EAASjC,GAAG0hB,OAEhDkF,EAAS,EACNF,EAAaC,GAAc,EAC5B5nB,KAAK0C,IAAIilB,EAAaC,GAAc,KAGtCF,EAAOphB,KAAK,CAAEuhB,OAAQA,EAAQ5F,MAAOA,IAErCA,EAAQ,CAAC/e,EAASjC,IAClB4mB,EAAS,CAAC3kB,EAASjC,GAAGoB,EAAGyf,EAAK5e,EAASjC,GAAG0hB,QAG9C+E,EAAOphB,KAAK,CAAEuhB,OAAQA,EAAQ5F,MAAOA,QAEhC,IAAIhhB,EAAIymB,EAAO9nB,OAAS,EAAGqB,GAAK,EAAGA,OAGpCjB,KAAK0C,IAAIglB,EAAOzmB,GAAG4mB,OAAO,GAAKH,EAAOzmB,EAAI,GAAG4mB,OAAO,KACnDH,EAAOzmB,GAAG4mB,OAAO,GAAKH,EAAOzmB,EAAI,GAAG4mB,OAAO,IAAM,EAClD,KACK,IAAInnB,EAAI,EAAGA,EAAIgnB,EAAOzmB,EAAI,GAAGghB,MAAMriB,OAAQc,IAC9CgnB,EAAOzmB,GAAGghB,MAAM3b,KAAKohB,EAAOzmB,EAAI,GAAGghB,MAAMvhB,IAE3CinB,EAAaD,EAAOzmB,GAAG4mB,OAAO,GAAKH,EAAOzmB,GAAG4mB,OAAO,GAChDH,EAAOzmB,EAAI,GAAG4mB,OAAO,GAAKH,EAAOzmB,EAAI,GAAG4mB,OAAO,GAAKF,IACtDA,EAAaD,EAAOzmB,EAAI,GAAG4mB,OAAO,GAAKH,EAAOzmB,EAAI,GAAG4mB,OAAO,IAE9DD,EAAaF,EAAOzmB,GAAG4mB,OAAO,GAAKH,EAAOzmB,GAAG4mB,OAAO,GAChDH,EAAOzmB,EAAI,GAAG4mB,OAAO,GAAKH,EAAOzmB,EAAI,GAAG4mB,OAAO,GAAKD,IACtDA,EAAaF,EAAOzmB,EAAI,GAAG4mB,OAAO,GAAKH,EAAOzmB,EAAI,GAAG4mB,OAAO,IAG9DH,EAAOzmB,GAAG4mB,OAAS,EAChBF,EAAaC,GAAc,EAC5B5nB,KAAK0C,IAAIilB,EAAaC,GAAc,GAGtCF,EAAOhR,OAAOzV,EAAI,EAAG,UAGlBymB,EAnLMI,CAAW5kB,EAAUqkB,GAC9BnhB,EAAS,GACTf,EAAS,EACQ,aAAjBiiB,IACFjiB,EAAS,aAGN,IAAIpE,EAAI,EAAGA,EAAIymB,EAAO9nB,OAAQqB,IAAK,KAClC8mB,EAAQL,EAAOzmB,GAAGghB,SAClB8F,EAAMnoB,OAAS,MAEjB6nB,EAAWhE,EACTiE,EAAOzmB,GAAG4mB,OAAO,GAAKH,EAAOzmB,GAAG4mB,OAAO,GACvCH,EAAOzmB,GAAG4mB,OAAO,GAAKH,EAAOzmB,GAAG4mB,OAAO,GACvCxlB,EACAO,EACA+gB,GAEE8D,EAAS,GAAG7nB,OAAS,EAAG,KACtBooB,EAAW,GACM,aAAjBV,EACFU,EAAWjG,EAAoB0F,EAAUM,EAAOP,GAE3B,eAAjBF,IACFU,EAAW1E,EACTmE,EACAM,EACAP,QAKD,IAAI9mB,EAAI,EAAGA,EAAIsnB,EAASpoB,OAAQc,IAAK,KACpCwD,WAAEA,GAAe8jB,EAAStnB,GAC9B0F,EAAOE,KAAK,CACVjE,EAAG6B,EAAW,GACdtB,EAAGsB,EAAW,GACdye,MAAOze,EAAW,GAAKmB,EACvB7B,MAAOukB,EAAMrnB,GAAG8C,kBAMtBukB,EAAQA,EAAM,GACdN,EAAWhE,EACTsE,EAAM1lB,EAAIklB,EAAcQ,EAAMpF,MAC9BoF,EAAM1lB,EAAIklB,EAAcQ,EAAMpF,MAC9BtgB,EACAO,EACA+gB,GAGE8D,EAAS,GAAG7nB,OAAS,EAAG,KACtBqoB,EAAY,GACK,aAAjBX,EACFW,EAAY/E,EACV,CAACuE,EAAS,GAAIA,EAAS,IACvBM,EACAP,GAGmB,eAAjBF,IACFW,EAAYzE,EACV,CAACiE,EAAS,GAAIA,EAAS,IACvBM,EACAP,QAKFtjB,WAAEA,GAAe+jB,EACrB7hB,EAAOE,KAAK,CACVjE,EAAG6B,EAAW,GACdtB,EAAGsB,EAAW,GACdye,MAAOze,EAAW,GAAKmB,EACvB7B,MAAOukB,EAAMvkB,gBAKd4C"}